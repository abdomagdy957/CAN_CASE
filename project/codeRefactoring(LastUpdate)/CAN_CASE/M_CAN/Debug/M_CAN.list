
M_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e80  08000130  08000130  00010130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001fb0  08001fb0  00011fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001fc8  08001fc8  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  08001fc8  08001fc8  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001fc8  08001fc8  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001fc8  08001fc8  00011fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001fcc  08001fcc  00011fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08001fd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004554  20000024  08001ff4  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004578  08001ff4  00024578  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004230  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001291  00000000  00000000  000242c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000005a8  00000000  00000000  00025558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000434  00000000  00000000  00025b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000010e0  00000000  00000000  00025f34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000049d4  00000000  00000000  00027014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00010140  00000000  00000000  0002b9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001510  00000000  00000000  0003bb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0003d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08001f98 	.word	0x08001f98

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08001f98 	.word	0x08001f98

08000170 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	f103 0208 	add.w	r2, r3, #8
 800017e:	687b      	ldr	r3, [r7, #4]
 8000180:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	f04f 32ff 	mov.w	r2, #4294967295
 8000188:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	f103 0208 	add.w	r2, r3, #8
 8000190:	687b      	ldr	r3, [r7, #4]
 8000192:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000194:	687b      	ldr	r3, [r7, #4]
 8000196:	f103 0208 	add.w	r2, r3, #8
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2200      	movs	r2, #0
 80001a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80001a4:	bf00      	nop
 80001a6:	370c      	adds	r7, #12
 80001a8:	46bd      	mov	sp, r7
 80001aa:	bc80      	pop	{r7}
 80001ac:	4770      	bx	lr

080001ae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001ae:	b480      	push	{r7}
 80001b0:	b083      	sub	sp, #12
 80001b2:	af00      	add	r7, sp, #0
 80001b4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80001b6:	687b      	ldr	r3, [r7, #4]
 80001b8:	2200      	movs	r2, #0
 80001ba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80001bc:	bf00      	nop
 80001be:	370c      	adds	r7, #12
 80001c0:	46bd      	mov	sp, r7
 80001c2:	bc80      	pop	{r7}
 80001c4:	4770      	bx	lr

080001c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001c6:	b480      	push	{r7}
 80001c8:	b085      	sub	sp, #20
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001d6:	683b      	ldr	r3, [r7, #0]
 80001d8:	68fa      	ldr	r2, [r7, #12]
 80001da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	689a      	ldr	r2, [r3, #8]
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	689b      	ldr	r3, [r3, #8]
 80001e8:	683a      	ldr	r2, [r7, #0]
 80001ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001ec:	68fb      	ldr	r3, [r7, #12]
 80001ee:	683a      	ldr	r2, [r7, #0]
 80001f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80001f2:	683b      	ldr	r3, [r7, #0]
 80001f4:	687a      	ldr	r2, [r7, #4]
 80001f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	1c5a      	adds	r2, r3, #1
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	601a      	str	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800020c:	b480      	push	{r7}
 800020e:	b085      	sub	sp, #20
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	691b      	ldr	r3, [r3, #16]
 8000218:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800021a:	687b      	ldr	r3, [r7, #4]
 800021c:	685b      	ldr	r3, [r3, #4]
 800021e:	687a      	ldr	r2, [r7, #4]
 8000220:	6892      	ldr	r2, [r2, #8]
 8000222:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	689b      	ldr	r3, [r3, #8]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	6852      	ldr	r2, [r2, #4]
 800022c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685b      	ldr	r3, [r3, #4]
 8000232:	687a      	ldr	r2, [r7, #4]
 8000234:	429a      	cmp	r2, r3
 8000236:	d103      	bne.n	8000240 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	689a      	ldr	r2, [r3, #8]
 800023c:	68fb      	ldr	r3, [r7, #12]
 800023e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	2200      	movs	r2, #0
 8000244:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	1e5a      	subs	r2, r3, #1
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000250:	68fb      	ldr	r3, [r7, #12]
 8000252:	681b      	ldr	r3, [r3, #0]
}
 8000254:	4618      	mov	r0, r3
 8000256:	3714      	adds	r7, #20
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800025e:	b580      	push	{r7, lr}
 8000260:	b08c      	sub	sp, #48	; 0x30
 8000262:	af04      	add	r7, sp, #16
 8000264:	60f8      	str	r0, [r7, #12]
 8000266:	60b9      	str	r1, [r7, #8]
 8000268:	603b      	str	r3, [r7, #0]
 800026a:	4613      	mov	r3, r2
 800026c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800026e:	88fb      	ldrh	r3, [r7, #6]
 8000270:	009b      	lsls	r3, r3, #2
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fd4c 	bl	8000d10 <pvPortMalloc>
 8000278:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d00e      	beq.n	800029e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000280:	2054      	movs	r0, #84	; 0x54
 8000282:	f000 fd45 	bl	8000d10 <pvPortMalloc>
 8000286:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d003      	beq.n	8000296 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800028e:	69fb      	ldr	r3, [r7, #28]
 8000290:	697a      	ldr	r2, [r7, #20]
 8000292:	631a      	str	r2, [r3, #48]	; 0x30
 8000294:	e005      	b.n	80002a2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000296:	6978      	ldr	r0, [r7, #20]
 8000298:	f000 fdd4 	bl	8000e44 <vPortFree>
 800029c:	e001      	b.n	80002a2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800029e:	2300      	movs	r3, #0
 80002a0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80002a2:	69fb      	ldr	r3, [r7, #28]
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d013      	beq.n	80002d0 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80002a8:	88fa      	ldrh	r2, [r7, #6]
 80002aa:	2300      	movs	r3, #0
 80002ac:	9303      	str	r3, [sp, #12]
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	9302      	str	r3, [sp, #8]
 80002b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002b4:	9301      	str	r3, [sp, #4]
 80002b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002b8:	9300      	str	r3, [sp, #0]
 80002ba:	683b      	ldr	r3, [r7, #0]
 80002bc:	68b9      	ldr	r1, [r7, #8]
 80002be:	68f8      	ldr	r0, [r7, #12]
 80002c0:	f000 f80e 	bl	80002e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80002c4:	69f8      	ldr	r0, [r7, #28]
 80002c6:	f000 f883 	bl	80003d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80002ca:	2301      	movs	r3, #1
 80002cc:	61bb      	str	r3, [r7, #24]
 80002ce:	e002      	b.n	80002d6 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80002d0:	f04f 33ff 	mov.w	r3, #4294967295
 80002d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80002d6:	69bb      	ldr	r3, [r7, #24]
	}
 80002d8:	4618      	mov	r0, r3
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b086      	sub	sp, #24
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
 80002ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80002ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80002f8:	3b01      	subs	r3, #1
 80002fa:	009b      	lsls	r3, r3, #2
 80002fc:	4413      	add	r3, r2
 80002fe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000300:	693b      	ldr	r3, [r7, #16]
 8000302:	f023 0307 	bic.w	r3, r3, #7
 8000306:	613b      	str	r3, [r7, #16]
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8000308:	68bb      	ldr	r3, [r7, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d01f      	beq.n	800034e <prvInitialiseNewTask+0x6e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	e012      	b.n	800033a <prvInitialiseNewTask+0x5a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000314:	68ba      	ldr	r2, [r7, #8]
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	4413      	add	r3, r2
 800031a:	7819      	ldrb	r1, [r3, #0]
 800031c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800031e:	697b      	ldr	r3, [r7, #20]
 8000320:	4413      	add	r3, r2
 8000322:	3334      	adds	r3, #52	; 0x34
 8000324:	460a      	mov	r2, r1
 8000326:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8000328:	68ba      	ldr	r2, [r7, #8]
 800032a:	697b      	ldr	r3, [r7, #20]
 800032c:	4413      	add	r3, r2
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b00      	cmp	r3, #0
 8000332:	d006      	beq.n	8000342 <prvInitialiseNewTask+0x62>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000334:	697b      	ldr	r3, [r7, #20]
 8000336:	3301      	adds	r3, #1
 8000338:	617b      	str	r3, [r7, #20]
 800033a:	697b      	ldr	r3, [r7, #20]
 800033c:	2b0f      	cmp	r3, #15
 800033e:	d9e9      	bls.n	8000314 <prvInitialiseNewTask+0x34>
 8000340:	e000      	b.n	8000344 <prvInitialiseNewTask+0x64>
			{
				break;
 8000342:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000346:	2200      	movs	r2, #0
 8000348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800034c:	e003      	b.n	8000356 <prvInitialiseNewTask+0x76>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800034e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000350:	2200      	movs	r2, #0
 8000352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000356:	6a3b      	ldr	r3, [r7, #32]
 8000358:	2b04      	cmp	r3, #4
 800035a:	d901      	bls.n	8000360 <prvInitialiseNewTask+0x80>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800035c:	2304      	movs	r3, #4
 800035e:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000362:	6a3a      	ldr	r2, [r7, #32]
 8000364:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000368:	6a3a      	ldr	r2, [r7, #32]
 800036a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800036c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800036e:	2200      	movs	r2, #0
 8000370:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000374:	3304      	adds	r3, #4
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ff19 	bl	80001ae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800037c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800037e:	3318      	adds	r3, #24
 8000380:	4618      	mov	r0, r3
 8000382:	f7ff ff14 	bl	80001ae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000388:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800038a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800038c:	6a3b      	ldr	r3, [r7, #32]
 800038e:	f1c3 0205 	rsb	r2, r3, #5
 8000392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000394:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800039a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800039c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800039e:	2200      	movs	r2, #0
 80003a0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80003a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003a4:	2200      	movs	r2, #0
 80003a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80003aa:	683a      	ldr	r2, [r7, #0]
 80003ac:	68f9      	ldr	r1, [r7, #12]
 80003ae:	6938      	ldr	r0, [r7, #16]
 80003b0:	f000 fb90 	bl	8000ad4 <pxPortInitialiseStack>
 80003b4:	4602      	mov	r2, r0
 80003b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80003b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80003ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d002      	beq.n	80003c6 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80003c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80003c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80003c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80003c6:	bf00      	nop
 80003c8:	3718      	adds	r7, #24
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80003d8:	f000 fc06 	bl	8000be8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80003dc:	4b24      	ldr	r3, [pc, #144]	; (8000470 <prvAddNewTaskToReadyList+0xa0>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	3301      	adds	r3, #1
 80003e2:	4a23      	ldr	r2, [pc, #140]	; (8000470 <prvAddNewTaskToReadyList+0xa0>)
 80003e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80003e6:	4b23      	ldr	r3, [pc, #140]	; (8000474 <prvAddNewTaskToReadyList+0xa4>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d109      	bne.n	8000402 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80003ee:	4a21      	ldr	r2, [pc, #132]	; (8000474 <prvAddNewTaskToReadyList+0xa4>)
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80003f4:	4b1e      	ldr	r3, [pc, #120]	; (8000470 <prvAddNewTaskToReadyList+0xa0>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	2b01      	cmp	r3, #1
 80003fa:	d110      	bne.n	800041e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80003fc:	f000 facc 	bl	8000998 <prvInitialiseTaskLists>
 8000400:	e00d      	b.n	800041e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000402:	4b1d      	ldr	r3, [pc, #116]	; (8000478 <prvAddNewTaskToReadyList+0xa8>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d109      	bne.n	800041e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800040a:	4b1a      	ldr	r3, [pc, #104]	; (8000474 <prvAddNewTaskToReadyList+0xa4>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000414:	429a      	cmp	r2, r3
 8000416:	d802      	bhi.n	800041e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000418:	4a16      	ldr	r2, [pc, #88]	; (8000474 <prvAddNewTaskToReadyList+0xa4>)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800041e:	4b17      	ldr	r3, [pc, #92]	; (800047c <prvAddNewTaskToReadyList+0xac>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	3301      	adds	r3, #1
 8000424:	4a15      	ldr	r2, [pc, #84]	; (800047c <prvAddNewTaskToReadyList+0xac>)
 8000426:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000428:	687b      	ldr	r3, [r7, #4]
 800042a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800042c:	2201      	movs	r2, #1
 800042e:	409a      	lsls	r2, r3
 8000430:	4b13      	ldr	r3, [pc, #76]	; (8000480 <prvAddNewTaskToReadyList+0xb0>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4313      	orrs	r3, r2
 8000436:	4a12      	ldr	r2, [pc, #72]	; (8000480 <prvAddNewTaskToReadyList+0xb0>)
 8000438:	6013      	str	r3, [r2, #0]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800043e:	4613      	mov	r3, r2
 8000440:	009b      	lsls	r3, r3, #2
 8000442:	4413      	add	r3, r2
 8000444:	009b      	lsls	r3, r3, #2
 8000446:	4a0f      	ldr	r2, [pc, #60]	; (8000484 <prvAddNewTaskToReadyList+0xb4>)
 8000448:	441a      	add	r2, r3
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	3304      	adds	r3, #4
 800044e:	4619      	mov	r1, r3
 8000450:	4610      	mov	r0, r2
 8000452:	f7ff feb8 	bl	80001c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000456:	f000 fbe1 	bl	8000c1c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800045a:	4b07      	ldr	r3, [pc, #28]	; (8000478 <prvAddNewTaskToReadyList+0xa8>)
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	2b00      	cmp	r3, #0
 8000460:	d001      	beq.n	8000466 <prvAddNewTaskToReadyList+0x96>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <prvAddNewTaskToReadyList+0xa4>)
 8000464:	681b      	ldr	r3, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000466:	bf00      	nop
 8000468:	3708      	adds	r7, #8
 800046a:	46bd      	mov	sp, r7
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000118 	.word	0x20000118
 8000474:	20000040 	.word	0x20000040
 8000478:	20000124 	.word	0x20000124
 800047c:	20000134 	.word	0x20000134
 8000480:	20000120 	.word	0x20000120
 8000484:	20000044 	.word	0x20000044

08000488 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8000490:	f000 fbaa 	bl	8000be8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d102      	bne.n	80004a0 <vTaskSuspend+0x18>
 800049a:	4b35      	ldr	r3, [pc, #212]	; (8000570 <vTaskSuspend+0xe8>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	e000      	b.n	80004a2 <vTaskSuspend+0x1a>
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80004a4:	68fb      	ldr	r3, [r7, #12]
 80004a6:	3304      	adds	r3, #4
 80004a8:	4618      	mov	r0, r3
 80004aa:	f7ff feaf 	bl	800020c <uxListRemove>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d115      	bne.n	80004e0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b8:	492e      	ldr	r1, [pc, #184]	; (8000574 <vTaskSuspend+0xec>)
 80004ba:	4613      	mov	r3, r2
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	4413      	add	r3, r2
 80004c0:	009b      	lsls	r3, r3, #2
 80004c2:	440b      	add	r3, r1
 80004c4:	681b      	ldr	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d10a      	bne.n	80004e0 <vTaskSuspend+0x58>
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004ce:	2201      	movs	r2, #1
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	43da      	mvns	r2, r3
 80004d6:	4b28      	ldr	r3, [pc, #160]	; (8000578 <vTaskSuspend+0xf0>)
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4013      	ands	r3, r2
 80004dc:	4a26      	ldr	r2, [pc, #152]	; (8000578 <vTaskSuspend+0xf0>)
 80004de:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80004e0:	68fb      	ldr	r3, [r7, #12]
 80004e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d004      	beq.n	80004f2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	3318      	adds	r3, #24
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fe8d 	bl	800020c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	3304      	adds	r3, #4
 80004f6:	4619      	mov	r1, r3
 80004f8:	4820      	ldr	r0, [pc, #128]	; (800057c <vTaskSuspend+0xf4>)
 80004fa:	f7ff fe64 	bl	80001c6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8000504:	b2db      	uxtb	r3, r3
 8000506:	2b01      	cmp	r3, #1
 8000508:	d103      	bne.n	8000512 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	2200      	movs	r2, #0
 800050e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8000512:	f000 fb83 	bl	8000c1c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <vTaskSuspend+0xf8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d005      	beq.n	800052a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800051e:	f000 fb63 	bl	8000be8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8000522:	f000 fab7 	bl	8000a94 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8000526:	f000 fb79 	bl	8000c1c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800052a:	4b11      	ldr	r3, [pc, #68]	; (8000570 <vTaskSuspend+0xe8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	68fa      	ldr	r2, [r7, #12]
 8000530:	429a      	cmp	r2, r3
 8000532:	d118      	bne.n	8000566 <vTaskSuspend+0xde>
		{
			if( xSchedulerRunning != pdFALSE )
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <vTaskSuspend+0xf8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d008      	beq.n	800054e <vTaskSuspend+0xc6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
				portYIELD_WITHIN_API();
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <vTaskSuspend+0xfc>)
 800053e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	f3bf 8f4f 	dsb	sy
 8000548:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800054c:	e00b      	b.n	8000566 <vTaskSuspend+0xde>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <vTaskSuspend+0xf4>)
 8000550:	681a      	ldr	r2, [r3, #0]
 8000552:	4b0d      	ldr	r3, [pc, #52]	; (8000588 <vTaskSuspend+0x100>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	429a      	cmp	r2, r3
 8000558:	d103      	bne.n	8000562 <vTaskSuspend+0xda>
					pxCurrentTCB = NULL;
 800055a:	4b05      	ldr	r3, [pc, #20]	; (8000570 <vTaskSuspend+0xe8>)
 800055c:	2200      	movs	r2, #0
 800055e:	601a      	str	r2, [r3, #0]
	}
 8000560:	e001      	b.n	8000566 <vTaskSuspend+0xde>
					vTaskSwitchContext();
 8000562:	f000 f9c1 	bl	80008e8 <vTaskSwitchContext>
	}
 8000566:	bf00      	nop
 8000568:	3710      	adds	r7, #16
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	20000040 	.word	0x20000040
 8000574:	20000044 	.word	0x20000044
 8000578:	20000120 	.word	0x20000120
 800057c:	20000104 	.word	0x20000104
 8000580:	20000124 	.word	0x20000124
 8000584:	e000ed04 	.word	0xe000ed04
 8000588:	20000118 	.word	0x20000118

0800058c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800058c:	b480      	push	{r7}
 800058e:	b085      	sub	sp, #20
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
	const TCB_t * const pxTCB = xTask;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	60bb      	str	r3, [r7, #8]

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	695b      	ldr	r3, [r3, #20]
 80005a0:	4a09      	ldr	r2, [pc, #36]	; (80005c8 <prvTaskIsTaskSuspended+0x3c>)
 80005a2:	4293      	cmp	r3, r2
 80005a4:	d10a      	bne.n	80005bc <prvTaskIsTaskSuspended+0x30>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <prvTaskIsTaskSuspended+0x40>)
 80005ac:	4293      	cmp	r3, r2
 80005ae:	d005      	beq.n	80005bc <prvTaskIsTaskSuspended+0x30>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d101      	bne.n	80005bc <prvTaskIsTaskSuspended+0x30>
				{
					xReturn = pdTRUE;
 80005b8:	2301      	movs	r3, #1
 80005ba:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80005bc:	68fb      	ldr	r3, [r7, #12]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80005be:	4618      	mov	r0, r3
 80005c0:	3714      	adds	r7, #20
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr
 80005c8:	20000104 	.word	0x20000104
 80005cc:	200000d8 	.word	0x200000d8

080005d0 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	60fb      	str	r3, [r7, #12]
		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 80005dc:	4b19      	ldr	r3, [pc, #100]	; (8000644 <vTaskResume+0x74>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	68fa      	ldr	r2, [r7, #12]
 80005e2:	429a      	cmp	r2, r3
 80005e4:	d02a      	beq.n	800063c <vTaskResume+0x6c>
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d027      	beq.n	800063c <vTaskResume+0x6c>
		{
			taskENTER_CRITICAL();
 80005ec:	f000 fafc 	bl	8000be8 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80005f0:	68f8      	ldr	r0, [r7, #12]
 80005f2:	f7ff ffcb 	bl	800058c <prvTaskIsTaskSuspended>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d01d      	beq.n	8000638 <vTaskResume+0x68>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	3304      	adds	r3, #4
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff fe03 	bl	800020c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2201      	movs	r2, #1
 800060c:	409a      	lsls	r2, r3
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <vTaskResume+0x78>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4313      	orrs	r3, r2
 8000614:	4a0c      	ldr	r2, [pc, #48]	; (8000648 <vTaskResume+0x78>)
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4a09      	ldr	r2, [pc, #36]	; (800064c <vTaskResume+0x7c>)
 8000626:	441a      	add	r2, r3
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3304      	adds	r3, #4
 800062c:	4619      	mov	r1, r3
 800062e:	4610      	mov	r0, r2
 8000630:	f7ff fdc9 	bl	80001c6 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000634:	4b03      	ldr	r3, [pc, #12]	; (8000644 <vTaskResume+0x74>)
 8000636:	681b      	ldr	r3, [r3, #0]
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8000638:	f000 faf0 	bl	8000c1c <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000040 	.word	0x20000040
 8000648:	20000120 	.word	0x20000120
 800064c:	20000044 	.word	0x20000044

08000650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000656:	4b14      	ldr	r3, [pc, #80]	; (80006a8 <vTaskStartScheduler+0x58>)
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2300      	movs	r3, #0
 800065c:	9300      	str	r3, [sp, #0]
 800065e:	2300      	movs	r3, #0
 8000660:	2280      	movs	r2, #128	; 0x80
 8000662:	4912      	ldr	r1, [pc, #72]	; (80006ac <vTaskStartScheduler+0x5c>)
 8000664:	4812      	ldr	r0, [pc, #72]	; (80006b0 <vTaskStartScheduler+0x60>)
 8000666:	f7ff fdfa 	bl	800025e <xTaskCreate>
 800066a:	6078      	str	r0, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2b01      	cmp	r3, #1
 8000670:	d115      	bne.n	800069e <vTaskStartScheduler+0x4e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000672:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000676:	f383 8811 	msr	BASEPRI, r3
 800067a:	f3bf 8f6f 	isb	sy
 800067e:	f3bf 8f4f 	dsb	sy
 8000682:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000684:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000686:	4b0b      	ldr	r3, [pc, #44]	; (80006b4 <vTaskStartScheduler+0x64>)
 8000688:	f04f 32ff 	mov.w	r2, #4294967295
 800068c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <vTaskStartScheduler+0x68>)
 8000690:	2201      	movs	r2, #1
 8000692:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000694:	4b09      	ldr	r3, [pc, #36]	; (80006bc <vTaskStartScheduler+0x6c>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800069a:	f000 fa85 	bl	8000ba8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800069e:	bf00      	nop
 80006a0:	3708      	adds	r7, #8
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000013c 	.word	0x2000013c
 80006ac:	08001fb0 	.word	0x08001fb0
 80006b0:	08000975 	.word	0x08000975
 80006b4:	20000138 	.word	0x20000138
 80006b8:	20000124 	.word	0x20000124
 80006bc:	2000011c 	.word	0x2000011c

080006c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <vTaskSuspendAll+0x18>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <vTaskSuspendAll+0x18>)
 80006cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000140 	.word	0x20000140

080006dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80006e6:	2300      	movs	r3, #0
 80006e8:	607b      	str	r3, [r7, #4]
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80006ea:	f000 fa7d 	bl	8000be8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <xTaskResumeAll+0xe0>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	3b01      	subs	r3, #1
 80006f4:	4a31      	ldr	r2, [pc, #196]	; (80007bc <xTaskResumeAll+0xe0>)
 80006f6:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80006f8:	4b30      	ldr	r3, [pc, #192]	; (80007bc <xTaskResumeAll+0xe0>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d155      	bne.n	80007ac <xTaskResumeAll+0xd0>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000700:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <xTaskResumeAll+0xe4>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d051      	beq.n	80007ac <xTaskResumeAll+0xd0>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000708:	e02e      	b.n	8000768 <xTaskResumeAll+0x8c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800070a:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <xTaskResumeAll+0xe8>)
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	3318      	adds	r3, #24
 8000716:	4618      	mov	r0, r3
 8000718:	f7ff fd78 	bl	800020c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3304      	adds	r3, #4
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff fd73 	bl	800020c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072a:	2201      	movs	r2, #1
 800072c:	409a      	lsls	r2, r3
 800072e:	4b26      	ldr	r3, [pc, #152]	; (80007c8 <xTaskResumeAll+0xec>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	4313      	orrs	r3, r2
 8000734:	4a24      	ldr	r2, [pc, #144]	; (80007c8 <xTaskResumeAll+0xec>)
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800073c:	4613      	mov	r3, r2
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	4413      	add	r3, r2
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	4a21      	ldr	r2, [pc, #132]	; (80007cc <xTaskResumeAll+0xf0>)
 8000746:	441a      	add	r2, r3
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	3304      	adds	r3, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4610      	mov	r0, r2
 8000750:	f7ff fd39 	bl	80001c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <xTaskResumeAll+0xf4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800075e:	429a      	cmp	r2, r3
 8000760:	d302      	bcc.n	8000768 <xTaskResumeAll+0x8c>
					{
						xYieldPending = pdTRUE;
 8000762:	4b1c      	ldr	r3, [pc, #112]	; (80007d4 <xTaskResumeAll+0xf8>)
 8000764:	2201      	movs	r2, #1
 8000766:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000768:	4b16      	ldr	r3, [pc, #88]	; (80007c4 <xTaskResumeAll+0xe8>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d1cc      	bne.n	800070a <xTaskResumeAll+0x2e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000770:	68fb      	ldr	r3, [r7, #12]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <xTaskResumeAll+0x9e>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000776:	f000 f98d 	bl	8000a94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <xTaskResumeAll+0xfc>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	60bb      	str	r3, [r7, #8]

					if( xPendedCounts > ( TickType_t ) 0U )
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	2b00      	cmp	r3, #0
 8000784:	d010      	beq.n	80007a8 <xTaskResumeAll+0xcc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000786:	f000 f829 	bl	80007dc <xTaskIncrementTick>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d002      	beq.n	8000796 <xTaskResumeAll+0xba>
							{
								xYieldPending = pdTRUE;
 8000790:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <xTaskResumeAll+0xf8>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	3b01      	subs	r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f1      	bne.n	8000786 <xTaskResumeAll+0xaa>

						xPendedTicks = 0;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <xTaskResumeAll+0xfc>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80007a8:	4b0a      	ldr	r3, [pc, #40]	; (80007d4 <xTaskResumeAll+0xf8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80007ac:	f000 fa36 	bl	8000c1c <vPortExitCritical>

	return xAlreadyYielded;
 80007b0:	687b      	ldr	r3, [r7, #4]
}
 80007b2:	4618      	mov	r0, r3
 80007b4:	3710      	adds	r7, #16
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000140 	.word	0x20000140
 80007c0:	20000118 	.word	0x20000118
 80007c4:	200000d8 	.word	0x200000d8
 80007c8:	20000120 	.word	0x20000120
 80007cc:	20000044 	.word	0x20000044
 80007d0:	20000040 	.word	0x20000040
 80007d4:	2000012c 	.word	0x2000012c
 80007d8:	20000128 	.word	0x20000128

080007dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b086      	sub	sp, #24
 80007e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80007e6:	4b37      	ldr	r3, [pc, #220]	; (80008c4 <xTaskIncrementTick+0xe8>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d15f      	bne.n	80008ae <xTaskIncrementTick+0xd2>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80007ee:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <xTaskIncrementTick+0xec>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80007f6:	4a34      	ldr	r2, [pc, #208]	; (80008c8 <xTaskIncrementTick+0xec>)
 80007f8:	693b      	ldr	r3, [r7, #16]
 80007fa:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d110      	bne.n	8000824 <xTaskIncrementTick+0x48>
		{
			taskSWITCH_DELAYED_LISTS();
 8000802:	4b32      	ldr	r3, [pc, #200]	; (80008cc <xTaskIncrementTick+0xf0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	4b31      	ldr	r3, [pc, #196]	; (80008d0 <xTaskIncrementTick+0xf4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a2f      	ldr	r2, [pc, #188]	; (80008cc <xTaskIncrementTick+0xf0>)
 800080e:	6013      	str	r3, [r2, #0]
 8000810:	4a2f      	ldr	r2, [pc, #188]	; (80008d0 <xTaskIncrementTick+0xf4>)
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	6013      	str	r3, [r2, #0]
 8000816:	4b2f      	ldr	r3, [pc, #188]	; (80008d4 <xTaskIncrementTick+0xf8>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	3301      	adds	r3, #1
 800081c:	4a2d      	ldr	r2, [pc, #180]	; (80008d4 <xTaskIncrementTick+0xf8>)
 800081e:	6013      	str	r3, [r2, #0]
 8000820:	f000 f938 	bl	8000a94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <xTaskIncrementTick+0xfc>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	693a      	ldr	r2, [r7, #16]
 800082a:	429a      	cmp	r2, r3
 800082c:	d344      	bcc.n	80008b8 <xTaskIncrementTick+0xdc>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800082e:	4b27      	ldr	r3, [pc, #156]	; (80008cc <xTaskIncrementTick+0xf0>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d104      	bne.n	8000842 <xTaskIncrementTick+0x66>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <xTaskIncrementTick+0xfc>)
 800083a:	f04f 32ff 	mov.w	r2, #4294967295
 800083e:	601a      	str	r2, [r3, #0]
					break;
 8000840:	e03a      	b.n	80008b8 <xTaskIncrementTick+0xdc>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000842:	4b22      	ldr	r3, [pc, #136]	; (80008cc <xTaskIncrementTick+0xf0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	68db      	ldr	r3, [r3, #12]
 800084a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	685b      	ldr	r3, [r3, #4]
 8000850:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8000852:	693a      	ldr	r2, [r7, #16]
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	429a      	cmp	r2, r3
 8000858:	d203      	bcs.n	8000862 <xTaskIncrementTick+0x86>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <xTaskIncrementTick+0xfc>)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8000860:	e02a      	b.n	80008b8 <xTaskIncrementTick+0xdc>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	3304      	adds	r3, #4
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fcd0 	bl	800020c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000870:	2b00      	cmp	r3, #0
 8000872:	d004      	beq.n	800087e <xTaskIncrementTick+0xa2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	3318      	adds	r3, #24
 8000878:	4618      	mov	r0, r3
 800087a:	f7ff fcc7 	bl	800020c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2201      	movs	r2, #1
 8000884:	409a      	lsls	r2, r3
 8000886:	4b15      	ldr	r3, [pc, #84]	; (80008dc <xTaskIncrementTick+0x100>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	4313      	orrs	r3, r2
 800088c:	4a13      	ldr	r2, [pc, #76]	; (80008dc <xTaskIncrementTick+0x100>)
 800088e:	6013      	str	r3, [r2, #0]
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000894:	4613      	mov	r3, r2
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4413      	add	r3, r2
 800089a:	009b      	lsls	r3, r3, #2
 800089c:	4a10      	ldr	r2, [pc, #64]	; (80008e0 <xTaskIncrementTick+0x104>)
 800089e:	441a      	add	r2, r3
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	3304      	adds	r3, #4
 80008a4:	4619      	mov	r1, r3
 80008a6:	4610      	mov	r0, r2
 80008a8:	f7ff fc8d 	bl	80001c6 <vListInsertEnd>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80008ac:	e7bf      	b.n	800082e <xTaskIncrementTick+0x52>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <xTaskIncrementTick+0x108>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	3301      	adds	r3, #1
 80008b4:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <xTaskIncrementTick+0x108>)
 80008b6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80008b8:	697b      	ldr	r3, [r7, #20]
}
 80008ba:	4618      	mov	r0, r3
 80008bc:	3718      	adds	r7, #24
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000140 	.word	0x20000140
 80008c8:	2000011c 	.word	0x2000011c
 80008cc:	200000d0 	.word	0x200000d0
 80008d0:	200000d4 	.word	0x200000d4
 80008d4:	20000130 	.word	0x20000130
 80008d8:	20000138 	.word	0x20000138
 80008dc:	20000120 	.word	0x20000120
 80008e0:	20000044 	.word	0x20000044
 80008e4:	20000128 	.word	0x20000128

080008e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80008e8:	b480      	push	{r7}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80008ee:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <vTaskSwitchContext+0x78>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <vTaskSwitchContext+0x7c>)
 80008f8:	2201      	movs	r2, #1
 80008fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80008fc:	e02a      	b.n	8000954 <vTaskSwitchContext+0x6c>
		xYieldPending = pdFALSE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <vTaskSwitchContext+0x7c>)
 8000900:	2200      	movs	r2, #0
 8000902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000904:	4b18      	ldr	r3, [pc, #96]	; (8000968 <vTaskSwitchContext+0x80>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	607b      	str	r3, [r7, #4]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	fab3 f383 	clz	r3, r3
 8000910:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
 8000912:	78fb      	ldrb	r3, [r7, #3]
 8000914:	f1c3 031f 	rsb	r3, r3, #31
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	4613      	mov	r3, r2
 800091e:	009b      	lsls	r3, r3, #2
 8000920:	4413      	add	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	4a11      	ldr	r2, [pc, #68]	; (800096c <vTaskSwitchContext+0x84>)
 8000926:	4413      	add	r3, r2
 8000928:	60bb      	str	r3, [r7, #8]
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	685b      	ldr	r3, [r3, #4]
 800092e:	685a      	ldr	r2, [r3, #4]
 8000930:	68bb      	ldr	r3, [r7, #8]
 8000932:	605a      	str	r2, [r3, #4]
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	3308      	adds	r3, #8
 800093c:	429a      	cmp	r2, r3
 800093e:	d104      	bne.n	800094a <vTaskSwitchContext+0x62>
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	685a      	ldr	r2, [r3, #4]
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <vTaskSwitchContext+0x88>)
 8000952:	6013      	str	r3, [r2, #0]
}
 8000954:	bf00      	nop
 8000956:	3714      	adds	r7, #20
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	20000140 	.word	0x20000140
 8000964:	2000012c 	.word	0x2000012c
 8000968:	20000120 	.word	0x20000120
 800096c:	20000044 	.word	0x20000044
 8000970:	20000040 	.word	0x20000040

08000974 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800097c:	f000 f84c 	bl	8000a18 <prvCheckTasksWaitingTermination>
		{
			/* If we are not using preemption we keep forcing a task switch to
			see if any other task has become available.  If we are using
			preemption we don't need to do this as any task becoming available
			will automatically get the processor anyway. */
			taskYIELD();
 8000980:	4b04      	ldr	r3, [pc, #16]	; (8000994 <prvIdleTask+0x20>)
 8000982:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	f3bf 8f4f 	dsb	sy
 800098c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8000990:	e7f4      	b.n	800097c <prvIdleTask+0x8>
 8000992:	bf00      	nop
 8000994:	e000ed04 	.word	0xe000ed04

08000998 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800099e:	2300      	movs	r3, #0
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	e00c      	b.n	80009be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	4613      	mov	r3, r2
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	4413      	add	r3, r2
 80009ac:	009b      	lsls	r3, r3, #2
 80009ae:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <prvInitialiseTaskLists+0x60>)
 80009b0:	4413      	add	r3, r2
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fbdc 	bl	8000170 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3301      	adds	r3, #1
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d9ef      	bls.n	80009a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80009c4:	480d      	ldr	r0, [pc, #52]	; (80009fc <prvInitialiseTaskLists+0x64>)
 80009c6:	f7ff fbd3 	bl	8000170 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80009ca:	480d      	ldr	r0, [pc, #52]	; (8000a00 <prvInitialiseTaskLists+0x68>)
 80009cc:	f7ff fbd0 	bl	8000170 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80009d0:	480c      	ldr	r0, [pc, #48]	; (8000a04 <prvInitialiseTaskLists+0x6c>)
 80009d2:	f7ff fbcd 	bl	8000170 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80009d6:	480c      	ldr	r0, [pc, #48]	; (8000a08 <prvInitialiseTaskLists+0x70>)
 80009d8:	f7ff fbca 	bl	8000170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80009dc:	480b      	ldr	r0, [pc, #44]	; (8000a0c <prvInitialiseTaskLists+0x74>)
 80009de:	f7ff fbc7 	bl	8000170 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80009e2:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <prvInitialiseTaskLists+0x78>)
 80009e4:	4a05      	ldr	r2, [pc, #20]	; (80009fc <prvInitialiseTaskLists+0x64>)
 80009e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80009e8:	4b0a      	ldr	r3, [pc, #40]	; (8000a14 <prvInitialiseTaskLists+0x7c>)
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <prvInitialiseTaskLists+0x68>)
 80009ec:	601a      	str	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000044 	.word	0x20000044
 80009fc:	200000a8 	.word	0x200000a8
 8000a00:	200000bc 	.word	0x200000bc
 8000a04:	200000d8 	.word	0x200000d8
 8000a08:	200000ec 	.word	0x200000ec
 8000a0c:	20000104 	.word	0x20000104
 8000a10:	200000d0 	.word	0x200000d0
 8000a14:	200000d4 	.word	0x200000d4

08000a18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000a1e:	e019      	b.n	8000a54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8000a20:	f000 f8e2 	bl	8000be8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000a24:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <prvCheckTasksWaitingTermination+0x50>)
 8000a26:	68db      	ldr	r3, [r3, #12]
 8000a28:	68db      	ldr	r3, [r3, #12]
 8000a2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	3304      	adds	r3, #4
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fbeb 	bl	800020c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <prvCheckTasksWaitingTermination+0x54>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	4a0b      	ldr	r2, [pc, #44]	; (8000a6c <prvCheckTasksWaitingTermination+0x54>)
 8000a3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8000a40:	4b0b      	ldr	r3, [pc, #44]	; (8000a70 <prvCheckTasksWaitingTermination+0x58>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	3b01      	subs	r3, #1
 8000a46:	4a0a      	ldr	r2, [pc, #40]	; (8000a70 <prvCheckTasksWaitingTermination+0x58>)
 8000a48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8000a4a:	f000 f8e7 	bl	8000c1c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f000 f810 	bl	8000a74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <prvCheckTasksWaitingTermination+0x58>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d1e1      	bne.n	8000a20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200000ec 	.word	0x200000ec
 8000a6c:	20000118 	.word	0x20000118
 8000a70:	20000100 	.word	0x20000100

08000a74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f9df 	bl	8000e44 <vPortFree>
			vPortFree( pxTCB );
 8000a86:	6878      	ldr	r0, [r7, #4]
 8000a88:	f000 f9dc 	bl	8000e44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <prvResetNextTaskUnblockTime+0x38>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d104      	bne.n	8000aae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8000aa4:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8000aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8000aac:	e008      	b.n	8000ac0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <prvResetNextTaskUnblockTime+0x38>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	68db      	ldr	r3, [r3, #12]
 8000ab6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4a04      	ldr	r2, [pc, #16]	; (8000ad0 <prvResetNextTaskUnblockTime+0x3c>)
 8000abe:	6013      	str	r3, [r2, #0]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	200000d0 	.word	0x200000d0
 8000ad0:	20000138 	.word	0x20000138

08000ad4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b085      	sub	sp, #20
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	60f8      	str	r0, [r7, #12]
 8000adc:	60b9      	str	r1, [r7, #8]
 8000ade:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	3b04      	subs	r3, #4
 8000ae4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8000aec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	3b04      	subs	r3, #4
 8000af2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	f023 0201 	bic.w	r2, r3, #1
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	3b04      	subs	r3, #4
 8000b02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8000b04:	4a08      	ldr	r2, [pc, #32]	; (8000b28 <pxPortInitialiseStack+0x54>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3b14      	subs	r3, #20
 8000b0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	3b20      	subs	r3, #32
 8000b1a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8000b1c:	68fb      	ldr	r3, [r7, #12]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3714      	adds	r7, #20
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	08000b2d 	.word	0x08000b2d

08000b2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000b36:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000b3a:	f383 8811 	msr	BASEPRI, r3
 8000b3e:	f3bf 8f6f 	isb	sy
 8000b42:	f3bf 8f4f 	dsb	sy
 8000b46:	607b      	str	r3, [r7, #4]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000b48:	bf00      	nop

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8000b4a:	bf00      	nop
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d0fc      	beq.n	8000b4c <prvTaskExitError+0x20>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8000b52:	bf00      	nop
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bc80      	pop	{r7}
 8000b5c:	4770      	bx	lr
	...

08000b60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000b60:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <pxCurrentTCBConst2>)
 8000b62:	6819      	ldr	r1, [r3, #0]
 8000b64:	6808      	ldr	r0, [r1, #0]
 8000b66:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000b6a:	f380 8809 	msr	PSP, r0
 8000b6e:	f3bf 8f6f 	isb	sy
 8000b72:	f04f 0000 	mov.w	r0, #0
 8000b76:	f380 8811 	msr	BASEPRI, r0
 8000b7a:	f04e 0e0d 	orr.w	lr, lr, #13
 8000b7e:	4770      	bx	lr

08000b80 <pxCurrentTCBConst2>:
 8000b80:	20000040 	.word	0x20000040
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000b84:	bf00      	nop
 8000b86:	bf00      	nop

08000b88 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8000b88:	4806      	ldr	r0, [pc, #24]	; (8000ba4 <prvPortStartFirstTask+0x1c>)
 8000b8a:	6800      	ldr	r0, [r0, #0]
 8000b8c:	6800      	ldr	r0, [r0, #0]
 8000b8e:	f380 8808 	msr	MSP, r0
 8000b92:	b662      	cpsie	i
 8000b94:	b661      	cpsie	f
 8000b96:	f3bf 8f4f 	dsb	sy
 8000b9a:	f3bf 8f6f 	isb	sy
 8000b9e:	df00      	svc	0
 8000ba0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8000ba2:	bf00      	nop
 8000ba4:	e000ed08 	.word	0xe000ed08

08000ba8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
		*pucFirstUserPriorityRegister = ulOriginalPriority;
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <xPortStartScheduler+0x38>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <xPortStartScheduler+0x38>)
 8000bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8000bb6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8000bb8:	4b09      	ldr	r3, [pc, #36]	; (8000be0 <xPortStartScheduler+0x38>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a08      	ldr	r2, [pc, #32]	; (8000be0 <xPortStartScheduler+0x38>)
 8000bbe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8000bc2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8000bc4:	f000 f88a 	bl	8000cdc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <xPortStartScheduler+0x3c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8000bce:	f7ff ffdb 	bl	8000b88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8000bd2:	f7ff fe89 	bl	80008e8 <vTaskSwitchContext>
	prvTaskExitError();
 8000bd6:	f7ff ffa9 	bl	8000b2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8000bda:	2300      	movs	r3, #0
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	e000ed20 	.word	0xe000ed20
 8000be4:	20000000 	.word	0x20000000

08000be8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
	__asm volatile
 8000bee:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000bf2:	f383 8811 	msr	BASEPRI, r3
 8000bf6:	f3bf 8f6f 	isb	sy
 8000bfa:	f3bf 8f4f 	dsb	sy
 8000bfe:	607b      	str	r3, [r7, #4]
}
 8000c00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <vPortEnterCritical+0x30>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3301      	adds	r3, #1
 8000c08:	4a03      	ldr	r2, [pc, #12]	; (8000c18 <vPortEnterCritical+0x30>)
 8000c0a:	6013      	str	r3, [r2, #0]
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
	}
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bc80      	pop	{r7}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	20000000 	.word	0x20000000

08000c1c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
	uxCriticalNesting--;
 8000c22:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <vPortExitCritical+0x30>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	3b01      	subs	r3, #1
 8000c28:	4a08      	ldr	r2, [pc, #32]	; (8000c4c <vPortExitCritical+0x30>)
 8000c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8000c2c:	4b07      	ldr	r3, [pc, #28]	; (8000c4c <vPortExitCritical+0x30>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d105      	bne.n	8000c40 <vPortExitCritical+0x24>
 8000c34:	2300      	movs	r3, #0
 8000c36:	607b      	str	r3, [r7, #4]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8000c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000000 	.word	0x20000000

08000c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8000c50:	f3ef 8009 	mrs	r0, PSP
 8000c54:	f3bf 8f6f 	isb	sy
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <pxCurrentTCBConst>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c60:	6010      	str	r0, [r2, #0]
 8000c62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8000c66:	f04f 00bf 	mov.w	r0, #191	; 0xbf
 8000c6a:	f380 8811 	msr	BASEPRI, r0
 8000c6e:	f7ff fe3b 	bl	80008e8 <vTaskSwitchContext>
 8000c72:	f04f 0000 	mov.w	r0, #0
 8000c76:	f380 8811 	msr	BASEPRI, r0
 8000c7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000c7e:	6819      	ldr	r1, [r3, #0]
 8000c80:	6808      	ldr	r0, [r1, #0]
 8000c82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000c86:	f380 8809 	msr	PSP, r0
 8000c8a:	f3bf 8f6f 	isb	sy
 8000c8e:	4770      	bx	lr

08000c90 <pxCurrentTCBConst>:
 8000c90:	20000040 	.word	0x20000040
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000c94:	bf00      	nop
 8000c96:	bf00      	nop

08000c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8000c9e:	f04f 03bf 	mov.w	r3, #191	; 0xbf
 8000ca2:	f383 8811 	msr	BASEPRI, r3
 8000ca6:	f3bf 8f6f 	isb	sy
 8000caa:	f3bf 8f4f 	dsb	sy
 8000cae:	607b      	str	r3, [r7, #4]
}
 8000cb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000cb2:	f7ff fd93 	bl	80007dc <xTaskIncrementTick>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d003      	beq.n	8000cc4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SysTick_Handler+0x40>)
 8000cbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	f383 8811 	msr	BASEPRI, r3
}
 8000cce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	e000ed04 	.word	0xe000ed04

08000cdc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8000ce0:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <vPortSetupTimerInterrupt+0x28>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <vPortSetupTimerInterrupt+0x2c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <vPortSetupTimerInterrupt+0x30>)
 8000cee:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000cf2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <vPortSetupTimerInterrupt+0x28>)
 8000cf6:	2207      	movs	r2, #7
 8000cf8:	601a      	str	r2, [r3, #0]
}
 8000cfa:	bf00      	nop
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bc80      	pop	{r7}
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000e010 	.word	0xe000e010
 8000d08:	e000e018 	.word	0xe000e018
 8000d0c:	e000e014 	.word	0xe000e014

08000d10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8000d1c:	f7ff fcd0 	bl	80006c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8000d20:	4b42      	ldr	r3, [pc, #264]	; (8000e2c <pvPortMalloc+0x11c>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8000d28:	f000 f8cc 	bl	8000ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8000d2c:	4b40      	ldr	r3, [pc, #256]	; (8000e30 <pvPortMalloc+0x120>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d172      	bne.n	8000e1e <pvPortMalloc+0x10e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d00d      	beq.n	8000d5a <pvPortMalloc+0x4a>
			{
				xWantedSize += xHeapStructSize;
 8000d3e:	2208      	movs	r2, #8
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	4413      	add	r3, r2
 8000d44:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f003 0307 	and.w	r3, r3, #7
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d004      	beq.n	8000d5a <pvPortMalloc+0x4a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	f023 0307 	bic.w	r3, r3, #7
 8000d56:	3308      	adds	r3, #8
 8000d58:	607b      	str	r3, [r7, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d05e      	beq.n	8000e1e <pvPortMalloc+0x10e>
 8000d60:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <pvPortMalloc+0x124>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d859      	bhi.n	8000e1e <pvPortMalloc+0x10e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8000d6a:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <pvPortMalloc+0x128>)
 8000d6c:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8000d6e:	4b32      	ldr	r3, [pc, #200]	; (8000e38 <pvPortMalloc+0x128>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d74:	e004      	b.n	8000d80 <pvPortMalloc+0x70>
				{
					pxPreviousBlock = pxBlock;
 8000d76:	697b      	ldr	r3, [r7, #20]
 8000d78:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	687a      	ldr	r2, [r7, #4]
 8000d86:	429a      	cmp	r2, r3
 8000d88:	d903      	bls.n	8000d92 <pvPortMalloc+0x82>
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d1f1      	bne.n	8000d76 <pvPortMalloc+0x66>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8000d92:	4b26      	ldr	r3, [pc, #152]	; (8000e2c <pvPortMalloc+0x11c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	697a      	ldr	r2, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	d040      	beq.n	8000e1e <pvPortMalloc+0x10e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2208      	movs	r2, #8
 8000da2:	4413      	add	r3, r2
 8000da4:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	685a      	ldr	r2, [r3, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	1ad2      	subs	r2, r2, r3
 8000db6:	2308      	movs	r3, #8
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	429a      	cmp	r2, r3
 8000dbc:	d90f      	bls.n	8000dde <pvPortMalloc+0xce>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	685a      	ldr	r2, [r3, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	1ad2      	subs	r2, r2, r3
 8000dce:	68bb      	ldr	r3, [r7, #8]
 8000dd0:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	687a      	ldr	r2, [r7, #4]
 8000dd6:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8000dd8:	68b8      	ldr	r0, [r7, #8]
 8000dda:	f000 f8d5 	bl	8000f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <pvPortMalloc+0x124>)
 8000de0:	681a      	ldr	r2, [r3, #0]
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <pvPortMalloc+0x124>)
 8000dea:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8000dec:	4b11      	ldr	r3, [pc, #68]	; (8000e34 <pvPortMalloc+0x124>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <pvPortMalloc+0x12c>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d203      	bcs.n	8000e00 <pvPortMalloc+0xf0>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8000df8:	4b0e      	ldr	r3, [pc, #56]	; (8000e34 <pvPortMalloc+0x124>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0f      	ldr	r2, [pc, #60]	; (8000e3c <pvPortMalloc+0x12c>)
 8000dfe:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <pvPortMalloc+0x120>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	431a      	orrs	r2, r3
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <pvPortMalloc+0x130>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <pvPortMalloc+0x130>)
 8000e1c:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8000e1e:	f7ff fc5d 	bl	80006dc <xTaskResumeAll>
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
	return pvReturn;
 8000e22:	68fb      	ldr	r3, [r7, #12]
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3718      	adds	r7, #24
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	2000454c 	.word	0x2000454c
 8000e30:	20004560 	.word	0x20004560
 8000e34:	20004550 	.word	0x20004550
 8000e38:	20004544 	.word	0x20004544
 8000e3c:	20004554 	.word	0x20004554
 8000e40:	20004558 	.word	0x20004558

08000e44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d02c      	beq.n	8000eb0 <vPortFree+0x6c>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8000e56:	2308      	movs	r3, #8
 8000e58:	425b      	negs	r3, r3
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
		configASSERT( pxLink->pxNextFreeBlock == NULL );

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <vPortFree+0x74>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d01e      	beq.n	8000eb0 <vPortFree+0x6c>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8000e72:	68bb      	ldr	r3, [r7, #8]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d11a      	bne.n	8000eb0 <vPortFree+0x6c>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	4b0e      	ldr	r3, [pc, #56]	; (8000eb8 <vPortFree+0x74>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	43db      	mvns	r3, r3
 8000e84:	401a      	ands	r2, r3
 8000e86:	68bb      	ldr	r3, [r7, #8]
 8000e88:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8000e8a:	f7ff fc19 	bl	80006c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	685a      	ldr	r2, [r3, #4]
 8000e92:	4b0a      	ldr	r3, [pc, #40]	; (8000ebc <vPortFree+0x78>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <vPortFree+0x78>)
 8000e9a:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8000e9c:	68b8      	ldr	r0, [r7, #8]
 8000e9e:	f000 f873 	bl	8000f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8000ea2:	4b07      	ldr	r3, [pc, #28]	; (8000ec0 <vPortFree+0x7c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	3301      	adds	r3, #1
 8000ea8:	4a05      	ldr	r2, [pc, #20]	; (8000ec0 <vPortFree+0x7c>)
 8000eaa:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8000eac:	f7ff fc16 	bl	80006dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20004560 	.word	0x20004560
 8000ebc:	20004550 	.word	0x20004550
 8000ec0:	2000455c 	.word	0x2000455c

08000ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8000eca:	f44f 4388 	mov.w	r3, #17408	; 0x4400
 8000ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <prvHeapInit+0xac>)
 8000ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00c      	beq.n	8000ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3307      	adds	r3, #7
 8000ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	f023 0307 	bic.w	r3, r3, #7
 8000eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8000eec:	68ba      	ldr	r2, [r7, #8]
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	4a1f      	ldr	r2, [pc, #124]	; (8000f70 <prvHeapInit+0xac>)
 8000ef4:	4413      	add	r3, r2
 8000ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8000efc:	4a1d      	ldr	r2, [pc, #116]	; (8000f74 <prvHeapInit+0xb0>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <prvHeapInit+0xb0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	4413      	add	r3, r2
 8000f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8000f10:	2208      	movs	r2, #8
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	1a9b      	subs	r3, r3, r2
 8000f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	f023 0307 	bic.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4a15      	ldr	r2, [pc, #84]	; (8000f78 <prvHeapInit+0xb4>)
 8000f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8000f26:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <prvHeapInit+0xb4>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8000f2e:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <prvHeapInit+0xb4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68fa      	ldr	r2, [r7, #12]
 8000f3e:	1ad2      	subs	r2, r2, r3
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <prvHeapInit+0xb4>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	4a0a      	ldr	r2, [pc, #40]	; (8000f7c <prvHeapInit+0xb8>)
 8000f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <prvHeapInit+0xbc>)
 8000f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8000f5c:	4b09      	ldr	r3, [pc, #36]	; (8000f84 <prvHeapInit+0xc0>)
 8000f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	bf00      	nop
 8000f66:	3714      	adds	r7, #20
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	20000144 	.word	0x20000144
 8000f74:	20004544 	.word	0x20004544
 8000f78:	2000454c 	.word	0x2000454c
 8000f7c:	20004554 	.word	0x20004554
 8000f80:	20004550 	.word	0x20004550
 8000f84:	20004560 	.word	0x20004560

08000f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8000f90:	4b27      	ldr	r3, [pc, #156]	; (8001030 <prvInsertBlockIntoFreeList+0xa8>)
 8000f92:	60fb      	str	r3, [r7, #12]
 8000f94:	e002      	b.n	8000f9c <prvInsertBlockIntoFreeList+0x14>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d8f7      	bhi.n	8000f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	687a      	ldr	r2, [r7, #4]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d108      	bne.n	8000fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	685a      	ldr	r2, [r3, #4]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	441a      	add	r2, r3
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	68ba      	ldr	r2, [r7, #8]
 8000fd4:	441a      	add	r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d118      	bne.n	8001010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <prvInsertBlockIntoFreeList+0xac>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d00d      	beq.n	8001006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	441a      	add	r2, r3
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	e008      	b.n	8001018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001006:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <prvInsertBlockIntoFreeList+0xac>)
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	e003      	b.n	8001018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	681a      	ldr	r2, [r3, #0]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	429a      	cmp	r2, r3
 800101e:	d002      	beq.n	8001026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001026:	bf00      	nop
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20004544 	.word	0x20004544
 8001034:	2000454c 	.word	0x2000454c

08001038 <IntToString>:
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}

u8* IntToString(s32 anInteger,u8 *str){
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
	u32 flag = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
 8001046:	2313      	movs	r3, #19
 8001048:	60bb      	str	r3, [r7, #8]
	str[i--] = '\0';
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	1e5a      	subs	r2, r3, #1
 800104e:	60ba      	str	r2, [r7, #8]
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	4413      	add	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	701a      	strb	r2, [r3, #0]
	if (anInteger < 0) {
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	da22      	bge.n	80010a4 <IntToString+0x6c>
		flag = 1;
 800105e:	2301      	movs	r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
		anInteger = -anInteger;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	425b      	negs	r3, r3
 8001066:	607b      	str	r3, [r7, #4]
	}
	while (anInteger != 0) {
 8001068:	e01c      	b.n	80010a4 <IntToString+0x6c>
		str[i--] = (anInteger % 10) + '0';
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <IntToString+0x9c>)
 800106e:	fb83 1302 	smull	r1, r3, r3, r2
 8001072:	1099      	asrs	r1, r3, #2
 8001074:	17d3      	asrs	r3, r2, #31
 8001076:	1ac9      	subs	r1, r1, r3
 8001078:	460b      	mov	r3, r1
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	440b      	add	r3, r1
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	1ad1      	subs	r1, r2, r3
 8001082:	b2ca      	uxtb	r2, r1
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1e59      	subs	r1, r3, #1
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	6839      	ldr	r1, [r7, #0]
 800108c:	440b      	add	r3, r1
 800108e:	3230      	adds	r2, #48	; 0x30
 8001090:	b2d2      	uxtb	r2, r2
 8001092:	701a      	strb	r2, [r3, #0]
		anInteger /= 10;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	4a0f      	ldr	r2, [pc, #60]	; (80010d4 <IntToString+0x9c>)
 8001098:	fb82 1203 	smull	r1, r2, r2, r3
 800109c:	1092      	asrs	r2, r2, #2
 800109e:	17db      	asrs	r3, r3, #31
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	607b      	str	r3, [r7, #4]
	while (anInteger != 0) {
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1df      	bne.n	800106a <IntToString+0x32>
	}
	if (flag){
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <IntToString+0x86>
		str[i--] = '-';
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1e5a      	subs	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	4413      	add	r3, r2
 80010ba:	222d      	movs	r2, #45	; 0x2d
 80010bc:	701a      	strb	r2, [r3, #0]
	}
	i++;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3301      	adds	r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
	return str + i;
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	4413      	add	r3, r2

}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	66666667 	.word	0x66666667

080010d8 <CAN_voidInit>:
														&CAN_TxMailbox1AbortCallback,
														&CAN_TxMailbox2AbortCallback};


void CAN_voidInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
    //GPIO_voidSetPinMode(GPIO_A, PIN11, GPIO_INPUT_FLOAT); 			//RX
    //GPIO_voidSetPinMode(GPIO_A, PIN12, GPIO_OUTPUT_10MHz_AF_PP); 		//TX

    /**  exit CAN sleep mode **/
    /* CLEAR SLEEP bit (SLEEP) */
    CLR_BIT(CAN->MCR,1);
 80010dc:	4b27      	ldr	r3, [pc, #156]	; (800117c <CAN_voidInit+0xa4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a26      	ldr	r2, [pc, #152]	; (800117c <CAN_voidInit+0xa4>)
 80010e2:	f023 0302 	bic.w	r3, r3, #2
 80010e6:	6013      	str	r3, [r2, #0]

    /* wait to exit sleep mode */
    while (!(GET_BIT(CAN->MSR,1) == 0));
 80010e8:	bf00      	nop
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <CAN_voidInit+0xa4>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	f003 0302 	and.w	r3, r3, #2
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d1f9      	bne.n	80010ea <CAN_voidInit+0x12>

    /**  Set CAN Initialization mode **/
    /* SET Initialization request BIT (INRQ) */
    SET_BIT(CAN->MCR,0);
 80010f6:	4b21      	ldr	r3, [pc, #132]	; (800117c <CAN_voidInit+0xa4>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a20      	ldr	r2, [pc, #128]	; (800117c <CAN_voidInit+0xa4>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6013      	str	r3, [r2, #0]

    /* wait to enter in Initialization mode */
    while( !(GET_BIT(CAN->MSR, 0) == 1) );
 8001102:	bf00      	nop
 8001104:	4b1d      	ldr	r3, [pc, #116]	; (800117c <CAN_voidInit+0xa4>)
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	f003 0301 	and.w	r3, r3, #1
 800110c:	2b01      	cmp	r3, #1
 800110e:	d1f9      	bne.n	8001104 <CAN_voidInit+0x2c>
#if TransmitFifoPriority == ENABLE
     /* by the request order */
        SET_BIT(CAN->MCR,2); //TXFP
#else
     /* by the identifier of the message */
        CLR_BIT(CAN->MCR,2); //TXFP
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <CAN_voidInit+0xa4>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a19      	ldr	r2, [pc, #100]	; (800117c <CAN_voidInit+0xa4>)
 8001116:	f023 0304 	bic.w	r3, r3, #4
 800111a:	6013      	str	r3, [r2, #0]
         Once a receive FIFO is full the next incoming message will be discarded. */
        SET_BIT(CAN->MCR,3); //RFLM
#else
     /* Receive FIFO not locked on overrun.
         Once a receive FIFO is full the next incoming message will overwrite the previous one. */
        CLR_BIT(CAN->MCR,3); //RFLM
 800111c:	4b17      	ldr	r3, [pc, #92]	; (800117c <CAN_voidInit+0xa4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a16      	ldr	r2, [pc, #88]	; (800117c <CAN_voidInit+0xa4>)
 8001122:	f023 0308 	bic.w	r3, r3, #8
 8001126:	6013      	str	r3, [r2, #0]
#endif
    /** CHECK automatic retransmission **/
#if AutoRetransmission == ENABLE
        CLR_BIT(CAN->MCR,4); //NART
 8001128:	4b14      	ldr	r3, [pc, #80]	; (800117c <CAN_voidInit+0xa4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a13      	ldr	r2, [pc, #76]	; (800117c <CAN_voidInit+0xa4>)
 800112e:	f023 0310 	bic.w	r3, r3, #16
 8001132:	6013      	str	r3, [r2, #0]
        SET_BIT(CAN->MCR,4); //NART
#endif

    /** CHECK automatic wakeup mode **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,5); //AWUM
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <CAN_voidInit+0xa4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a10      	ldr	r2, [pc, #64]	; (800117c <CAN_voidInit+0xa4>)
 800113a:	f043 0320 	orr.w	r3, r3, #32
 800113e:	6013      	str	r3, [r2, #0]
       CLR_BIT(CAN->MCR,5); //AWUM
#endif

    /** CHECK automatic bus-off management **/
#if AutoBussOff == ENABLE
        SET_BIT(CAN->MCR,6); //ABOM
 8001140:	4b0e      	ldr	r3, [pc, #56]	; (800117c <CAN_voidInit+0xa4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <CAN_voidInit+0xa4>)
 8001146:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800114a:	6013      	str	r3, [r2, #0]

    /** CHECK Time triggered communication mode **/
#if TimeTriggeredMode == ENABLE
        SET_BIT(CAN->MCR,7); //TTCM
#else
        CLR_BIT(CAN->MCR,7); //TTCM
 800114c:	4b0b      	ldr	r3, [pc, #44]	; (800117c <CAN_voidInit+0xa4>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0a      	ldr	r2, [pc, #40]	; (800117c <CAN_voidInit+0xa4>)
 8001152:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001156:	6013      	str	r3, [r2, #0]
#endif


     /** Set the bit timing register **/
  WRITE_REG(CAN->BTR, (u32) (MODE |
 8001158:	2302      	movs	r3, #2
 800115a:	3b01      	subs	r3, #1
 800115c:	051b      	lsls	r3, r3, #20
 800115e:	461a      	mov	r2, r3
 8001160:	230f      	movs	r3, #15
 8001162:	3b01      	subs	r3, #1
 8001164:	041b      	lsls	r3, r3, #16
 8001166:	4313      	orrs	r3, r2
 8001168:	2204      	movs	r2, #4
 800116a:	3a01      	subs	r2, #1
 800116c:	4611      	mov	r1, r2
 800116e:	4a03      	ldr	r2, [pc, #12]	; (800117c <CAN_voidInit+0xa4>)
 8001170:	430b      	orrs	r3, r1
 8001172:	61d3      	str	r3, [r2, #28]
		  ((CAN_bitRateConfig[BOUDRATE].TS2-1) << 20) |
		  ((CAN_bitRateConfig[BOUDRATE].TS1-1) << 16) |
		  (CAN_bitRateConfig[BOUDRATE].BRP-1)));
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	bc80      	pop	{r7}
 800117a:	4770      	bx	lr
 800117c:	40006400 	.word	0x40006400

08001180 <CAN_voidAddTxMsg>:


void CAN_voidAddTxMsg( CAN_TxHeaderTypeDef *pTxHeader, u8 Local_u8Data[])
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	6039      	str	r1, [r7, #0]
	u32 local_u8TransmitMailbox; // which mailbox is empty to set Local_u8Data in it (read CODE bit in TSR register)
	u32 local_u32TSR; //transmit status register
	local_u32TSR = READ_REG(CAN->TSR);
 800118a:	4b54      	ldr	r3, [pc, #336]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	60fb      	str	r3, [r7, #12]
	 /* Check that all the Tx mailboxes are not full */
	while(1)
	{
		if ( (GET_BIT(local_u32TSR, 26) != 0x0) || /* TME0 */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <CAN_voidAddTxMsg+0x2e>
			 (GET_BIT (local_u32TSR,27) != 0x0) || /* TME1 */
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
		if ( (GET_BIT(local_u32TSR, 26) != 0x0) || /* TME0 */
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d104      	bne.n	80011ae <CAN_voidAddTxMsg+0x2e>
			 (GET_BIT(local_u32TSR,28) != 0x0) )  /* TME2 */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
			 (GET_BIT (local_u32TSR,27) != 0x0) || /* TME1 */
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <CAN_voidAddTxMsg+0x10>
		{
			/* Select an empty transmit mailbox */
			local_u8TransmitMailbox = ((local_u32TSR >> 24) & 0x3); //(read CODE[1:0] bit in TSR register)
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	0e1b      	lsrs	r3, r3, #24
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	60bb      	str	r3, [r7, #8]
			 /* Check transmit mailbox value */
			if (local_u8TransmitMailbox <=2)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	2b02      	cmp	r3, #2
 80011bc:	f200 8087 	bhi.w	80012ce <CAN_voidAddTxMsg+0x14e>
			{
				/* Set up the Id */
				  if (pTxHeader->IDE == CAN_ID_STD)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10c      	bne.n	80011e2 <CAN_voidAddTxMsg+0x62>
				  {
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId << 21) |
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	055a      	lsls	r2, r3, #21
															pTxHeader->RTR);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->StdId << 21) |
 80011d2:	4942      	ldr	r1, [pc, #264]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 80011d4:	431a      	orrs	r2, r3
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3318      	adds	r3, #24
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	440b      	add	r3, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e00e      	b.n	8001200 <CAN_voidAddTxMsg+0x80>
				  }
				  else
				  {
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	00da      	lsls	r2, r3, #3
																		pTxHeader->IDE | pTxHeader->RTR);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	689b      	ldr	r3, [r3, #8]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 80011ec:	431a      	orrs	r2, r3
																		pTxHeader->IDE | pTxHeader->RTR);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	68db      	ldr	r3, [r3, #12]
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 80011f2:	493a      	ldr	r1, [pc, #232]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
																		pTxHeader->IDE | pTxHeader->RTR);
 80011f4:	431a      	orrs	r2, r3
					CAN->TxMailBox[local_u8TransmitMailbox].TIR = ((pTxHeader->ExtId << 3) |
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	3318      	adds	r3, #24
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	440b      	add	r3, r1
 80011fe:	601a      	str	r2, [r3, #0]
				  }

				  /* Set up the DLC */
				  CAN->TxMailBox[local_u8TransmitMailbox].TDTR = (pTxHeader->DLC);
 8001200:	4936      	ldr	r1, [pc, #216]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	3318      	adds	r3, #24
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	440b      	add	r3, r1
 800120e:	3304      	adds	r3, #4
 8001210:	601a      	str	r2, [r3, #0]
				  /* Set up the Transmit Global Time mode */
				  if (pTxHeader->TransmitGlobalTime == ENABLE)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	7d1b      	ldrb	r3, [r3, #20]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d10f      	bne.n	800123a <CAN_voidAddTxMsg+0xba>
				  {
					  SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TDTR, 8);
 800121a:	4a30      	ldr	r2, [pc, #192]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	3318      	adds	r3, #24
 8001220:	011b      	lsls	r3, r3, #4
 8001222:	4413      	add	r3, r2
 8001224:	3304      	adds	r3, #4
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	492c      	ldr	r1, [pc, #176]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 800122a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	3318      	adds	r3, #24
 8001232:	011b      	lsls	r3, r3, #4
 8001234:	440b      	add	r3, r1
 8001236:	3304      	adds	r3, #4
 8001238:	601a      	str	r2, [r3, #0]
				  }
				  /* Set up the Local_u8Data field */
				WRITE_REG(CAN->TxMailBox[local_u8TransmitMailbox].TDHR,
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	3307      	adds	r3, #7
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	061a      	lsls	r2, r3, #24
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	3306      	adds	r3, #6
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	041b      	lsls	r3, r3, #16
 800124a:	431a      	orrs	r2, r3
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	3305      	adds	r3, #5
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	4313      	orrs	r3, r2
 8001256:	683a      	ldr	r2, [r7, #0]
 8001258:	3204      	adds	r2, #4
 800125a:	7812      	ldrb	r2, [r2, #0]
 800125c:	491f      	ldr	r1, [pc, #124]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 800125e:	431a      	orrs	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	440b      	add	r3, r1
 8001266:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800126a:	601a      	str	r2, [r3, #0]
							  ((u32)Local_u8Data[7] << 24) |
							  ((u32)Local_u8Data[6] << 16) |
							  ((u32)Local_u8Data[5] << 8 ) |
							  ((u32)Local_u8Data[4]));
				WRITE_REG(CAN->TxMailBox[local_u8TransmitMailbox].TDLR,
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	3303      	adds	r3, #3
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	061a      	lsls	r2, r3, #24
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	3302      	adds	r3, #2
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	041b      	lsls	r3, r3, #16
 800127c:	431a      	orrs	r2, r3
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	4313      	orrs	r3, r2
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	7812      	ldrb	r2, [r2, #0]
 800128c:	4913      	ldr	r1, [pc, #76]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 800128e:	431a      	orrs	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	011b      	lsls	r3, r3, #4
 8001294:	440b      	add	r3, r1
 8001296:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800129a:	601a      	str	r2, [r3, #0]
							  ((u32)Local_u8Data[3] << 24) |
							  ((u32)Local_u8Data[2] << 16) |
							  ((u32)Local_u8Data[1] << 8 ) |
							  ((u32)Local_u8Data[0]));
				/* Request transmission */
				SET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TIR, 0);
 800129c:	4a0f      	ldr	r2, [pc, #60]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 800129e:	68bb      	ldr	r3, [r7, #8]
 80012a0:	3318      	adds	r3, #24
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	4413      	add	r3, r2
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	490c      	ldr	r1, [pc, #48]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 80012aa:	f043 0201 	orr.w	r2, r3, #1
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	3318      	adds	r3, #24
 80012b2:	011b      	lsls	r3, r3, #4
 80012b4:	440b      	add	r3, r1
 80012b6:	601a      	str	r2, [r3, #0]

				// clear by hardware when mailbox empty
				while(GET_BIT(CAN->TxMailBox[local_u8TransmitMailbox].TIR, 0) == 1);
 80012b8:	bf00      	nop
 80012ba:	4a08      	ldr	r2, [pc, #32]	; (80012dc <CAN_voidAddTxMsg+0x15c>)
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	3318      	adds	r3, #24
 80012c0:	011b      	lsls	r3, r3, #4
 80012c2:	4413      	add	r3, r2
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d0f5      	beq.n	80012ba <CAN_voidAddTxMsg+0x13a>
			}
			break;
 80012ce:	bf00      	nop
		}
	}
}
 80012d0:	bf00      	nop
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
 80012da:	bf00      	nop
 80012dc:	40006400 	.word	0x40006400

080012e0 <CAN_voidStart>:


void CAN_voidStart(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
	/* CLEAR Initialization request BIT (INRQ) */
	CLR_BIT(CAN->MCR,0);
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <CAN_voidStart+0x28>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a07      	ldr	r2, [pc, #28]	; (8001308 <CAN_voidStart+0x28>)
 80012ea:	f023 0301 	bic.w	r3, r3, #1
 80012ee:	6013      	str	r3, [r2, #0]
	/* wait to enter in Initialization mode */
	while(!(GET_BIT(CAN->MSR,0) == 0));
 80012f0:	bf00      	nop
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <CAN_voidStart+0x28>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1f9      	bne.n	80012f2 <CAN_voidStart+0x12>
}
 80012fe:	bf00      	nop
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr
 8001308:	40006400 	.word	0x40006400

0800130c <CAN_voidGetRxMsg>:


void CAN_voidGetRxMsg(u32 local_u8RxFifo, CAN_RxHeaderTypeDef *pRxHeader, u8 Local_u8Data[])
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
    /* Get Identifier extension */
	pRxHeader->IDE =  GET_BIT(CAN->FIFOMailBox[local_u8RxFifo].RIR,2);
 8001318:	4a50      	ldr	r2, [pc, #320]	; (800145c <CAN_voidGetRxMsg+0x150>)
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	331b      	adds	r3, #27
 800131e:	011b      	lsls	r3, r3, #4
 8001320:	4413      	add	r3, r2
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	089b      	lsrs	r3, r3, #2
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	68bb      	ldr	r3, [r7, #8]
 800132c:	609a      	str	r2, [r3, #8]
    if (pRxHeader->IDE == CAN_ID_STD)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d109      	bne.n	800134a <CAN_voidGetRxMsg+0x3e>
    {/* GET the Id */
      pRxHeader->StdId = CAN->FIFOMailBox[local_u8RxFifo].RIR >> 21;
 8001336:	4a49      	ldr	r2, [pc, #292]	; (800145c <CAN_voidGetRxMsg+0x150>)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	331b      	adds	r3, #27
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4413      	add	r3, r2
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	0d5a      	lsrs	r2, r3, #21
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	e008      	b.n	800135c <CAN_voidGetRxMsg+0x50>
    }
    else
    {
      pRxHeader->ExtId = CAN->FIFOMailBox[local_u8RxFifo].RIR >> 3;
 800134a:	4a44      	ldr	r2, [pc, #272]	; (800145c <CAN_voidGetRxMsg+0x150>)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	331b      	adds	r3, #27
 8001350:	011b      	lsls	r3, r3, #4
 8001352:	4413      	add	r3, r2
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	08da      	lsrs	r2, r3, #3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	605a      	str	r2, [r3, #4]
    }
    /* GET the RTR */
    pRxHeader->RTR = GET_BIT(CAN->FIFOMailBox[local_u8RxFifo].RIR,1);
 800135c:	4a3f      	ldr	r2, [pc, #252]	; (800145c <CAN_voidGetRxMsg+0x150>)
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	331b      	adds	r3, #27
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	4413      	add	r3, r2
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	085b      	lsrs	r3, r3, #1
 800136a:	f003 0201 	and.w	r2, r3, #1
 800136e:	68bb      	ldr	r3, [r7, #8]
 8001370:	60da      	str	r2, [r3, #12]
    /* GET the DLC */
    pRxHeader->DLC = (CAN->FIFOMailBox[local_u8RxFifo].RDTR & 0xF);
 8001372:	4a3a      	ldr	r2, [pc, #232]	; (800145c <CAN_voidGetRxMsg+0x150>)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	331b      	adds	r3, #27
 8001378:	011b      	lsls	r3, r3, #4
 800137a:	4413      	add	r3, r2
 800137c:	3304      	adds	r3, #4
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 020f 	and.w	r2, r3, #15
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	611a      	str	r2, [r3, #16]
    /* GET the (FMI) Filter Match Index */
    pRxHeader->FilterMatchIndex = (CAN->FIFOMailBox[local_u8RxFifo].RDTR >> 8) & 0xFF;
 8001388:	4a34      	ldr	r2, [pc, #208]	; (800145c <CAN_voidGetRxMsg+0x150>)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	331b      	adds	r3, #27
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	4413      	add	r3, r2
 8001392:	3304      	adds	r3, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	0a1b      	lsrs	r3, r3, #8
 8001398:	b2da      	uxtb	r2, r3
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	619a      	str	r2, [r3, #24]
    /* GET the Time stamp */
    pRxHeader->TimeStamp = (CAN->FIFOMailBox[local_u8RxFifo].RDTR >> 16) & 0XFFFF;
 800139e:	4a2f      	ldr	r2, [pc, #188]	; (800145c <CAN_voidGetRxMsg+0x150>)
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	331b      	adds	r3, #27
 80013a4:	011b      	lsls	r3, r3, #4
 80013a6:	4413      	add	r3, r2
 80013a8:	3304      	adds	r3, #4
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	0c1b      	lsrs	r3, r3, #16
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	615a      	str	r2, [r3, #20]
    Local_u8Data[4] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR 	  ) & 0XFF);
    Local_u8Data[5] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 8 ) & 0XFF);
    Local_u8Data[6] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 16) & 0XFF);
    Local_u8Data[7] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR >> 24) & 0XFF);
		#else
		for(u8 i=0 ; i < 8 ; i++)
 80013b4:	2300      	movs	r3, #0
 80013b6:	75fb      	strb	r3, [r7, #23]
 80013b8:	e007      	b.n	80013ca <CAN_voidGetRxMsg+0xbe>
		{/*clear buff*/
			Local_u8Data[i] = 0;
 80013ba:	7dfb      	ldrb	r3, [r7, #23]
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	4413      	add	r3, r2
 80013c0:	2200      	movs	r2, #0
 80013c2:	701a      	strb	r2, [r3, #0]
		for(u8 i=0 ; i < 8 ; i++)
 80013c4:	7dfb      	ldrb	r3, [r7, #23]
 80013c6:	3301      	adds	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
 80013ca:	7dfb      	ldrb	r3, [r7, #23]
 80013cc:	2b07      	cmp	r3, #7
 80013ce:	d9f4      	bls.n	80013ba <CAN_voidGetRxMsg+0xae>
		}
		for(u8 i=0 ; i < pRxHeader->DLC ; i++)
 80013d0:	2300      	movs	r3, #0
 80013d2:	75bb      	strb	r3, [r7, #22]
 80013d4:	e027      	b.n	8001426 <CAN_voidGetRxMsg+0x11a>
		{
			if (i<4)
 80013d6:	7dbb      	ldrb	r3, [r7, #22]
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d810      	bhi.n	80013fe <CAN_voidGetRxMsg+0xf2>
				Local_u8Data[i] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDLR >>(i*8) ) & 0XFF);
 80013dc:	4a1f      	ldr	r2, [pc, #124]	; (800145c <CAN_voidGetRxMsg+0x150>)
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	011b      	lsls	r3, r3, #4
 80013e2:	4413      	add	r3, r2
 80013e4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	7dbb      	ldrb	r3, [r7, #22]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	fa22 f103 	lsr.w	r1, r2, r3
 80013f2:	7dbb      	ldrb	r3, [r7, #22]
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	701a      	strb	r2, [r3, #0]
 80013fc:	e010      	b.n	8001420 <CAN_voidGetRxMsg+0x114>
			else
				Local_u8Data[i] = (u8)((CAN->FIFOMailBox[local_u8RxFifo].RDHR 	>>((i-4)*8)  ) & 0XFF);
 80013fe:	4a17      	ldr	r2, [pc, #92]	; (800145c <CAN_voidGetRxMsg+0x150>)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	011b      	lsls	r3, r3, #4
 8001404:	4413      	add	r3, r2
 8001406:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	7dbb      	ldrb	r3, [r7, #22]
 800140e:	3b04      	subs	r3, #4
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	fa22 f103 	lsr.w	r1, r2, r3
 8001416:	7dbb      	ldrb	r3, [r7, #22]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	4413      	add	r3, r2
 800141c:	b2ca      	uxtb	r2, r1
 800141e:	701a      	strb	r2, [r3, #0]
		for(u8 i=0 ; i < pRxHeader->DLC ; i++)
 8001420:	7dbb      	ldrb	r3, [r7, #22]
 8001422:	3301      	adds	r3, #1
 8001424:	75bb      	strb	r3, [r7, #22]
 8001426:	7dba      	ldrb	r2, [r7, #22]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	691b      	ldr	r3, [r3, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d3d2      	bcc.n	80013d6 <CAN_voidGetRxMsg+0xca>
		}
		
		#endif
    /* Release the FIFO */
    if (local_u8RxFifo == CAN_RX_FIFO0)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d106      	bne.n	8001444 <CAN_voidGetRxMsg+0x138>
    {
      /* Release RX FIFO 0 */
      SET_BIT(CAN->RF0R, 5);
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <CAN_voidGetRxMsg+0x150>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <CAN_voidGetRxMsg+0x150>)
 800143c:	f043 0320 	orr.w	r3, r3, #32
 8001440:	60d3      	str	r3, [r2, #12]
    else
    {
      /* Release RX FIFO 1 */
      SET_BIT(CAN->RF1R, 5);
    }
}
 8001442:	e005      	b.n	8001450 <CAN_voidGetRxMsg+0x144>
      SET_BIT(CAN->RF1R, 5);
 8001444:	4b05      	ldr	r3, [pc, #20]	; (800145c <CAN_voidGetRxMsg+0x150>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <CAN_voidGetRxMsg+0x150>)
 800144a:	f043 0320 	orr.w	r3, r3, #32
 800144e:	6113      	str	r3, [r2, #16]
}
 8001450:	bf00      	nop
 8001452:	371c      	adds	r7, #28
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40006400 	.word	0x40006400

08001460 <CAN_voidRXPending>:
/** CAN RX Pending **/
u8 CAN_voidRXPending(u8 local_u8RxFifo)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	71fb      	strb	r3, [r7, #7]
	/* return the Rx FIFO  message pending */
	if (local_u8RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d106      	bne.n	800147e <CAN_voidRXPending+0x1e>
	{
		/* return value of the Rx FIFO 0  */
	 return (CAN->RF0R & 0X3);
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <CAN_voidRXPending+0x34>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	f003 0303 	and.w	r3, r3, #3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	e005      	b.n	800148a <CAN_voidRXPending+0x2a>

	}
	else /* Rx element is assigned to Rx FIFO 1 */
	{
		/* return value of the Rx FIFO 1  */
		return (CAN->RF1R & 0X3);
 800147e:	4b05      	ldr	r3, [pc, #20]	; (8001494 <CAN_voidRXPending+0x34>)
 8001480:	691b      	ldr	r3, [r3, #16]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	b2db      	uxtb	r3, r3
	}
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr
 8001494:	40006400 	.word	0x40006400

08001498 <CAN_voidConfigFilter>:
/** CAN CONFIG filter **/
void CAN_voidConfigFilter( CAN_FilterTypeDef *pFilterConfig)
{
 8001498:	b480      	push	{r7}
 800149a:	b085      	sub	sp, #20
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	/* Initialization mode for the filter */
	SET_BIT(CAN->FMR, 0);
 80014a0:	4b64      	ldr	r3, [pc, #400]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80014a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014a6:	4a63      	ldr	r2, [pc, #396]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	/* Convert filter number into bit position */
	u32 local_u32FilterBitPos = pFilterConfig->FilterBank ;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	60fb      	str	r3, [r7, #12]

	/* Filter Deactivation */
	CLR_BIT(CAN->FA1R, pFilterConfig->FilterBank);
 80014b6:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80014b8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	6952      	ldr	r2, [r2, #20]
 80014c0:	2101      	movs	r1, #1
 80014c2:	fa01 f202 	lsl.w	r2, r1, r2
 80014c6:	43d2      	mvns	r2, r2
 80014c8:	4611      	mov	r1, r2
 80014ca:	4a5a      	ldr	r2, [pc, #360]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80014cc:	400b      	ands	r3, r1
 80014ce:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/* Filter Scale */
	if (pFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d128      	bne.n	800152c <CAN_voidConfigFilter+0x94>
	{
	  /* 16-bit scale for the filter */
	  CLR_BIT(CAN->FS1R, local_u32FilterBitPos);
 80014da:	4b56      	ldr	r3, [pc, #344]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80014dc:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80014e0:	2101      	movs	r1, #1
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	fa01 f202 	lsl.w	r2, r1, r2
 80014e8:	43d2      	mvns	r2, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	4a51      	ldr	r2, [pc, #324]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80014ee:	400b      	ands	r3, r1
 80014f0:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
	     * */

	  /* First 16-bit identifier and First 16-bit mask */
	  /* Or First 16-bit identifier and Second 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	0419      	lsls	r1, r3, #16
									  (pFilterConfig->FilterIdLow	   & 0x0000FFFF) );
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8001500:	484c      	ldr	r0, [pc, #304]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  ((pFilterConfig->FilterMaskIdLow & 0x0000FFFF) << 16) |
 8001506:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8001508:	3348      	adds	r3, #72	; 0x48
 800150a:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* Second 16-bit identifier and Second 16-bit mask */
	  /* Or Third 16-bit identifier and Fourth 16-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	0419      	lsls	r1, r3, #16
			  									  (pFilterConfig->FilterIdHigh 	   & 0x0000FFFF) );
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 800151a:	4846      	ldr	r0, [pc, #280]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
			  	  	  	  	  	  	  	  	  	 ((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8001520:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8001522:	3348      	adds	r3, #72	; 0x48
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4403      	add	r3, r0
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	e02a      	b.n	8001582 <CAN_voidConfigFilter+0xea>
	}

	else if (pFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d126      	bne.n	8001582 <CAN_voidConfigFilter+0xea>
	{
	  /* 32-bit scale for the filter */
	  SET_BIT(CAN->FS1R, local_u32FilterBitPos);
 8001534:	4b3f      	ldr	r3, [pc, #252]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 8001536:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 800153a:	2101      	movs	r1, #1
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	fa01 f202 	lsl.w	r2, r1, r2
 8001542:	4611      	mov	r1, r2
 8001544:	4a3b      	ldr	r2, [pc, #236]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 8001546:	430b      	orrs	r3, r1
 8001548:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c
		 * STID[10:3] STID[2:0] EXID[17:13] EXID[12:5] EXID[4:0] IDE RTR 0
		 * */

	  /* 32-bit identifier or First 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	0419      	lsls	r1, r3, #16
											 (pFilterConfig->FilterIdLow  & 0x0000FFFF));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8001558:	4836      	ldr	r0, [pc, #216]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	695b      	ldr	r3, [r3, #20]
											((pFilterConfig->FilterIdHigh & 0x0000FFFF) << 16) |
 800155e:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR1 =(
 8001560:	3348      	adds	r3, #72	; 0x48
 8001562:	f840 2033 	str.w	r2, [r0, r3, lsl #3]

	  /* 32-bit mask or Second 32-bit identifier */
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	0419      	lsls	r1, r3, #16
												 (pFilterConfig->FilterMaskIdLow & 0x0000FFFF));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	b29a      	uxth	r2, r3
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 8001572:	4830      	ldr	r0, [pc, #192]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
												((pFilterConfig->FilterMaskIdHigh & 0x0000FFFF) << 16) |
 8001578:	430a      	orrs	r2, r1
	  CAN->FilterBankRegister[pFilterConfig->FilterBank].FR2 =(
 800157a:	3348      	adds	r3, #72	; 0x48
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4403      	add	r3, r0
 8001580:	605a      	str	r2, [r3, #4]
	}

	/* Filter Mode */
	if (pFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d10d      	bne.n	80015a6 <CAN_voidConfigFilter+0x10e>
	{
	  /* Id/Mask mode for the filter*/
	  CLR_BIT(CAN->FM1R, local_u32FilterBitPos);
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 800158c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001590:	2101      	movs	r1, #1
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	fa01 f202 	lsl.w	r2, r1, r2
 8001598:	43d2      	mvns	r2, r2
 800159a:	4611      	mov	r1, r2
 800159c:	4a25      	ldr	r2, [pc, #148]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 800159e:	400b      	ands	r3, r1
 80015a0:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 80015a4:	e00b      	b.n	80015be <CAN_voidConfigFilter+0x126>
	}
	else
	{
	  /* Identifier list mode for the filter*/
	  SET_BIT(CAN->FM1R, local_u32FilterBitPos);
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80015a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015ac:	2101      	movs	r1, #1
 80015ae:	68fa      	ldr	r2, [r7, #12]
 80015b0:	fa01 f202 	lsl.w	r2, r1, r2
 80015b4:	4611      	mov	r1, r2
 80015b6:	4a1f      	ldr	r2, [pc, #124]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80015b8:	430b      	orrs	r3, r1
 80015ba:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
	}

	/* Filter FIFO assignment */
	if (pFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	691b      	ldr	r3, [r3, #16]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10d      	bne.n	80015e2 <CAN_voidConfigFilter+0x14a>
	{
	  /* FIFO 0 assignation for the filter */
	  CLR_BIT(CAN->FFA1R, local_u32FilterBitPos);
 80015c6:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80015c8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80015cc:	2101      	movs	r1, #1
 80015ce:	68fa      	ldr	r2, [r7, #12]
 80015d0:	fa01 f202 	lsl.w	r2, r1, r2
 80015d4:	43d2      	mvns	r2, r2
 80015d6:	4611      	mov	r1, r2
 80015d8:	4a16      	ldr	r2, [pc, #88]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80015da:	400b      	ands	r3, r1
 80015dc:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 80015e0:	e00b      	b.n	80015fa <CAN_voidConfigFilter+0x162>
	}
	else
	{
	  /* FIFO 1 assignation for the filter */
	  SET_BIT(CAN->FFA1R, local_u32FilterBitPos);
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80015e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80015e8:	2101      	movs	r1, #1
 80015ea:	68fa      	ldr	r2, [r7, #12]
 80015ec:	fa01 f202 	lsl.w	r2, r1, r2
 80015f0:	4611      	mov	r1, r2
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 80015f4:	430b      	orrs	r3, r1
 80015f6:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
	}

	/* Filter activation */
	if (pFilterConfig->FilterActivation == ENABLE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d10b      	bne.n	800161a <CAN_voidConfigFilter+0x182>
	{
	  SET_BIT(CAN->FA1R, local_u32FilterBitPos);
 8001602:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 8001604:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8001608:	2101      	movs	r1, #1
 800160a:	68fa      	ldr	r2, [r7, #12]
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	4611      	mov	r1, r2
 8001612:	4a08      	ldr	r2, [pc, #32]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 8001614:	430b      	orrs	r3, r1
 8001616:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c
	}

	/* Leave the initialisation mode for the filter */
	CLR_BIT(CAN->FMR, 0);
 800161a:	4b06      	ldr	r3, [pc, #24]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 800161c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001620:	4a04      	ldr	r2, [pc, #16]	; (8001634 <CAN_voidConfigFilter+0x19c>)
 8001622:	f023 0301 	bic.w	r3, r3, #1
 8001626:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	bc80      	pop	{r7}
 8001632:	4770      	bx	lr
 8001634:	40006400 	.word	0x40006400

08001638 <GPIO_voidSetPinMode>:
#include "MCAL/GPIO/GPIO_Register.h"
#include "MCAL/GPIO/GPIO_Config.h"
#include "MCAL/GPIO/GPIO_Interface.h"

void GPIO_voidSetPinMode(u8 Copy_u8PORT, u8 Copy_u8Pin, u8 Copy_u8Mode)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	71fb      	strb	r3, [r7, #7]
 8001642:	460b      	mov	r3, r1
 8001644:	71bb      	strb	r3, [r7, #6]
 8001646:	4613      	mov	r3, r2
 8001648:	717b      	strb	r3, [r7, #5]
	if (Copy_u8Pin < 16)
 800164a:	79bb      	ldrb	r3, [r7, #6]
 800164c:	2b0f      	cmp	r3, #15
 800164e:	f200 80a2 	bhi.w	8001796 <GPIO_voidSetPinMode+0x15e>
	{
		switch (Copy_u8PORT)
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d079      	beq.n	800174c <GPIO_voidSetPinMode+0x114>
 8001658:	2b02      	cmp	r3, #2
 800165a:	f300 8095 	bgt.w	8001788 <GPIO_voidSetPinMode+0x150>
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <GPIO_voidSetPinMode+0x30>
 8001662:	2b01      	cmp	r3, #1
 8001664:	d039      	beq.n	80016da <GPIO_voidSetPinMode+0xa2>
				GPIOC_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
			}
			break;

		default:
			break;
 8001666:	e08f      	b.n	8001788 <GPIO_voidSetPinMode+0x150>
			if (Copy_u8Pin < 8)
 8001668:	79bb      	ldrb	r3, [r7, #6]
 800166a:	2b07      	cmp	r3, #7
 800166c:	d817      	bhi.n	800169e <GPIO_voidSetPinMode+0x66>
				GPIOA_CRL &= ~((0b1111) << (Copy_u8Pin * 4));
 800166e:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <GPIO_voidSetPinMode+0x168>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	79ba      	ldrb	r2, [r7, #6]
 8001674:	0092      	lsls	r2, r2, #2
 8001676:	210f      	movs	r1, #15
 8001678:	fa01 f202 	lsl.w	r2, r1, r2
 800167c:	43d2      	mvns	r2, r2
 800167e:	4611      	mov	r1, r2
 8001680:	4a47      	ldr	r2, [pc, #284]	; (80017a0 <GPIO_voidSetPinMode+0x168>)
 8001682:	400b      	ands	r3, r1
 8001684:	6013      	str	r3, [r2, #0]
				GPIOA_CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8001686:	4b46      	ldr	r3, [pc, #280]	; (80017a0 <GPIO_voidSetPinMode+0x168>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	7979      	ldrb	r1, [r7, #5]
 800168c:	79ba      	ldrb	r2, [r7, #6]
 800168e:	0092      	lsls	r2, r2, #2
 8001690:	fa01 f202 	lsl.w	r2, r1, r2
 8001694:	4611      	mov	r1, r2
 8001696:	4a42      	ldr	r2, [pc, #264]	; (80017a0 <GPIO_voidSetPinMode+0x168>)
 8001698:	430b      	orrs	r3, r1
 800169a:	6013      	str	r3, [r2, #0]
			break;
 800169c:	e076      	b.n	800178c <GPIO_voidSetPinMode+0x154>
			else if (Copy_u8Pin < 16)
 800169e:	79bb      	ldrb	r3, [r7, #6]
 80016a0:	2b0f      	cmp	r3, #15
 80016a2:	d873      	bhi.n	800178c <GPIO_voidSetPinMode+0x154>
				Copy_u8Pin -= 8;
 80016a4:	79bb      	ldrb	r3, [r7, #6]
 80016a6:	3b08      	subs	r3, #8
 80016a8:	71bb      	strb	r3, [r7, #6]
				GPIOA_CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 80016aa:	4b3e      	ldr	r3, [pc, #248]	; (80017a4 <GPIO_voidSetPinMode+0x16c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	79ba      	ldrb	r2, [r7, #6]
 80016b0:	0092      	lsls	r2, r2, #2
 80016b2:	210f      	movs	r1, #15
 80016b4:	fa01 f202 	lsl.w	r2, r1, r2
 80016b8:	43d2      	mvns	r2, r2
 80016ba:	4611      	mov	r1, r2
 80016bc:	4a39      	ldr	r2, [pc, #228]	; (80017a4 <GPIO_voidSetPinMode+0x16c>)
 80016be:	400b      	ands	r3, r1
 80016c0:	6013      	str	r3, [r2, #0]
				GPIOA_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
 80016c2:	4b38      	ldr	r3, [pc, #224]	; (80017a4 <GPIO_voidSetPinMode+0x16c>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	7979      	ldrb	r1, [r7, #5]
 80016c8:	79ba      	ldrb	r2, [r7, #6]
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	fa01 f202 	lsl.w	r2, r1, r2
 80016d0:	4611      	mov	r1, r2
 80016d2:	4a34      	ldr	r2, [pc, #208]	; (80017a4 <GPIO_voidSetPinMode+0x16c>)
 80016d4:	430b      	orrs	r3, r1
 80016d6:	6013      	str	r3, [r2, #0]
			break;
 80016d8:	e058      	b.n	800178c <GPIO_voidSetPinMode+0x154>
			if (Copy_u8Pin < 8)
 80016da:	79bb      	ldrb	r3, [r7, #6]
 80016dc:	2b07      	cmp	r3, #7
 80016de:	d817      	bhi.n	8001710 <GPIO_voidSetPinMode+0xd8>
				GPIOB_CRL &= ~((0b1111) << (Copy_u8Pin * 4));
 80016e0:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <GPIO_voidSetPinMode+0x170>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	79ba      	ldrb	r2, [r7, #6]
 80016e6:	0092      	lsls	r2, r2, #2
 80016e8:	210f      	movs	r1, #15
 80016ea:	fa01 f202 	lsl.w	r2, r1, r2
 80016ee:	43d2      	mvns	r2, r2
 80016f0:	4611      	mov	r1, r2
 80016f2:	4a2d      	ldr	r2, [pc, #180]	; (80017a8 <GPIO_voidSetPinMode+0x170>)
 80016f4:	400b      	ands	r3, r1
 80016f6:	6013      	str	r3, [r2, #0]
				GPIOB_CRL |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <GPIO_voidSetPinMode+0x170>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	7979      	ldrb	r1, [r7, #5]
 80016fe:	79ba      	ldrb	r2, [r7, #6]
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	fa01 f202 	lsl.w	r2, r1, r2
 8001706:	4611      	mov	r1, r2
 8001708:	4a27      	ldr	r2, [pc, #156]	; (80017a8 <GPIO_voidSetPinMode+0x170>)
 800170a:	430b      	orrs	r3, r1
 800170c:	6013      	str	r3, [r2, #0]
			break;
 800170e:	e03f      	b.n	8001790 <GPIO_voidSetPinMode+0x158>
			else if (Copy_u8Pin < 16)
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	2b0f      	cmp	r3, #15
 8001714:	d83c      	bhi.n	8001790 <GPIO_voidSetPinMode+0x158>
				Copy_u8Pin -= 8;
 8001716:	79bb      	ldrb	r3, [r7, #6]
 8001718:	3b08      	subs	r3, #8
 800171a:	71bb      	strb	r3, [r7, #6]
				GPIOB_CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 800171c:	4b23      	ldr	r3, [pc, #140]	; (80017ac <GPIO_voidSetPinMode+0x174>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	79ba      	ldrb	r2, [r7, #6]
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	210f      	movs	r1, #15
 8001726:	fa01 f202 	lsl.w	r2, r1, r2
 800172a:	43d2      	mvns	r2, r2
 800172c:	4611      	mov	r1, r2
 800172e:	4a1f      	ldr	r2, [pc, #124]	; (80017ac <GPIO_voidSetPinMode+0x174>)
 8001730:	400b      	ands	r3, r1
 8001732:	6013      	str	r3, [r2, #0]
				GPIOB_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8001734:	4b1d      	ldr	r3, [pc, #116]	; (80017ac <GPIO_voidSetPinMode+0x174>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	7979      	ldrb	r1, [r7, #5]
 800173a:	79ba      	ldrb	r2, [r7, #6]
 800173c:	0092      	lsls	r2, r2, #2
 800173e:	fa01 f202 	lsl.w	r2, r1, r2
 8001742:	4611      	mov	r1, r2
 8001744:	4a19      	ldr	r2, [pc, #100]	; (80017ac <GPIO_voidSetPinMode+0x174>)
 8001746:	430b      	orrs	r3, r1
 8001748:	6013      	str	r3, [r2, #0]
			break;
 800174a:	e021      	b.n	8001790 <GPIO_voidSetPinMode+0x158>
			if (Copy_u8Pin > 12)
 800174c:	79bb      	ldrb	r3, [r7, #6]
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d920      	bls.n	8001794 <GPIO_voidSetPinMode+0x15c>
				Copy_u8Pin -= 8;
 8001752:	79bb      	ldrb	r3, [r7, #6]
 8001754:	3b08      	subs	r3, #8
 8001756:	71bb      	strb	r3, [r7, #6]
				GPIOC_CRH &= ~((0b1111) << (Copy_u8Pin * 4));
 8001758:	4b15      	ldr	r3, [pc, #84]	; (80017b0 <GPIO_voidSetPinMode+0x178>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	79ba      	ldrb	r2, [r7, #6]
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	210f      	movs	r1, #15
 8001762:	fa01 f202 	lsl.w	r2, r1, r2
 8001766:	43d2      	mvns	r2, r2
 8001768:	4611      	mov	r1, r2
 800176a:	4a11      	ldr	r2, [pc, #68]	; (80017b0 <GPIO_voidSetPinMode+0x178>)
 800176c:	400b      	ands	r3, r1
 800176e:	6013      	str	r3, [r2, #0]
				GPIOC_CRH |= ((Copy_u8Mode) << (Copy_u8Pin * 4));
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <GPIO_voidSetPinMode+0x178>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	7979      	ldrb	r1, [r7, #5]
 8001776:	79ba      	ldrb	r2, [r7, #6]
 8001778:	0092      	lsls	r2, r2, #2
 800177a:	fa01 f202 	lsl.w	r2, r1, r2
 800177e:	4611      	mov	r1, r2
 8001780:	4a0b      	ldr	r2, [pc, #44]	; (80017b0 <GPIO_voidSetPinMode+0x178>)
 8001782:	430b      	orrs	r3, r1
 8001784:	6013      	str	r3, [r2, #0]
			break;
 8001786:	e005      	b.n	8001794 <GPIO_voidSetPinMode+0x15c>
			break;
 8001788:	bf00      	nop
 800178a:	e004      	b.n	8001796 <GPIO_voidSetPinMode+0x15e>
			break;
 800178c:	bf00      	nop
 800178e:	e002      	b.n	8001796 <GPIO_voidSetPinMode+0x15e>
			break;
 8001790:	bf00      	nop
 8001792:	e000      	b.n	8001796 <GPIO_voidSetPinMode+0x15e>
			break;
 8001794:	bf00      	nop
		}
	}
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	40010800 	.word	0x40010800
 80017a4:	40010804 	.word	0x40010804
 80017a8:	40010c00 	.word	0x40010c00
 80017ac:	40010c04 	.word	0x40010c04
 80017b0:	40011004 	.word	0x40011004

080017b4 <GPIO_voidSetPinValue>:



void GPIO_voidSetPinValue(u8 Copy_u8PORT, u8 Copy_u8Pin, u8 Copy_u8Value)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
 80017be:	460b      	mov	r3, r1
 80017c0:	71bb      	strb	r3, [r7, #6]
 80017c2:	4613      	mov	r3, r2
 80017c4:	717b      	strb	r3, [r7, #5]
	if (Copy_u8Pin < 16)
 80017c6:	79bb      	ldrb	r3, [r7, #6]
 80017c8:	2b0f      	cmp	r3, #15
 80017ca:	d840      	bhi.n	800184e <GPIO_voidSetPinValue+0x9a>
	{
		if (Copy_u8Value == GPIO_HIGH)
 80017cc:	797b      	ldrb	r3, [r7, #5]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d11b      	bne.n	800180a <GPIO_voidSetPinValue+0x56>
		{
			switch (Copy_u8PORT)
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d012      	beq.n	80017fe <GPIO_voidSetPinValue+0x4a>
 80017d8:	2b02      	cmp	r3, #2
 80017da:	dc35      	bgt.n	8001848 <GPIO_voidSetPinValue+0x94>
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d002      	beq.n	80017e6 <GPIO_voidSetPinValue+0x32>
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d006      	beq.n	80017f2 <GPIO_voidSetPinValue+0x3e>
			case GPIO_C:
				GPIOC_BSRR = (1 << Copy_u8Pin);
				break;

			default:
				break;
 80017e4:	e030      	b.n	8001848 <GPIO_voidSetPinValue+0x94>
				GPIOA_BSRR = (1 << Copy_u8Pin);
 80017e6:	79bb      	ldrb	r3, [r7, #6]
 80017e8:	2201      	movs	r2, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	4b1a      	ldr	r3, [pc, #104]	; (8001858 <GPIO_voidSetPinValue+0xa4>)
 80017ee:	601a      	str	r2, [r3, #0]
				break;
 80017f0:	e02d      	b.n	800184e <GPIO_voidSetPinValue+0x9a>
				GPIOB_BSRR = (1 << Copy_u8Pin);
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	2201      	movs	r2, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	4b18      	ldr	r3, [pc, #96]	; (800185c <GPIO_voidSetPinValue+0xa8>)
 80017fa:	601a      	str	r2, [r3, #0]
				break;
 80017fc:	e027      	b.n	800184e <GPIO_voidSetPinValue+0x9a>
				GPIOC_BSRR = (1 << Copy_u8Pin);
 80017fe:	79bb      	ldrb	r3, [r7, #6]
 8001800:	2201      	movs	r2, #1
 8001802:	409a      	lsls	r2, r3
 8001804:	4b16      	ldr	r3, [pc, #88]	; (8001860 <GPIO_voidSetPinValue+0xac>)
 8001806:	601a      	str	r2, [r3, #0]
				break;
 8001808:	e021      	b.n	800184e <GPIO_voidSetPinValue+0x9a>
			}
		}
		else if (Copy_u8Value == GPIO_LOW)
 800180a:	797b      	ldrb	r3, [r7, #5]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d11e      	bne.n	800184e <GPIO_voidSetPinValue+0x9a>
		{
			switch (Copy_u8PORT)
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2b02      	cmp	r3, #2
 8001814:	d012      	beq.n	800183c <GPIO_voidSetPinValue+0x88>
 8001816:	2b02      	cmp	r3, #2
 8001818:	dc18      	bgt.n	800184c <GPIO_voidSetPinValue+0x98>
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <GPIO_voidSetPinValue+0x70>
 800181e:	2b01      	cmp	r3, #1
 8001820:	d006      	beq.n	8001830 <GPIO_voidSetPinValue+0x7c>
			case GPIO_C:
				GPIOC_BRR = (1 << Copy_u8Pin);
				break;

			default:
				break;
 8001822:	e013      	b.n	800184c <GPIO_voidSetPinValue+0x98>
				GPIOA_BRR = (1 << Copy_u8Pin);
 8001824:	79bb      	ldrb	r3, [r7, #6]
 8001826:	2201      	movs	r2, #1
 8001828:	409a      	lsls	r2, r3
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <GPIO_voidSetPinValue+0xb0>)
 800182c:	601a      	str	r2, [r3, #0]
				break;
 800182e:	e00e      	b.n	800184e <GPIO_voidSetPinValue+0x9a>
				GPIOB_BRR = (1 << Copy_u8Pin);
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	2201      	movs	r2, #1
 8001834:	409a      	lsls	r2, r3
 8001836:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <GPIO_voidSetPinValue+0xb4>)
 8001838:	601a      	str	r2, [r3, #0]
				break;
 800183a:	e008      	b.n	800184e <GPIO_voidSetPinValue+0x9a>
				GPIOC_BRR = (1 << Copy_u8Pin);
 800183c:	79bb      	ldrb	r3, [r7, #6]
 800183e:	2201      	movs	r2, #1
 8001840:	409a      	lsls	r2, r3
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <GPIO_voidSetPinValue+0xb8>)
 8001844:	601a      	str	r2, [r3, #0]
				break;
 8001846:	e002      	b.n	800184e <GPIO_voidSetPinValue+0x9a>
				break;
 8001848:	bf00      	nop
 800184a:	e000      	b.n	800184e <GPIO_voidSetPinValue+0x9a>
				break;
 800184c:	bf00      	nop
			}
		}
	}
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	bc80      	pop	{r7}
 8001856:	4770      	bx	lr
 8001858:	40010810 	.word	0x40010810
 800185c:	40010c10 	.word	0x40010c10
 8001860:	40011010 	.word	0x40011010
 8001864:	40010814 	.word	0x40010814
 8001868:	40010c14 	.word	0x40010c14
 800186c:	40011014 	.word	0x40011014

08001870 <NVIC_voidEnableInterrupt>:
}

/*************	 Function OF Enable Interrupt  **************************/

void NVIC_voidEnableInterrupt(IRQn_Type IRQn)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
	if (IRQn <= 31 )
 800187a:	79fb      	ldrb	r3, [r7, #7]
 800187c:	2b1f      	cmp	r3, #31
 800187e:	d80a      	bhi.n	8001896 <NVIC_voidEnableInterrupt+0x26>
	{
		SET_BIT(NVIC->ISER[0] , IRQn);
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <NVIC_voidEnableInterrupt+0x50>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	79fa      	ldrb	r2, [r7, #7]
 8001886:	2101      	movs	r1, #1
 8001888:	fa01 f202 	lsl.w	r2, r1, r2
 800188c:	4611      	mov	r1, r2
 800188e:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <NVIC_voidEnableInterrupt+0x50>)
 8001890:	430b      	orrs	r3, r1
 8001892:	6013      	str	r3, [r2, #0]
	}
	else
	{
		/* Return error */
	}
}
 8001894:	e00f      	b.n	80018b6 <NVIC_voidEnableInterrupt+0x46>
	else if (IRQn <= 59)
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	2b3b      	cmp	r3, #59	; 0x3b
 800189a:	d80c      	bhi.n	80018b6 <NVIC_voidEnableInterrupt+0x46>
		IRQn -= 32;
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	3b20      	subs	r3, #32
 80018a0:	71fb      	strb	r3, [r7, #7]
		SET_BIT(NVIC->ISER[1] , IRQn);
 80018a2:	4b07      	ldr	r3, [pc, #28]	; (80018c0 <NVIC_voidEnableInterrupt+0x50>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	79fa      	ldrb	r2, [r7, #7]
 80018a8:	2101      	movs	r1, #1
 80018aa:	fa01 f202 	lsl.w	r2, r1, r2
 80018ae:	4611      	mov	r1, r2
 80018b0:	4a03      	ldr	r2, [pc, #12]	; (80018c0 <NVIC_voidEnableInterrupt+0x50>)
 80018b2:	430b      	orrs	r3, r1
 80018b4:	6053      	str	r3, [r2, #4]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bc80      	pop	{r7}
 80018be:	4770      	bx	lr
 80018c0:	e000e100 	.word	0xe000e100

080018c4 <RCC_voidInitSystemClock>:
/*
 * Initionlizie clock of micro-controller 
 *
 */
void RCC_voidInitSystemClock(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
    #if     RCC_CLOCK_TYPE == RCC_HSI
        CLR_BIT(RCC->CFGR,0);     /* HSI selected as system clock */
 80018c8:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <RCC_voidInitSystemClock+0x30>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	4a09      	ldr	r2, [pc, #36]	; (80018f4 <RCC_voidInitSystemClock+0x30>)
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6053      	str	r3, [r2, #4]
        CLR_BIT(RCC->CFGR,1);
 80018d4:	4b07      	ldr	r3, [pc, #28]	; (80018f4 <RCC_voidInitSystemClock+0x30>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <RCC_voidInitSystemClock+0x30>)
 80018da:	f023 0302 	bic.w	r3, r3, #2
 80018de:	6053      	str	r3, [r2, #4]
    	SET_BIT(RCC->CR, 0);	   /* Enable HSI + Trimming = 0 */
 80018e0:	4b04      	ldr	r3, [pc, #16]	; (80018f4 <RCC_voidInitSystemClock+0x30>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a03      	ldr	r2, [pc, #12]	; (80018f4 <RCC_voidInitSystemClock+0x30>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	6013      	str	r3, [r2, #0]
		while(READ_BIT(RCC->CR,25)== 0){}
    #else
        #error("You chosed Wrong Clock type")

    #endif
}
 80018ec:	bf00      	nop
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <RCC_voidEnablePeripheralClock>:

void RCC_voidEnablePeripheralClock(u8 Copy_u8BusId, u8 Copy_u8PerId)
{
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	460a      	mov	r2, r1
 8001902:	71fb      	strb	r3, [r7, #7]
 8001904:	4613      	mov	r3, r2
 8001906:	71bb      	strb	r3, [r7, #6]
    if (Copy_u8PerId <= 31)
 8001908:	79bb      	ldrb	r3, [r7, #6]
 800190a:	2b1f      	cmp	r3, #31
 800190c:	d82b      	bhi.n	8001966 <RCC_voidEnablePeripheralClock+0x6e>
    {
        switch (Copy_u8BusId)
 800190e:	79fb      	ldrb	r3, [r7, #7]
 8001910:	2b02      	cmp	r3, #2
 8001912:	d01c      	beq.n	800194e <RCC_voidEnablePeripheralClock+0x56>
 8001914:	2b02      	cmp	r3, #2
 8001916:	dc25      	bgt.n	8001964 <RCC_voidEnablePeripheralClock+0x6c>
 8001918:	2b00      	cmp	r3, #0
 800191a:	d002      	beq.n	8001922 <RCC_voidEnablePeripheralClock+0x2a>
 800191c:	2b01      	cmp	r3, #1
 800191e:	d00b      	beq.n	8001938 <RCC_voidEnablePeripheralClock+0x40>
        {
            case RCC_AHB  : SET_BIT(RCC->AHBENR  ,Copy_u8PerId);    break;
            case RCC_APB1 : SET_BIT(RCC->APB1ENR ,Copy_u8PerId);    break;
            case RCC_APB2 : SET_BIT(RCC->APB2ENR ,Copy_u8PerId);    break;
            default       : break;
 8001920:	e020      	b.n	8001964 <RCC_voidEnablePeripheralClock+0x6c>
            case RCC_AHB  : SET_BIT(RCC->AHBENR  ,Copy_u8PerId);    break;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <RCC_voidEnablePeripheralClock+0x78>)
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	79ba      	ldrb	r2, [r7, #6]
 8001928:	2101      	movs	r1, #1
 800192a:	fa01 f202 	lsl.w	r2, r1, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4a0f      	ldr	r2, [pc, #60]	; (8001970 <RCC_voidEnablePeripheralClock+0x78>)
 8001932:	430b      	orrs	r3, r1
 8001934:	6153      	str	r3, [r2, #20]
 8001936:	e016      	b.n	8001966 <RCC_voidEnablePeripheralClock+0x6e>
            case RCC_APB1 : SET_BIT(RCC->APB1ENR ,Copy_u8PerId);    break;
 8001938:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <RCC_voidEnablePeripheralClock+0x78>)
 800193a:	69db      	ldr	r3, [r3, #28]
 800193c:	79ba      	ldrb	r2, [r7, #6]
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	4611      	mov	r1, r2
 8001946:	4a0a      	ldr	r2, [pc, #40]	; (8001970 <RCC_voidEnablePeripheralClock+0x78>)
 8001948:	430b      	orrs	r3, r1
 800194a:	61d3      	str	r3, [r2, #28]
 800194c:	e00b      	b.n	8001966 <RCC_voidEnablePeripheralClock+0x6e>
            case RCC_APB2 : SET_BIT(RCC->APB2ENR ,Copy_u8PerId);    break;
 800194e:	4b08      	ldr	r3, [pc, #32]	; (8001970 <RCC_voidEnablePeripheralClock+0x78>)
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	79ba      	ldrb	r2, [r7, #6]
 8001954:	2101      	movs	r1, #1
 8001956:	fa01 f202 	lsl.w	r2, r1, r2
 800195a:	4611      	mov	r1, r2
 800195c:	4a04      	ldr	r2, [pc, #16]	; (8001970 <RCC_voidEnablePeripheralClock+0x78>)
 800195e:	430b      	orrs	r3, r1
 8001960:	6193      	str	r3, [r2, #24]
 8001962:	e000      	b.n	8001966 <RCC_voidEnablePeripheralClock+0x6e>
            default       : break;
 8001964:	bf00      	nop

    else
    {
        /* Return Error */
    }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bc80      	pop	{r7}
 800196e:	4770      	bx	lr
 8001970:	40021000 	.word	0x40021000

08001974 <USART_voidInit>:
#define THRESHOLD_VALUE  9000000UL

void (*USART1_RXCallBack)(void);

void USART_voidInit(UART_Channel UART_Num )
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]

	//9600 BAUDE RATE
	USARTNumbers[UART_Num]->USART_BRR =  BAUDE_RATE;
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <USART_voidInit+0x78>)
 8001982:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001986:	f240 3241 	movw	r2, #833	; 0x341
 800198a:	609a      	str	r2, [r3, #8]

#if (WORD_LENGTH == _8BIT_DATA)
	CLR_BIT(USARTNumbers[UART_Num]->USART_CR1 , M);
 800198c:	79fb      	ldrb	r3, [r7, #7]
 800198e:	4a17      	ldr	r2, [pc, #92]	; (80019ec <USART_voidInit+0x78>)
 8001990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4914      	ldr	r1, [pc, #80]	; (80019ec <USART_voidInit+0x78>)
 800199a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800199e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80019a2:	60da      	str	r2, [r3, #12]
	SET_BIT(USARTNumbers[UART_Num]->USART_CR1 , M);
#endif


#if (STOP_BIT == _1STOP_BIT)
	USARTNumbers[UART_Num]->USART_CR2 |= (0<<STOP1)|(0<<STOP0);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4a11      	ldr	r2, [pc, #68]	; (80019ec <USART_voidInit+0x78>)
 80019a8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	490f      	ldr	r1, [pc, #60]	; (80019ec <USART_voidInit+0x78>)
 80019b0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80019b4:	6912      	ldr	r2, [r2, #16]
 80019b6:	611a      	str	r2, [r3, #16]
		enable TX
		enable RX
		enable UART
	 */
	//USARTNumbers[UART_Num]->USART_BRR = 0x341;
	USARTNumbers[UART_Num]->USART_CR1 |=(1<<UE)|(1<<TE)|(1<<RE);
 80019b8:	79fb      	ldrb	r3, [r7, #7]
 80019ba:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <USART_voidInit+0x78>)
 80019bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	79fa      	ldrb	r2, [r7, #7]
 80019c4:	4909      	ldr	r1, [pc, #36]	; (80019ec <USART_voidInit+0x78>)
 80019c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80019ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019ce:	f043 030c 	orr.w	r3, r3, #12
 80019d2:	60d3      	str	r3, [r2, #12]

	/*cleare status register*/
	USARTNumbers[UART_Num]->USART_SR= CLR_REGISTER;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	4a05      	ldr	r2, [pc, #20]	; (80019ec <USART_voidInit+0x78>)
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

	//SET_BIT(USARTNumbers[USART_ONE]->USART_CR1 ,RXNEIE);
}
 80019e0:	bf00      	nop
 80019e2:	370c      	adds	r7, #12
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	20000004 	.word	0x20000004

080019f0 <USART_RX_InterruptEnable>:


void USART_RX_InterruptEnable(UART_Channel UART_Num )
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
	SET_BIT(USARTNumbers[UART_Num]->USART_CR1 ,RXNEIE);
 80019fa:	79fb      	ldrb	r3, [r7, #7]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <USART_RX_InterruptEnable+0x2c>)
 80019fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	4905      	ldr	r1, [pc, #20]	; (8001a1c <USART_RX_InterruptEnable+0x2c>)
 8001a08:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001a0c:	f042 0220 	orr.w	r2, r2, #32
 8001a10:	60da      	str	r2, [r3, #12]
}
 8001a12:	bf00      	nop
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bc80      	pop	{r7}
 8001a1a:	4770      	bx	lr
 8001a1c:	20000004 	.word	0x20000004

08001a20 <USART_voidTransmitSynch>:
{
	CLR_BIT(USARTNumbers[UART_Num]->USART_CR1 ,TXEIE);
}

void USART_voidTransmitSynch(UART_Channel UART_Num  ,u8 Copy_u8DataArr[])
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	4603      	mov	r3, r0
 8001a28:	6039      	str	r1, [r7, #0]
 8001a2a:	71fb      	strb	r3, [r7, #7]
	u8 LOC_u8Counter=0;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	73fb      	strb	r3, [r7, #15]

	while(Copy_u8DataArr[LOC_u8Counter] !='\0' )
 8001a30:	e016      	b.n	8001a60 <USART_voidTransmitSynch+0x40>
	{
		USARTNumbers[UART_Num]->USART_DR = Copy_u8DataArr[LOC_u8Counter];
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	7819      	ldrb	r1, [r3, #0]
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	4a0e      	ldr	r2, [pc, #56]	; (8001a78 <USART_voidTransmitSynch+0x58>)
 8001a3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a42:	460a      	mov	r2, r1
 8001a44:	605a      	str	r2, [r3, #4]
		/*wait till transmition  complete */
		while( GET_BIT(USARTNumbers[UART_Num]->USART_SR ,TC) ==0 );
 8001a46:	bf00      	nop
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	4a0b      	ldr	r2, [pc, #44]	; (8001a78 <USART_voidTransmitSynch+0x58>)
 8001a4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f6      	beq.n	8001a48 <USART_voidTransmitSynch+0x28>
		LOC_u8Counter++;
 8001a5a:	7bfb      	ldrb	r3, [r7, #15]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
	while(Copy_u8DataArr[LOC_u8Counter] !='\0' )
 8001a60:	7bfb      	ldrb	r3, [r7, #15]
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	4413      	add	r3, r2
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d1e2      	bne.n	8001a32 <USART_voidTransmitSynch+0x12>
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bc80      	pop	{r7}
 8001a76:	4770      	bx	lr
 8001a78:	20000004 	.word	0x20000004

08001a7c <USART_voidTransmitCharSynch>:

void USART_voidTransmitCharSynch(UART_Channel UART_Num  ,u8 Copy_u8DataArr)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	460a      	mov	r2, r1
 8001a86:	71fb      	strb	r3, [r7, #7]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	71bb      	strb	r3, [r7, #6]
	USARTNumbers[UART_Num]->USART_DR = Copy_u8DataArr;
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	4a0a      	ldr	r2, [pc, #40]	; (8001ab8 <USART_voidTransmitCharSynch+0x3c>)
 8001a90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a94:	79ba      	ldrb	r2, [r7, #6]
 8001a96:	605a      	str	r2, [r3, #4]
	/*wait till transmition  complete */
	while( GET_BIT(USARTNumbers[UART_Num]->USART_SR ,TC) ==0 );
 8001a98:	bf00      	nop
 8001a9a:	79fb      	ldrb	r3, [r7, #7]
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <USART_voidTransmitCharSynch+0x3c>)
 8001a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f6      	beq.n	8001a9a <USART_voidTransmitCharSynch+0x1e>
}
 8001aac:	bf00      	nop
 8001aae:	bf00      	nop
 8001ab0:	370c      	adds	r7, #12
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bc80      	pop	{r7}
 8001ab6:	4770      	bx	lr
 8001ab8:	20000004 	.word	0x20000004

08001abc <USART1_void_SetCallBack>:
	return (LOC_u8DataRecieve);

}

void USART1_void_SetCallBack(void(*Ptr)(void))
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	USART1_RXCallBack = Ptr;
 8001ac4:	4a03      	ldr	r2, [pc, #12]	; (8001ad4 <USART1_void_SetCallBack+0x18>)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6013      	str	r3, [r2, #0]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20004564 	.word	0x20004564

08001ad8 <USART1_IRQHandler>:

/*Interrupt Service Routines*/
void USART1_IRQHandler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0

	if(GET_BIT(USARTNumbers[USART_ONE]->USART_SR,RXNE))
 8001adc:	4b05      	ldr	r3, [pc, #20]	; (8001af4 <USART1_IRQHandler+0x1c>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0320 	and.w	r3, r3, #32
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <USART1_IRQHandler+0x18>
	{
		USART1_RXCallBack();
 8001aea:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <USART1_IRQHandler+0x20>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4798      	blx	r3

	}



}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	20000004 	.word	0x20000004
 8001af8:	20004564 	.word	0x20004564

08001afc <USART_ReceiveNoBlock>:
	}
	return status;
}

u8 USART_ReceiveNoBlock(UART_Channel UART_Num)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
	return (USARTNumbers[UART_Num]->USART_DR);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <USART_ReceiveNoBlock+0x20>)
 8001b0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	b2db      	uxtb	r3, r3
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	370c      	adds	r7, #12
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bc80      	pop	{r7}
 8001b1a:	4770      	bx	lr
 8001b1c:	20000004 	.word	0x20000004

08001b20 <Main_voidAppClockInit>:
//
//extern u8 TX_Flag;
//extern TaskHandle_t	xTask_1;

void Main_voidAppClockInit(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
	/* Rcc init */
	RCC_voidInitSystemClock();
 8001b24:	f7ff fece 	bl	80018c4 <RCC_voidInitSystemClock>

	/* Enable Peripherals Clock */
	RCC_voidEnablePeripheralClock(RCC_GPIOA_EN);		// Enable GPIO_A Clock
 8001b28:	2102      	movs	r1, #2
 8001b2a:	2002      	movs	r0, #2
 8001b2c:	f7ff fee4 	bl	80018f8 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(RCC_UART_EN);			// Enable USART Clock
 8001b30:	210e      	movs	r1, #14
 8001b32:	2002      	movs	r0, #2
 8001b34:	f7ff fee0 	bl	80018f8 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(RCC_CAN_EN);			// Enable CAN Clock
 8001b38:	2119      	movs	r1, #25
 8001b3a:	2001      	movs	r0, #1
 8001b3c:	f7ff fedc 	bl	80018f8 <RCC_voidEnablePeripheralClock>
	RCC_voidEnablePeripheralClock(RCC_GPIOB_EN);
 8001b40:	2103      	movs	r1, #3
 8001b42:	2002      	movs	r0, #2
 8001b44:	f7ff fed8 	bl	80018f8 <RCC_voidEnablePeripheralClock>
	GPIO_voidSetPinMode(GPIO_B,PIN0,GPIO_OUTPUT_2MHz_PP);
 8001b48:	2202      	movs	r2, #2
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f7ff fd73 	bl	8001638 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(GPIO_B,PIN1,GPIO_OUTPUT_2MHz_PP);
 8001b52:	2202      	movs	r2, #2
 8001b54:	2101      	movs	r1, #1
 8001b56:	2001      	movs	r0, #1
 8001b58:	f7ff fd6e 	bl	8001638 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(GPIO_B,PIN3,GPIO_OUTPUT_2MHz_PP);
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	2103      	movs	r1, #3
 8001b60:	2001      	movs	r0, #1
 8001b62:	f7ff fd69 	bl	8001638 <GPIO_voidSetPinMode>
	/* Setting GPIO_Pins Mode/Direction */
	GPIO_voidSetPinMode(UART_RX_PIN);					// RX -> Input Floating
 8001b66:	2204      	movs	r2, #4
 8001b68:	210a      	movs	r1, #10
 8001b6a:	2000      	movs	r0, #0
 8001b6c:	f7ff fd64 	bl	8001638 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(UART_TX_PIN);					// TX -> Output AF PP
 8001b70:	2209      	movs	r2, #9
 8001b72:	2109      	movs	r1, #9
 8001b74:	2000      	movs	r0, #0
 8001b76:	f7ff fd5f 	bl	8001638 <GPIO_voidSetPinMode>

	GPIO_voidSetPinMode(CAN_RX_PIN);					// RX -> Input Floating
 8001b7a:	2204      	movs	r2, #4
 8001b7c:	210b      	movs	r1, #11
 8001b7e:	2000      	movs	r0, #0
 8001b80:	f7ff fd5a 	bl	8001638 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(CAN_TX_PIN);					// TX -> Output AF PP
 8001b84:	2209      	movs	r2, #9
 8001b86:	210c      	movs	r1, #12
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fd55 	bl	8001638 <GPIO_voidSetPinMode>

	/* Enable Interrupt */
	NVIC_voidEnableInterrupt(USART1_IRQn);				// Enable USART Interrupt
 8001b8e:	2025      	movs	r0, #37	; 0x25
 8001b90:	f7ff fe6e 	bl	8001870 <NVIC_voidEnableInterrupt>

	/* Peripherals Initialization */

	//	STK_voidInit();										// Init	Systick

	USART1_void_SetCallBack(USART_RXCallback);
 8001b94:	4808      	ldr	r0, [pc, #32]	; (8001bb8 <Main_voidAppClockInit+0x98>)
 8001b96:	f7ff ff91 	bl	8001abc <USART1_void_SetCallBack>
	USART_RX_InterruptEnable(USART_ONE);
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	f7ff ff28 	bl	80019f0 <USART_RX_InterruptEnable>
	USART_voidInit(USART_ONE);							// Init USART 1 	9600
 8001ba0:	2000      	movs	r0, #0
 8001ba2:	f7ff fee7 	bl	8001974 <USART_voidInit>

	CAN_voidInit();										// CAN Init
 8001ba6:	f7ff fa97 	bl	80010d8 <CAN_voidInit>

	CAN_FilterConfig();									//
 8001baa:	f000 f86e 	bl	8001c8a <CAN_FilterConfig>

	CAN_voidStart();									// Start Conversion
 8001bae:	f7ff fb97 	bl	80012e0 <CAN_voidStart>


}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	08001ccd 	.word	0x08001ccd

08001bbc <CAN_TX>:

void CAN_TX(void)			// CAN Transmit Fun
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
	CAN_TxHeaderTypeDef tx_header;

	tx_header.StdId = 0x65d;
 8001bc2:	f240 635d 	movw	r3, #1629	; 0x65d
 8001bc6:	603b      	str	r3, [r7, #0]
	tx_header.IDE = CAN_ID_STD;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60bb      	str	r3, [r7, #8]
	tx_header.RTR = CAN_RTR_DATA;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	60fb      	str	r3, [r7, #12]
	tx_header.DLC = 3;				// Data Length is 3 for ID, Command, Data.
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	613b      	str	r3, [r7, #16]

	CAN_voidAddTxMsg(&tx_header,Globaleu8Data);
 8001bd4:	463b      	mov	r3, r7
 8001bd6:	4904      	ldr	r1, [pc, #16]	; (8001be8 <CAN_TX+0x2c>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fad1 	bl	8001180 <CAN_voidAddTxMsg>

}
 8001bde:	bf00      	nop
 8001be0:	3718      	adds	r7, #24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20004574 	.word	0x20004574

08001bec <CAN_RX>:

void CAN_RX(void)			// CAN Receive Fun
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b08e      	sub	sp, #56	; 0x38
 8001bf0:	af00      	add	r7, sp, #0
	CAN_RxHeaderTypeDef Rx_header;

	while(CAN_voidRXPending(CAN_RX_FIFO0) == 0);
 8001bf2:	bf00      	nop
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	f7ff fc33 	bl	8001460 <CAN_voidRXPending>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f9      	beq.n	8001bf4 <CAN_RX+0x8>

	CAN_voidGetRxMsg(CAN_RX_FIFO0,&Rx_header,Globaleu8Data);
 8001c00:	f107 0318 	add.w	r3, r7, #24
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <CAN_RX+0x7c>)
 8001c06:	4619      	mov	r1, r3
 8001c08:	2000      	movs	r0, #0
 8001c0a:	f7ff fb7f 	bl	800130c <CAN_voidGetRxMsg>
//	USART_voidTransmitSynch(USART_ONE, Device_IDs[Globaleu8Data[ID]]);
//
//	USART_voidTransmitCharSynch(USART_ONE, ' ');
	if(Globaleu8Data[ID] < 2){
 8001c0e:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <CAN_RX+0x7c>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d80a      	bhi.n	8001c2e <CAN_RX+0x42>
		USART_voidTransmitSynch(USART_ONE, Device_Status[Globaleu8Data[STATUS]]);
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <CAN_RX+0x7c>)
 8001c1a:	785b      	ldrb	r3, [r3, #1]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4a12      	ldr	r2, [pc, #72]	; (8001c6c <CAN_RX+0x80>)
 8001c22:	4413      	add	r3, r2
 8001c24:	4619      	mov	r1, r3
 8001c26:	2000      	movs	r0, #0
 8001c28:	f7ff fefa 	bl	8001a20 <USART_voidTransmitSynch>
			USART_voidTransmitCharSynch(USART_ONE, '0');
		}
	}

//	USART_voidTransmitCharSynch(USART_ONE, '\n');
}
 8001c2c:	e017      	b.n	8001c5e <CAN_RX+0x72>
		if(Globaleu8Data[STATUS] > 0){
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	; (8001c68 <CAN_RX+0x7c>)
 8001c30:	785b      	ldrb	r3, [r3, #1]
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d00e      	beq.n	8001c56 <CAN_RX+0x6a>
			u8 *intSTR = IntToString(Globaleu8Data[STATUS],str);
 8001c38:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <CAN_RX+0x7c>)
 8001c3a:	785b      	ldrb	r3, [r3, #1]
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	461a      	mov	r2, r3
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	4619      	mov	r1, r3
 8001c44:	4610      	mov	r0, r2
 8001c46:	f7ff f9f7 	bl	8001038 <IntToString>
 8001c4a:	6378      	str	r0, [r7, #52]	; 0x34
			USART_voidTransmitSynch(USART_ONE, intSTR);
 8001c4c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c4e:	2000      	movs	r0, #0
 8001c50:	f7ff fee6 	bl	8001a20 <USART_voidTransmitSynch>
}
 8001c54:	e003      	b.n	8001c5e <CAN_RX+0x72>
			USART_voidTransmitCharSynch(USART_ONE, '0');
 8001c56:	2130      	movs	r1, #48	; 0x30
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff ff0f 	bl	8001a7c <USART_voidTransmitCharSynch>
}
 8001c5e:	bf00      	nop
 8001c60:	3738      	adds	r7, #56	; 0x38
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20004574 	.word	0x20004574
 8001c6c:	2000001c 	.word	0x2000001c

08001c70 <Std_id_High>:

u16 Std_id_High(u16 local_u16Std_Id)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	4603      	mov	r3, r0
 8001c78:	80fb      	strh	r3, [r7, #6]
	return (local_u16Std_Id << 5);
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	015b      	lsls	r3, r3, #5
 8001c7e:	b29b      	uxth	r3, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <CAN_FilterConfig>:

void CAN_FilterConfig(void)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b08a      	sub	sp, #40	; 0x28
 8001c8e:	af00      	add	r7, sp, #0
	CAN_FilterTypeDef CAN_FilterInit;
	CAN_FilterInit.FilterActivation = ENABLE;
 8001c90:	2301      	movs	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24
	CAN_FilterInit.FilterBank = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	61bb      	str	r3, [r7, #24]
	CAN_FilterInit.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
	CAN_FilterInit.FilterIdHigh = Std_id_High(0x65d);
 8001c9c:	f240 605d 	movw	r0, #1629	; 0x65d
 8001ca0:	f7ff ffe6 	bl	8001c70 <Std_id_High>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	607b      	str	r3, [r7, #4]
	CAN_FilterInit.FilterIdLow = 0x0000;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
	CAN_FilterInit.FilterMaskIdHigh = 0x0000;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60fb      	str	r3, [r7, #12]
	CAN_FilterInit.FilterMaskIdLow = 0x0000;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	613b      	str	r3, [r7, #16]
	CAN_FilterInit.FilterMode = CAN_FILTERMODE_IDMASK;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	61fb      	str	r3, [r7, #28]
	CAN_FilterInit.FilterScale = CAN_FILTERSCALE_32BIT;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	623b      	str	r3, [r7, #32]

	CAN_voidConfigFilter(&CAN_FilterInit);
 8001cbc:	1d3b      	adds	r3, r7, #4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fbea 	bl	8001498 <CAN_voidConfigFilter>
}
 8001cc4:	bf00      	nop
 8001cc6:	3728      	adds	r7, #40	; 0x28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <USART_RXCallback>:


void USART_RXCallback(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
	//		USART_voidTransmitCharSynch(USART_ONE, ' ');
	//		//		TX_Flag = 1;
	//		vTaskResume(xTask_1);
	//	}

	if(ch1 == terminationChar)
 8001cd0:	4b45      	ldr	r3, [pc, #276]	; (8001de8 <USART_RXCallback+0x11c>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b2f      	cmp	r3, #47	; 0x2f
 8001cd8:	d106      	bne.n	8001ce8 <USART_RXCallback+0x1c>
		counter++;
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <USART_RXCallback+0x120>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	b2db      	uxtb	r3, r3
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	b2da      	uxtb	r2, r3
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <USART_RXCallback+0x120>)
 8001ce6:	701a      	strb	r2, [r3, #0]

	//read identifier, DLC, ID, Command, Data
	ch1 = USART_ReceiveNoBlock(USART_ONE);
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f7ff ff07 	bl	8001afc <USART_ReceiveNoBlock>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b3d      	ldr	r3, [pc, #244]	; (8001de8 <USART_RXCallback+0x11c>)
 8001cf4:	701a      	strb	r2, [r3, #0]
	if(ch1 != nullChar && ch1 != terminationChar && ch1 != resetChar){
 8001cf6:	4b3c      	ldr	r3, [pc, #240]	; (8001de8 <USART_RXCallback+0x11c>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d009      	beq.n	8001d14 <USART_RXCallback+0x48>
 8001d00:	4b39      	ldr	r3, [pc, #228]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b2f      	cmp	r3, #47	; 0x2f
 8001d08:	d004      	beq.n	8001d14 <USART_RXCallback+0x48>
 8001d0a:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	2b2e      	cmp	r3, #46	; 0x2e
 8001d12:	d10a      	bne.n	8001d2a <USART_RXCallback+0x5e>
		//		LCD_WriteChar(ch1);
	}
	else if(ch1 == resetChar){
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d1c:	d105      	bne.n	8001d2a <USART_RXCallback+0x5e>
		//		LCD_SetCursor(0, 0);
		ch1 = terminationChar;
 8001d1e:	4b32      	ldr	r3, [pc, #200]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d20:	222f      	movs	r2, #47	; 0x2f
 8001d22:	701a      	strb	r2, [r3, #0]
		counter = 0;
 8001d24:	4b31      	ldr	r3, [pc, #196]	; (8001dec <USART_RXCallback+0x120>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
	}
	if(ch1 >= '0' && ch1 <= '9'){
 8001d2a:	4b2f      	ldr	r3, [pc, #188]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b2f      	cmp	r3, #47	; 0x2f
 8001d32:	d957      	bls.n	8001de4 <USART_RXCallback+0x118>
 8001d34:	4b2c      	ldr	r3, [pc, #176]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b39      	cmp	r3, #57	; 0x39
 8001d3c:	d852      	bhi.n	8001de4 <USART_RXCallback+0x118>
		ch1 -= '0';
 8001d3e:	4b2a      	ldr	r3, [pc, #168]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	3b30      	subs	r3, #48	; 0x30
 8001d46:	b2da      	uxtb	r2, r3
 8001d48:	4b27      	ldr	r3, [pc, #156]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d4a:	701a      	strb	r2, [r3, #0]
		if(counter == 3){//check ID
 8001d4c:	4b27      	ldr	r3, [pc, #156]	; (8001dec <USART_RXCallback+0x120>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d10a      	bne.n	8001d6c <USART_RXCallback+0xa0>
			GPIO_voidSetPinValue(GPIO_B, PIN0, GPIO_HIGH);
 8001d56:	2201      	movs	r2, #1
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2001      	movs	r0, #1
 8001d5c:	f7ff fd2a 	bl	80017b4 <GPIO_voidSetPinValue>
			Globaleu8Data[ID] = ch1;
 8001d60:	4b21      	ldr	r3, [pc, #132]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	b2da      	uxtb	r2, r3
 8001d66:	4b22      	ldr	r3, [pc, #136]	; (8001df0 <USART_RXCallback+0x124>)
 8001d68:	701a      	strb	r2, [r3, #0]
			counter = 2;
			vTaskResume(xTask_1);
		}
	}

}
 8001d6a:	e03b      	b.n	8001de4 <USART_RXCallback+0x118>
		else if(counter == 4) {//check command
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <USART_RXCallback+0x120>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d11f      	bne.n	8001db6 <USART_RXCallback+0xea>
			Globaleu8Data[R_W] = ch1;
 8001d76:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <USART_RXCallback+0x11c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b1c      	ldr	r3, [pc, #112]	; (8001df0 <USART_RXCallback+0x124>)
 8001d7e:	705a      	strb	r2, [r3, #1]
			GPIO_voidSetPinValue(GPIO_B, PIN1, GPIO_HIGH);
 8001d80:	2201      	movs	r2, #1
 8001d82:	2101      	movs	r1, #1
 8001d84:	2001      	movs	r0, #1
 8001d86:	f7ff fd15 	bl	80017b4 <GPIO_voidSetPinValue>
			if(Globaleu8Data[R_W] == READ){
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <USART_RXCallback+0x124>)
 8001d8c:	785b      	ldrb	r3, [r3, #1]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d127      	bne.n	8001de4 <USART_RXCallback+0x118>
				GPIO_voidSetPinValue(GPIO_B, PIN3, GPIO_HIGH);
 8001d94:	2201      	movs	r2, #1
 8001d96:	2103      	movs	r1, #3
 8001d98:	2001      	movs	r0, #1
 8001d9a:	f7ff fd0b 	bl	80017b4 <GPIO_voidSetPinValue>
				Globaleu8Data[2] = 0;
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <USART_RXCallback+0x124>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	709a      	strb	r2, [r3, #2]
				counter = 2;
 8001da4:	4b11      	ldr	r3, [pc, #68]	; (8001dec <USART_RXCallback+0x120>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
				vTaskResume(xTask_1);
 8001daa:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <USART_RXCallback+0x128>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7fe fc0e 	bl	80005d0 <vTaskResume>
}
 8001db4:	e016      	b.n	8001de4 <USART_RXCallback+0x118>
		else if(counter == 5){//check data
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <USART_RXCallback+0x120>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d111      	bne.n	8001de4 <USART_RXCallback+0x118>
			GPIO_voidSetPinValue(GPIO_B, PIN3, GPIO_HIGH);
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	2103      	movs	r1, #3
 8001dc4:	2001      	movs	r0, #1
 8001dc6:	f7ff fcf5 	bl	80017b4 <GPIO_voidSetPinValue>
			Globaleu8Data[2] = ch1;
 8001dca:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <USART_RXCallback+0x11c>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	b2da      	uxtb	r2, r3
 8001dd0:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <USART_RXCallback+0x124>)
 8001dd2:	709a      	strb	r2, [r3, #2]
			counter = 2;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	; (8001dec <USART_RXCallback+0x120>)
 8001dd6:	2202      	movs	r2, #2
 8001dd8:	701a      	strb	r2, [r3, #0]
			vTaskResume(xTask_1);
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <USART_RXCallback+0x128>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7fe fbf6 	bl	80005d0 <vTaskResume>
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000018 	.word	0x20000018
 8001dec:	20004568 	.word	0x20004568
 8001df0:	20004574 	.word	0x20004574
 8001df4:	2000456c 	.word	0x2000456c

08001df8 <main>:

int main()
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af02      	add	r7, sp, #8
	Main_voidAppClockInit();
 8001dfe:	f7ff fe8f 	bl	8001b20 <Main_voidAppClockInit>

	GPIO_voidSetPinMode(GPIO_A, PIN2,GPIO_OUTPUT_2MHz_PP);
 8001e02:	2202      	movs	r2, #2
 8001e04:	2102      	movs	r1, #2
 8001e06:	2000      	movs	r0, #0
 8001e08:	f7ff fc16 	bl	8001638 <GPIO_voidSetPinMode>
	GPIO_voidSetPinMode(GPIO_A, PIN1,GPIO_OUTPUT_2MHz_PP);
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2000      	movs	r0, #0
 8001e12:	f7ff fc11 	bl	8001638 <GPIO_voidSetPinMode>

	xTaskCreate(vTask_CAN_TX, "CAN_TX", configMINIMAL_STACK_SIZE, NULL, 2,&xTask_1);
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <main+0x60>)
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	490e      	ldr	r1, [pc, #56]	; (8001e5c <main+0x64>)
 8001e24:	480e      	ldr	r0, [pc, #56]	; (8001e60 <main+0x68>)
 8001e26:	f7fe fa1a 	bl	800025e <xTaskCreate>
	xTaskCreate(vTask_CAN_RX, "CAN_RX", configMINIMAL_STACK_SIZE, NULL, 2,&xTask_2);
 8001e2a:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <main+0x6c>)
 8001e2c:	9301      	str	r3, [sp, #4]
 8001e2e:	2302      	movs	r3, #2
 8001e30:	9300      	str	r3, [sp, #0]
 8001e32:	2300      	movs	r3, #0
 8001e34:	2280      	movs	r2, #128	; 0x80
 8001e36:	490c      	ldr	r1, [pc, #48]	; (8001e68 <main+0x70>)
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <main+0x74>)
 8001e3a:	f7fe fa10 	bl	800025e <xTaskCreate>
	vTaskSuspend(xTask_1);
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <main+0x60>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fb20 	bl	8000488 <vTaskSuspend>
	vTaskSuspend(xTask_2);
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <main+0x6c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7fe fb1b 	bl	8000488 <vTaskSuspend>
	vTaskStartScheduler();
 8001e52:	f7fe fbfd 	bl	8000650 <vTaskStartScheduler>

	while(1);
 8001e56:	e7fe      	b.n	8001e56 <main+0x5e>
 8001e58:	2000456c 	.word	0x2000456c
 8001e5c:	08001fb8 	.word	0x08001fb8
 8001e60:	08001e71 	.word	0x08001e71
 8001e64:	20004570 	.word	0x20004570
 8001e68:	08001fc0 	.word	0x08001fc0
 8001e6c:	08001ea5 	.word	0x08001ea5

08001e70 <vTask_CAN_TX>:
	return 0;
}

void vTask_CAN_TX( void* params )
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
		// Check test GPIO_A_PIN_2

		//		if(TX_Flag == 1)
		//		{
//		USART_RX_InterruptDisable(USART_ONE);
		GPIO_voidSetPinValue(TX_LED_CHECK);
 8001e78:	2201      	movs	r2, #1
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f7ff fc99 	bl	80017b4 <GPIO_voidSetPinValue>
		CAN_TX();			// Start Transmit
 8001e82:	f7ff fe9b 	bl	8001bbc <CAN_TX>

		//		TX_Flag = 0;		// Busy
		//
		//		RX_Flag = 1;		// Start
		vTaskResume(xTask_2);
 8001e86:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <vTask_CAN_TX+0x2c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fba0 	bl	80005d0 <vTaskResume>
		vTaskSuspend(xTask_1);
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <vTask_CAN_TX+0x30>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe faf7 	bl	8000488 <vTaskSuspend>
		GPIO_voidSetPinValue(TX_LED_CHECK);
 8001e9a:	e7ed      	b.n	8001e78 <vTask_CAN_TX+0x8>
 8001e9c:	20004570 	.word	0x20004570
 8001ea0:	2000456c 	.word	0x2000456c

08001ea4 <vTask_CAN_RX>:
		//		vTaskDelay(100);
	}
}

void vTask_CAN_RX( void* params )
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	{
		// Check test GPIO_A_PIN_1

		//		if(RX_Flag == 1)
		//		{
		GPIO_voidSetPinValue(RX_LED_CHECK);
 8001eac:	2201      	movs	r2, #1
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2000      	movs	r0, #0
 8001eb2:	f7ff fc7f 	bl	80017b4 <GPIO_voidSetPinValue>
		CAN_RX();			// Start Receive
 8001eb6:	f7ff fe99 	bl	8001bec <CAN_RX>

		//		RX_Flag = 0;
		GPIO_voidSetPinValue(GPIO_A, PIN1, GPIO_LOW);
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f7ff fc78 	bl	80017b4 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(GPIO_A, PIN2, GPIO_LOW);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	2102      	movs	r1, #2
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff fc73 	bl	80017b4 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(GPIO_B, PIN0, GPIO_LOW);
 8001ece:	2200      	movs	r2, #0
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	2001      	movs	r0, #1
 8001ed4:	f7ff fc6e 	bl	80017b4 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(GPIO_B, PIN1, GPIO_LOW);
 8001ed8:	2200      	movs	r2, #0
 8001eda:	2101      	movs	r1, #1
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff fc69 	bl	80017b4 <GPIO_voidSetPinValue>
		GPIO_voidSetPinValue(GPIO_B, PIN3, GPIO_LOW);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2103      	movs	r1, #3
 8001ee6:	2001      	movs	r0, #1
 8001ee8:	f7ff fc64 	bl	80017b4 <GPIO_voidSetPinValue>
//		USART_RX_InterruptEnable(USART_ONE);
		vTaskSuspend(xTask_2);
 8001eec:	4b02      	ldr	r3, [pc, #8]	; (8001ef8 <vTask_CAN_RX+0x54>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fac9 	bl	8000488 <vTaskSuspend>
		GPIO_voidSetPinValue(RX_LED_CHECK);
 8001ef6:	e7d9      	b.n	8001eac <vTask_CAN_RX+0x8>
 8001ef8:	20004570 	.word	0x20004570

08001efc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001efc:	480d      	ldr	r0, [pc, #52]	; (8001f34 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001efe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001f00:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f04:	480c      	ldr	r0, [pc, #48]	; (8001f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f06:	490d      	ldr	r1, [pc, #52]	; (8001f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f08:	4a0d      	ldr	r2, [pc, #52]	; (8001f40 <LoopForever+0xe>)
  movs r3, #0
 8001f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f0c:	e002      	b.n	8001f14 <LoopCopyDataInit>

08001f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f12:	3304      	adds	r3, #4

08001f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f18:	d3f9      	bcc.n	8001f0e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f1c:	4c0a      	ldr	r4, [pc, #40]	; (8001f48 <LoopForever+0x16>)
  movs r3, #0
 8001f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f20:	e001      	b.n	8001f26 <LoopFillZerobss>

08001f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f24:	3204      	adds	r2, #4

08001f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f28:	d3fb      	bcc.n	8001f22 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f2a:	f000 f811 	bl	8001f50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f2e:	f7ff ff63 	bl	8001df8 <main>

08001f32 <LoopForever>:

LoopForever:
  b LoopForever
 8001f32:	e7fe      	b.n	8001f32 <LoopForever>
  ldr   r0, =_estack
 8001f34:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f3c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8001f40:	08001fd0 	.word	0x08001fd0
  ldr r2, =_sbss
 8001f44:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8001f48:	20004578 	.word	0x20004578

08001f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f4c:	e7fe      	b.n	8001f4c <ADC1_2_IRQHandler>
	...

08001f50 <__libc_init_array>:
 8001f50:	b570      	push	{r4, r5, r6, lr}
 8001f52:	2600      	movs	r6, #0
 8001f54:	4d0c      	ldr	r5, [pc, #48]	; (8001f88 <__libc_init_array+0x38>)
 8001f56:	4c0d      	ldr	r4, [pc, #52]	; (8001f8c <__libc_init_array+0x3c>)
 8001f58:	1b64      	subs	r4, r4, r5
 8001f5a:	10a4      	asrs	r4, r4, #2
 8001f5c:	42a6      	cmp	r6, r4
 8001f5e:	d109      	bne.n	8001f74 <__libc_init_array+0x24>
 8001f60:	f000 f81a 	bl	8001f98 <_init>
 8001f64:	2600      	movs	r6, #0
 8001f66:	4d0a      	ldr	r5, [pc, #40]	; (8001f90 <__libc_init_array+0x40>)
 8001f68:	4c0a      	ldr	r4, [pc, #40]	; (8001f94 <__libc_init_array+0x44>)
 8001f6a:	1b64      	subs	r4, r4, r5
 8001f6c:	10a4      	asrs	r4, r4, #2
 8001f6e:	42a6      	cmp	r6, r4
 8001f70:	d105      	bne.n	8001f7e <__libc_init_array+0x2e>
 8001f72:	bd70      	pop	{r4, r5, r6, pc}
 8001f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f78:	4798      	blx	r3
 8001f7a:	3601      	adds	r6, #1
 8001f7c:	e7ee      	b.n	8001f5c <__libc_init_array+0xc>
 8001f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001f82:	4798      	blx	r3
 8001f84:	3601      	adds	r6, #1
 8001f86:	e7f2      	b.n	8001f6e <__libc_init_array+0x1e>
 8001f88:	08001fc8 	.word	0x08001fc8
 8001f8c:	08001fc8 	.word	0x08001fc8
 8001f90:	08001fc8 	.word	0x08001fc8
 8001f94:	08001fcc 	.word	0x08001fcc

08001f98 <_init>:
 8001f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f9a:	bf00      	nop
 8001f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f9e:	bc08      	pop	{r3}
 8001fa0:	469e      	mov	lr, r3
 8001fa2:	4770      	bx	lr

08001fa4 <_fini>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	bf00      	nop
 8001fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001faa:	bc08      	pop	{r3}
 8001fac:	469e      	mov	lr, r3
 8001fae:	4770      	bx	lr

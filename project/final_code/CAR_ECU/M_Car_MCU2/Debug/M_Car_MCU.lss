
M_Car_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042e4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  000042e4  00004378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000001d  00800188  00800188  000044a0  2**0
                  ALLOC
  3 .stab         00004dc4  00000000  00000000  000044a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001e88  00000000  00000000  00009264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000b0ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b28c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b47e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d889  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000ec0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fde8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000ffa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0001029e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010c0c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f3 0f 	jmp	0x1fe6	; 0x1fe6 <__vector_1>
       8:	0c 94 26 10 	jmp	0x204c	; 0x204c <__vector_2>
       c:	0c 94 59 10 	jmp	0x20b2	; 0x20b2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 a5 0c 	jmp	0x194a	; 0x194a <__vector_6>
      1c:	0c 94 d8 0c 	jmp	0x19b0	; 0x19b0 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 b9 0d 	jmp	0x1b72	; 0x1b72 <__vector_12>
      34:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__vector_13>
      38:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__vector_14>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 4c 14 	jmp	0x2898	; 0x2898 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 3a       	cpi	r26, 0xA5	; 165
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 da 08 	call	0x11b4	; 0x11b4 <main>
      8a:	0c 94 70 21 	jmp	0x42e0	; 0x42e0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 45 21 	jmp	0x428a	; 0x428a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 45 21 	jmp	0x428a	; 0x428a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 45 21 	jmp	0x428a	; 0x428a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 45 21 	jmp	0x428a	; 0x428a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 45 21 	jmp	0x428a	; 0x428a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 61 21 	jmp	0x42c2	; 0x42c2 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 49 21 	jmp	0x4292	; 0x4292 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 65 21 	jmp	0x42ca	; 0x42ca <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <USART_RXCallback>:
//		Data_Count=0;
//	}
//}


void USART_RXCallback(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	if( Data_Count == 0 )
     e36:	80 91 8a 01 	lds	r24, 0x018A
     e3a:	88 23       	and	r24, r24
     e3c:	c1 f4       	brne	.+48     	; 0xe6e <USART_RXCallback+0x40>
	{
		Global_ID = USART_u8ReceiveInterruptByte();
     e3e:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <USART_u8ReceiveInterruptByte>
     e42:	80 93 8b 01 	sts	0x018B, r24
		LCD_voidGoToPosition(0,0);
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	60 e0       	ldi	r22, 0x00	; 0
     e4a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
		LCD_voidWriteIntData(Global_ID);
     e4e:	80 91 8b 01 	lds	r24, 0x018B
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e0       	ldi	r26, 0x00	; 0
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	bc 01       	movw	r22, r24
     e5c:	cd 01       	movw	r24, r26
     e5e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
		Data_Count++;
     e62:	80 91 8a 01 	lds	r24, 0x018A
     e66:	8f 5f       	subi	r24, 0xFF	; 255
     e68:	80 93 8a 01 	sts	0x018A, r24
     e6c:	32 c0       	rjmp	.+100    	; 0xed2 <USART_RXCallback+0xa4>
	}
	else if(Data_Count == 1)
     e6e:	80 91 8a 01 	lds	r24, 0x018A
     e72:	81 30       	cpi	r24, 0x01	; 1
     e74:	d9 f4       	brne	.+54     	; 0xeac <USART_RXCallback+0x7e>
	{
		R_W = USART_u8ReceiveInterruptByte();
     e76:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <USART_u8ReceiveInterruptByte>
     e7a:	80 93 68 01 	sts	0x0168, r24
		LCD_voidGoToPosition(1,0);
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	60 e0       	ldi	r22, 0x00	; 0
     e82:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
		LCD_voidWriteIntData(R_W);
     e86:	80 91 68 01 	lds	r24, 0x0168
     e8a:	88 2f       	mov	r24, r24
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	a0 e0       	ldi	r26, 0x00	; 0
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	bc 01       	movw	r22, r24
     e94:	cd 01       	movw	r24, r26
     e96:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
		Data_Count++;
     e9a:	80 91 8a 01 	lds	r24, 0x018A
     e9e:	8f 5f       	subi	r24, 0xFF	; 255
     ea0:	80 93 8a 01 	sts	0x018A, r24
		USART_RX_Flag = 1;
     ea4:	81 e0       	ldi	r24, 0x01	; 1
     ea6:	80 93 89 01 	sts	0x0189, r24
     eaa:	13 c0       	rjmp	.+38     	; 0xed2 <USART_RXCallback+0xa4>
	}
	else
	{
		state = USART_u8ReceiveInterruptByte();
     eac:	0e 94 7f 0a 	call	0x14fe	; 0x14fe <USART_u8ReceiveInterruptByte>
     eb0:	80 93 8e 01 	sts	0x018E, r24
		if(R_W == 0){
     eb4:	80 91 68 01 	lds	r24, 0x0168
     eb8:	88 23       	and	r24, r24
     eba:	19 f4       	brne	.+6      	; 0xec2 <USART_RXCallback+0x94>
			Data_Count = 0;
     ebc:	10 92 8a 01 	sts	0x018A, r1
     ec0:	08 c0       	rjmp	.+16     	; 0xed2 <USART_RXCallback+0xa4>
		}
		else{
			USART_RX_Flag = 1;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 89 01 	sts	0x0189, r24
			Data_Count++;
     ec8:	80 91 8a 01 	lds	r24, 0x018A
     ecc:	8f 5f       	subi	r24, 0xFF	; 255
     ece:	80 93 8a 01 	sts	0x018A, r24
		}
	}
}
     ed2:	cf 91       	pop	r28
     ed4:	df 91       	pop	r29
     ed6:	08 95       	ret

00000ed8 <APP_voidInit>:
void APP_voidInit(void)
{
     ed8:	df 93       	push	r29
     eda:	cf 93       	push	r28
     edc:	cd b7       	in	r28, 0x3d	; 61
     ede:	de b7       	in	r29, 0x3e	; 62
     ee0:	2e 97       	sbiw	r28, 0x0e	; 14
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	de bf       	out	0x3e, r29	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	cd bf       	out	0x3d, r28	; 61
	// Pin IN/OUT Init
	PORT_voidInit();
     eec:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <PORT_voidInit>

	// Gobale Interrupt Enable
	GIE_voidEnable();
     ef0:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <GIE_voidEnable>
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	a0 ea       	ldi	r26, 0xA0	; 160
     efa:	b1 e4       	ldi	r27, 0x41	; 65
     efc:	8b 87       	std	Y+11, r24	; 0x0b
     efe:	9c 87       	std	Y+12, r25	; 0x0c
     f00:	ad 87       	std	Y+13, r26	; 0x0d
     f02:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f04:	6b 85       	ldd	r22, Y+11	; 0x0b
     f06:	7c 85       	ldd	r23, Y+12	; 0x0c
     f08:	8d 85       	ldd	r24, Y+13	; 0x0d
     f0a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0c:	20 e0       	ldi	r18, 0x00	; 0
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	4a ef       	ldi	r20, 0xFA	; 250
     f12:	54 e4       	ldi	r21, 0x44	; 68
     f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	8f 83       	std	Y+7, r24	; 0x07
     f1e:	98 87       	std	Y+8, r25	; 0x08
     f20:	a9 87       	std	Y+9, r26	; 0x09
     f22:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	40 e8       	ldi	r20, 0x80	; 128
     f32:	5f e3       	ldi	r21, 0x3F	; 63
     f34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f38:	88 23       	and	r24, r24
     f3a:	2c f4       	brge	.+10     	; 0xf46 <APP_voidInit+0x6e>
		__ticks = 1;
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	9e 83       	std	Y+6, r25	; 0x06
     f42:	8d 83       	std	Y+5, r24	; 0x05
     f44:	3f c0       	rjmp	.+126    	; 0xfc4 <APP_voidInit+0xec>
	else if (__tmp > 65535)
     f46:	6f 81       	ldd	r22, Y+7	; 0x07
     f48:	78 85       	ldd	r23, Y+8	; 0x08
     f4a:	89 85       	ldd	r24, Y+9	; 0x09
     f4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	3f ef       	ldi	r19, 0xFF	; 255
     f52:	4f e7       	ldi	r20, 0x7F	; 127
     f54:	57 e4       	ldi	r21, 0x47	; 71
     f56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f5a:	18 16       	cp	r1, r24
     f5c:	4c f5       	brge	.+82     	; 0xfb0 <APP_voidInit+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5e:	6b 85       	ldd	r22, Y+11	; 0x0b
     f60:	7c 85       	ldd	r23, Y+12	; 0x0c
     f62:	8d 85       	ldd	r24, Y+13	; 0x0d
     f64:	9e 85       	ldd	r25, Y+14	; 0x0e
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	40 e2       	ldi	r20, 0x20	; 32
     f6c:	51 e4       	ldi	r21, 0x41	; 65
     f6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f72:	dc 01       	movw	r26, r24
     f74:	cb 01       	movw	r24, r22
     f76:	bc 01       	movw	r22, r24
     f78:	cd 01       	movw	r24, r26
     f7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7e:	dc 01       	movw	r26, r24
     f80:	cb 01       	movw	r24, r22
     f82:	9e 83       	std	Y+6, r25	; 0x06
     f84:	8d 83       	std	Y+5, r24	; 0x05
     f86:	0f c0       	rjmp	.+30     	; 0xfa6 <APP_voidInit+0xce>
     f88:	88 ec       	ldi	r24, 0xC8	; 200
     f8a:	90 e0       	ldi	r25, 0x00	; 0
     f8c:	9c 83       	std	Y+4, r25	; 0x04
     f8e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f90:	8b 81       	ldd	r24, Y+3	; 0x03
     f92:	9c 81       	ldd	r25, Y+4	; 0x04
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	f1 f7       	brne	.-4      	; 0xf94 <APP_voidInit+0xbc>
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9c:	8d 81       	ldd	r24, Y+5	; 0x05
     f9e:	9e 81       	ldd	r25, Y+6	; 0x06
     fa0:	01 97       	sbiw	r24, 0x01	; 1
     fa2:	9e 83       	std	Y+6, r25	; 0x06
     fa4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa6:	8d 81       	ldd	r24, Y+5	; 0x05
     fa8:	9e 81       	ldd	r25, Y+6	; 0x06
     faa:	00 97       	sbiw	r24, 0x00	; 0
     fac:	69 f7       	brne	.-38     	; 0xf88 <APP_voidInit+0xb0>
     fae:	14 c0       	rjmp	.+40     	; 0xfd8 <APP_voidInit+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fb0:	6f 81       	ldd	r22, Y+7	; 0x07
     fb2:	78 85       	ldd	r23, Y+8	; 0x08
     fb4:	89 85       	ldd	r24, Y+9	; 0x09
     fb6:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fbc:	dc 01       	movw	r26, r24
     fbe:	cb 01       	movw	r24, r22
     fc0:	9e 83       	std	Y+6, r25	; 0x06
     fc2:	8d 83       	std	Y+5, r24	; 0x05
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	9a 83       	std	Y+2, r25	; 0x02
     fca:	89 83       	std	Y+1, r24	; 0x01
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	9a 81       	ldd	r25, Y+2	; 0x02
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	f1 f7       	brne	.-4      	; 0xfd0 <APP_voidInit+0xf8>
     fd4:	9a 83       	std	Y+2, r25	; 0x02
     fd6:	89 83       	std	Y+1, r24	; 0x01

	// SPI Init
	//	SPI_voidSetCallBack(SPI_RX);
	_delay_ms(20);
	SPI_voidSlaveInit();
     fd8:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <SPI_voidSlaveInit>
	USART_voidRXCSetCallBack(USART_RXCallback);
     fdc:	87 e1       	ldi	r24, 0x17	; 23
     fde:	97 e0       	ldi	r25, 0x07	; 7
     fe0:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <USART_voidRXCSetCallBack>
	USART_voidEnableRXCInterrupt();
     fe4:	0e 94 3b 0a 	call	0x1476	; 0x1476 <USART_voidEnableRXCInterrupt>
	USART_voidInit();
     fe8:	0e 94 c4 09 	call	0x1388	; 0x1388 <USART_voidInit>
	// LCD
	LCD_voidInit();
     fec:	0e 94 53 15 	call	0x2aa6	; 0x2aa6 <LCD_voidInit>

	// Motor Init
	Motor_voidInit();
     ff0:	0e 94 7f 14 	call	0x28fe	; 0x28fe <Motor_voidInit>
//	Motor_voidSetSpeed(MotorSpeed);

	// LED Init
	LED_voidInit();
     ff4:	0e 94 c9 14 	call	0x2992	; 0x2992 <LED_voidInit>
	LED_voidFRONT(FRONT_LED_STATE);		// Front LED ON
     ff8:	80 91 69 01 	lds	r24, 0x0169
     ffc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LED_voidFRONT>
	LED_voidBACK(BACK_LED_STATE);		// Back LED OFF
    1000:	80 91 8c 01 	lds	r24, 0x018C
    1004:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LED_voidBACK>
}
    1008:	2e 96       	adiw	r28, 0x0e	; 14
    100a:	0f b6       	in	r0, 0x3f	; 63
    100c:	f8 94       	cli
    100e:	de bf       	out	0x3e, r29	; 62
    1010:	0f be       	out	0x3f, r0	; 63
    1012:	cd bf       	out	0x3d, r28	; 61
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <APP_voidStart>:

void APP_voidStart(void)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	00 d0       	rcall	.+0      	; 0x1020 <APP_voidStart+0x6>
    1020:	cd b7       	in	r28, 0x3d	; 61
    1022:	de b7       	in	r29, 0x3e	; 62



	/****************************************************************************/
	// SPI Communication
	if( SPI_RX_Flag == 1 && ((R_W == READ && Data_Count > 1) || (R_W == WRITE && Data_Count == 0)))
    1024:	80 91 88 01 	lds	r24, 0x0188
    1028:	81 30       	cpi	r24, 0x01	; 1
    102a:	09 f0       	breq	.+2      	; 0x102e <APP_voidStart+0x14>
    102c:	be c0       	rjmp	.+380    	; 0x11aa <APP_voidStart+0x190>
    102e:	80 91 68 01 	lds	r24, 0x0168
    1032:	81 30       	cpi	r24, 0x01	; 1
    1034:	21 f4       	brne	.+8      	; 0x103e <APP_voidStart+0x24>
    1036:	80 91 8a 01 	lds	r24, 0x018A
    103a:	82 30       	cpi	r24, 0x02	; 2
    103c:	50 f4       	brcc	.+20     	; 0x1052 <APP_voidStart+0x38>
    103e:	80 91 68 01 	lds	r24, 0x0168
    1042:	88 23       	and	r24, r24
    1044:	09 f0       	breq	.+2      	; 0x1048 <APP_voidStart+0x2e>
    1046:	b1 c0       	rjmp	.+354    	; 0x11aa <APP_voidStart+0x190>
    1048:	80 91 8a 01 	lds	r24, 0x018A
    104c:	88 23       	and	r24, r24
    104e:	09 f0       	breq	.+2      	; 0x1052 <APP_voidStart+0x38>
    1050:	ac c0       	rjmp	.+344    	; 0x11aa <APP_voidStart+0x190>
	{
		SPI_RX_Flag = 0;
    1052:	10 92 88 01 	sts	0x0188, r1
		if(Data_Count == 4){
    1056:	80 91 8a 01 	lds	r24, 0x018A
    105a:	84 30       	cpi	r24, 0x04	; 4
    105c:	11 f4       	brne	.+4      	; 0x1062 <APP_voidStart+0x48>
			Data_Count = 0;
    105e:	10 92 8a 01 	sts	0x018A, r1
		}
		switch (Global_ID)
    1062:	80 91 8b 01 	lds	r24, 0x018B
    1066:	28 2f       	mov	r18, r24
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	3a 83       	std	Y+2, r19	; 0x02
    106c:	29 83       	std	Y+1, r18	; 0x01
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	9a 81       	ldd	r25, Y+2	; 0x02
    1072:	81 30       	cpi	r24, 0x01	; 1
    1074:	91 05       	cpc	r25, r1
    1076:	d9 f1       	breq	.+118    	; 0x10ee <APP_voidStart+0xd4>
    1078:	29 81       	ldd	r18, Y+1	; 0x01
    107a:	3a 81       	ldd	r19, Y+2	; 0x02
    107c:	22 30       	cpi	r18, 0x02	; 2
    107e:	31 05       	cpc	r19, r1
    1080:	2c f4       	brge	.+10     	; 0x108c <APP_voidStart+0x72>
    1082:	89 81       	ldd	r24, Y+1	; 0x01
    1084:	9a 81       	ldd	r25, Y+2	; 0x02
    1086:	00 97       	sbiw	r24, 0x00	; 0
    1088:	71 f0       	breq	.+28     	; 0x10a6 <APP_voidStart+0x8c>
    108a:	8f c0       	rjmp	.+286    	; 0x11aa <APP_voidStart+0x190>
    108c:	29 81       	ldd	r18, Y+1	; 0x01
    108e:	3a 81       	ldd	r19, Y+2	; 0x02
    1090:	22 30       	cpi	r18, 0x02	; 2
    1092:	31 05       	cpc	r19, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <APP_voidStart+0x7e>
    1096:	4f c0       	rjmp	.+158    	; 0x1136 <APP_voidStart+0x11c>
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	91 05       	cpc	r25, r1
    10a0:	09 f4       	brne	.+2      	; 0x10a4 <APP_voidStart+0x8a>
    10a2:	60 c0       	rjmp	.+192    	; 0x1164 <APP_voidStart+0x14a>
    10a4:	82 c0       	rjmp	.+260    	; 0x11aa <APP_voidStart+0x190>
		{

		case FRONT_LED_ID:

			if( R_W == READ )
    10a6:	80 91 68 01 	lds	r24, 0x0168
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	29 f4       	brne	.+10     	; 0x10b8 <APP_voidStart+0x9e>
			{
				SPI_voidSendDataISR(FRONT_LED_STATE);
    10ae:	80 91 69 01 	lds	r24, 0x0169
    10b2:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <SPI_voidSendDataISR>
    10b6:	0c c0       	rjmp	.+24     	; 0x10d0 <APP_voidStart+0xb6>
			}
			else if( R_W == WRITE )
    10b8:	80 91 68 01 	lds	r24, 0x0168
    10bc:	88 23       	and	r24, r24
    10be:	41 f4       	brne	.+16     	; 0x10d0 <APP_voidStart+0xb6>
			{
				FRONT_LED_STATE = state;
    10c0:	80 91 8e 01 	lds	r24, 0x018E
    10c4:	80 93 69 01 	sts	0x0169, r24
				LED_voidFRONT(FRONT_LED_STATE);
    10c8:	80 91 69 01 	lds	r24, 0x0169
    10cc:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LED_voidFRONT>
			}
			else
			{

			}
			LCD_voidGoToPosition(1,1);
    10d0:	81 e0       	ldi	r24, 0x01	; 1
    10d2:	61 e0       	ldi	r22, 0x01	; 1
    10d4:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
			LCD_voidWriteIntData(FRONT_LED_STATE);
    10d8:	80 91 69 01 	lds	r24, 0x0169
    10dc:	88 2f       	mov	r24, r24
    10de:	90 e0       	ldi	r25, 0x00	; 0
    10e0:	a0 e0       	ldi	r26, 0x00	; 0
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	bc 01       	movw	r22, r24
    10e6:	cd 01       	movw	r24, r26
    10e8:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
    10ec:	5e c0       	rjmp	.+188    	; 0x11aa <APP_voidStart+0x190>
			break;

		case BACK_LED_ID:

			if( R_W == READ )
    10ee:	80 91 68 01 	lds	r24, 0x0168
    10f2:	81 30       	cpi	r24, 0x01	; 1
    10f4:	29 f4       	brne	.+10     	; 0x1100 <APP_voidStart+0xe6>
			{
				SPI_voidSendDataISR(BACK_LED_STATE);
    10f6:	80 91 8c 01 	lds	r24, 0x018C
    10fa:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <SPI_voidSendDataISR>
    10fe:	0c c0       	rjmp	.+24     	; 0x1118 <APP_voidStart+0xfe>
			}
			else if( R_W == WRITE )
    1100:	80 91 68 01 	lds	r24, 0x0168
    1104:	88 23       	and	r24, r24
    1106:	41 f4       	brne	.+16     	; 0x1118 <APP_voidStart+0xfe>
			{
				BACK_LED_STATE = state;
    1108:	80 91 8e 01 	lds	r24, 0x018E
    110c:	80 93 8c 01 	sts	0x018C, r24
				LED_voidBACK(BACK_LED_STATE);
    1110:	80 91 8c 01 	lds	r24, 0x018C
    1114:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LED_voidBACK>
			}
			else
			{

			}
			LCD_voidGoToPosition(1,2);
    1118:	81 e0       	ldi	r24, 0x01	; 1
    111a:	62 e0       	ldi	r22, 0x02	; 2
    111c:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
			LCD_voidWriteIntData(BACK_LED_STATE);
    1120:	80 91 8c 01 	lds	r24, 0x018C
    1124:	88 2f       	mov	r24, r24
    1126:	90 e0       	ldi	r25, 0x00	; 0
    1128:	a0 e0       	ldi	r26, 0x00	; 0
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	bc 01       	movw	r22, r24
    112e:	cd 01       	movw	r24, r26
    1130:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
    1134:	3a c0       	rjmp	.+116    	; 0x11aa <APP_voidStart+0x190>
			break;

		case SEAT_ID:

			if( R_W == READ )
    1136:	80 91 68 01 	lds	r24, 0x0168
    113a:	81 30       	cpi	r24, 0x01	; 1
    113c:	21 f4       	brne	.+8      	; 0x1146 <APP_voidStart+0x12c>
			{
				SPI_voidSendDataISR(SeatState);
    113e:	80 91 8d 01 	lds	r24, 0x018D
    1142:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <SPI_voidSendDataISR>
			}
			else
			{

			}
			LCD_voidGoToPosition(1,3);
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	63 e0       	ldi	r22, 0x03	; 3
    114a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
			LCD_voidWriteIntData(SeatState);
    114e:	80 91 8d 01 	lds	r24, 0x018D
    1152:	88 2f       	mov	r24, r24
    1154:	90 e0       	ldi	r25, 0x00	; 0
    1156:	a0 e0       	ldi	r26, 0x00	; 0
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	bc 01       	movw	r22, r24
    115c:	cd 01       	movw	r24, r26
    115e:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
    1162:	23 c0       	rjmp	.+70     	; 0x11aa <APP_voidStart+0x190>
			break;

		case MOTOR_ID:

			if( R_W == READ )
    1164:	80 91 68 01 	lds	r24, 0x0168
    1168:	81 30       	cpi	r24, 0x01	; 1
    116a:	29 f4       	brne	.+10     	; 0x1176 <APP_voidStart+0x15c>
			{
				SPI_voidSendDataISR(MotorSpeed);
    116c:	80 91 6a 01 	lds	r24, 0x016A
    1170:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <SPI_voidSendDataISR>
    1174:	0c c0       	rjmp	.+24     	; 0x118e <APP_voidStart+0x174>
			}
			else if( R_W == WRITE )
    1176:	80 91 68 01 	lds	r24, 0x0168
    117a:	88 23       	and	r24, r24
    117c:	41 f4       	brne	.+16     	; 0x118e <APP_voidStart+0x174>
			{
				MotorSpeed = state;
    117e:	80 91 8e 01 	lds	r24, 0x018E
    1182:	80 93 6a 01 	sts	0x016A, r24
				Motor_voidSetSpeed(MotorSpeed);
    1186:	80 91 6a 01 	lds	r24, 0x016A
    118a:	0e 94 89 14 	call	0x2912	; 0x2912 <Motor_voidSetSpeed>
			}
			else
			{

			}
			LCD_voidGoToPosition(1,4);
    118e:	81 e0       	ldi	r24, 0x01	; 1
    1190:	64 e0       	ldi	r22, 0x04	; 4
    1192:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
			LCD_voidWriteIntData(MotorSpeed);
    1196:	80 91 6a 01 	lds	r24, 0x016A
    119a:	88 2f       	mov	r24, r24
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	a0 e0       	ldi	r26, 0x00	; 0
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	bc 01       	movw	r22, r24
    11a4:	cd 01       	movw	r24, r26
    11a6:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
		default:
			break;
		}
	}

}
    11aa:	0f 90       	pop	r0
    11ac:	0f 90       	pop	r0
    11ae:	cf 91       	pop	r28
    11b0:	df 91       	pop	r29
    11b2:	08 95       	ret

000011b4 <main>:

int main(void)
{
    11b4:	df 93       	push	r29
    11b6:	cf 93       	push	r28
    11b8:	00 d0       	rcall	.+0      	; 0x11ba <main+0x6>
    11ba:	0f 92       	push	r0
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62

	APP_voidInit();
    11c0:	0e 94 6c 07 	call	0xed8	; 0xed8 <APP_voidInit>

	while(1)
	{
		/****************************************************************************/
		// USART Communication
		if( USART_RX_Flag == 1 && ((R_W == READ && Data_Count > 1) || (R_W == WRITE && Data_Count == 0)))
    11c4:	80 91 89 01 	lds	r24, 0x0189
    11c8:	81 30       	cpi	r24, 0x01	; 1
    11ca:	e1 f7       	brne	.-8      	; 0x11c4 <main+0x10>
    11cc:	80 91 68 01 	lds	r24, 0x0168
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	21 f4       	brne	.+8      	; 0x11dc <main+0x28>
    11d4:	80 91 8a 01 	lds	r24, 0x018A
    11d8:	82 30       	cpi	r24, 0x02	; 2
    11da:	40 f4       	brcc	.+16     	; 0x11ec <main+0x38>
    11dc:	80 91 68 01 	lds	r24, 0x0168
    11e0:	88 23       	and	r24, r24
    11e2:	81 f7       	brne	.-32     	; 0x11c4 <main+0x10>
    11e4:	80 91 8a 01 	lds	r24, 0x018A
    11e8:	88 23       	and	r24, r24
    11ea:	61 f7       	brne	.-40     	; 0x11c4 <main+0x10>
		{
			u8 temp = SPI_u8ReadDataISR();
    11ec:	0e 94 a1 0d 	call	0x1b42	; 0x1b42 <SPI_u8ReadDataISR>
    11f0:	89 83       	std	Y+1, r24	; 0x01
			USART_RX_Flag = 0;
    11f2:	10 92 89 01 	sts	0x0189, r1
			if(Data_Count == 4){
    11f6:	80 91 8a 01 	lds	r24, 0x018A
    11fa:	84 30       	cpi	r24, 0x04	; 4
    11fc:	11 f4       	brne	.+4      	; 0x1202 <main+0x4e>
				Data_Count = 0;
    11fe:	10 92 8a 01 	sts	0x018A, r1
			}
			switch (Global_ID)
    1202:	80 91 8b 01 	lds	r24, 0x018B
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	3b 83       	std	Y+3, r19	; 0x03
    120c:	2a 83       	std	Y+2, r18	; 0x02
    120e:	4a 81       	ldd	r20, Y+2	; 0x02
    1210:	5b 81       	ldd	r21, Y+3	; 0x03
    1212:	41 30       	cpi	r20, 0x01	; 1
    1214:	51 05       	cpc	r21, r1
    1216:	09 f4       	brne	.+2      	; 0x121a <main+0x66>
    1218:	40 c0       	rjmp	.+128    	; 0x129a <main+0xe6>
    121a:	8a 81       	ldd	r24, Y+2	; 0x02
    121c:	9b 81       	ldd	r25, Y+3	; 0x03
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	91 05       	cpc	r25, r1
    1222:	34 f4       	brge	.+12     	; 0x1230 <main+0x7c>
    1224:	2a 81       	ldd	r18, Y+2	; 0x02
    1226:	3b 81       	ldd	r19, Y+3	; 0x03
    1228:	21 15       	cp	r18, r1
    122a:	31 05       	cpc	r19, r1
    122c:	71 f0       	breq	.+28     	; 0x124a <main+0x96>
    122e:	ca cf       	rjmp	.-108    	; 0x11c4 <main+0x10>
    1230:	4a 81       	ldd	r20, Y+2	; 0x02
    1232:	5b 81       	ldd	r21, Y+3	; 0x03
    1234:	42 30       	cpi	r20, 0x02	; 2
    1236:	51 05       	cpc	r21, r1
    1238:	09 f4       	brne	.+2      	; 0x123c <main+0x88>
    123a:	57 c0       	rjmp	.+174    	; 0x12ea <main+0x136>
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	9b 81       	ldd	r25, Y+3	; 0x03
    1240:	83 30       	cpi	r24, 0x03	; 3
    1242:	91 05       	cpc	r25, r1
    1244:	09 f4       	brne	.+2      	; 0x1248 <main+0x94>
    1246:	6c c0       	rjmp	.+216    	; 0x1320 <main+0x16c>
    1248:	bd cf       	rjmp	.-134    	; 0x11c4 <main+0x10>
			{

			case FRONT_LED_ID:

				if( R_W == READ )
    124a:	80 91 68 01 	lds	r24, 0x0168
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	49 f4       	brne	.+18     	; 0x1264 <main+0xb0>
				{
					SPI_voidSendDataISR(FRONT_LED_STATE);
    1252:	80 91 69 01 	lds	r24, 0x0169
    1256:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <SPI_voidSendDataISR>
					USART_voidSendInterruptByte(FRONT_LED_STATE);
    125a:	80 91 69 01 	lds	r24, 0x0169
    125e:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <USART_voidSendInterruptByte>
    1262:	0c c0       	rjmp	.+24     	; 0x127c <main+0xc8>
				}
				else if( R_W == WRITE )
    1264:	80 91 68 01 	lds	r24, 0x0168
    1268:	88 23       	and	r24, r24
    126a:	41 f4       	brne	.+16     	; 0x127c <main+0xc8>
				{
					FRONT_LED_STATE = state;
    126c:	80 91 8e 01 	lds	r24, 0x018E
    1270:	80 93 69 01 	sts	0x0169, r24
					LED_voidFRONT(FRONT_LED_STATE);
    1274:	80 91 69 01 	lds	r24, 0x0169
    1278:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LED_voidFRONT>
				}
				else
				{

				}
				LCD_voidGoToPosition(1,1);
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	61 e0       	ldi	r22, 0x01	; 1
    1280:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
				LCD_voidWriteIntData(FRONT_LED_STATE);
    1284:	80 91 69 01 	lds	r24, 0x0169
    1288:	88 2f       	mov	r24, r24
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	a0 e0       	ldi	r26, 0x00	; 0
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	bc 01       	movw	r22, r24
    1292:	cd 01       	movw	r24, r26
    1294:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
    1298:	95 cf       	rjmp	.-214    	; 0x11c4 <main+0x10>
				break;

			case BACK_LED_ID:

				if( R_W == READ )
    129a:	80 91 68 01 	lds	r24, 0x0168
    129e:	81 30       	cpi	r24, 0x01	; 1
    12a0:	49 f4       	brne	.+18     	; 0x12b4 <main+0x100>
				{
					SPI_voidSendDataISR(BACK_LED_STATE);
    12a2:	80 91 8c 01 	lds	r24, 0x018C
    12a6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <SPI_voidSendDataISR>
					USART_voidSendInterruptByte(BACK_LED_STATE);
    12aa:	80 91 8c 01 	lds	r24, 0x018C
    12ae:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <USART_voidSendInterruptByte>
    12b2:	0c c0       	rjmp	.+24     	; 0x12cc <main+0x118>
				}
				else if( R_W == WRITE )
    12b4:	80 91 68 01 	lds	r24, 0x0168
    12b8:	88 23       	and	r24, r24
    12ba:	41 f4       	brne	.+16     	; 0x12cc <main+0x118>
				{
					BACK_LED_STATE = state;
    12bc:	80 91 8e 01 	lds	r24, 0x018E
    12c0:	80 93 8c 01 	sts	0x018C, r24
					LED_voidBACK(BACK_LED_STATE);
    12c4:	80 91 8c 01 	lds	r24, 0x018C
    12c8:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LED_voidBACK>
				}
				else
				{

				}
				LCD_voidGoToPosition(1,2);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	62 e0       	ldi	r22, 0x02	; 2
    12d0:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
				LCD_voidWriteIntData(BACK_LED_STATE);
    12d4:	80 91 8c 01 	lds	r24, 0x018C
    12d8:	88 2f       	mov	r24, r24
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b0 e0       	ldi	r27, 0x00	; 0
    12e0:	bc 01       	movw	r22, r24
    12e2:	cd 01       	movw	r24, r26
    12e4:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
    12e8:	6d cf       	rjmp	.-294    	; 0x11c4 <main+0x10>
				break;

			case SEAT_ID:

				if( R_W == READ )
    12ea:	80 91 68 01 	lds	r24, 0x0168
    12ee:	81 30       	cpi	r24, 0x01	; 1
    12f0:	41 f4       	brne	.+16     	; 0x1302 <main+0x14e>
				{
					SPI_voidSendDataISR(SeatState);
    12f2:	80 91 8d 01 	lds	r24, 0x018D
    12f6:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <SPI_voidSendDataISR>
					USART_voidSendInterruptByte(SeatState);
    12fa:	80 91 8d 01 	lds	r24, 0x018D
    12fe:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <USART_voidSendInterruptByte>
				}
				else
				{

				}
				LCD_voidGoToPosition(1,3);
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	63 e0       	ldi	r22, 0x03	; 3
    1306:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
				LCD_voidWriteIntData(SeatState);
    130a:	80 91 8d 01 	lds	r24, 0x018D
    130e:	88 2f       	mov	r24, r24
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	a0 e0       	ldi	r26, 0x00	; 0
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	bc 01       	movw	r22, r24
    1318:	cd 01       	movw	r24, r26
    131a:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
    131e:	52 cf       	rjmp	.-348    	; 0x11c4 <main+0x10>
				break;

			case MOTOR_ID:

				if( R_W == READ )
    1320:	80 91 68 01 	lds	r24, 0x0168
    1324:	81 30       	cpi	r24, 0x01	; 1
    1326:	49 f4       	brne	.+18     	; 0x133a <main+0x186>
				{
					SPI_voidSendDataISR(MotorSpeed);
    1328:	80 91 6a 01 	lds	r24, 0x016A
    132c:	0e 94 ab 0d 	call	0x1b56	; 0x1b56 <SPI_voidSendDataISR>
					USART_voidSendInterruptByte(MotorSpeed);
    1330:	80 91 6a 01 	lds	r24, 0x016A
    1334:	0e 94 71 0a 	call	0x14e2	; 0x14e2 <USART_voidSendInterruptByte>
    1338:	18 c0       	rjmp	.+48     	; 0x136a <main+0x1b6>
				}
				else if( R_W == WRITE )
    133a:	80 91 68 01 	lds	r24, 0x0168
    133e:	88 23       	and	r24, r24
    1340:	a1 f4       	brne	.+40     	; 0x136a <main+0x1b6>
				{
					MotorSpeed = state * 50;
    1342:	80 91 8e 01 	lds	r24, 0x018E
    1346:	28 2f       	mov	r18, r24
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	82 e3       	ldi	r24, 0x32	; 50
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	ac 01       	movw	r20, r24
    1350:	24 9f       	mul	r18, r20
    1352:	c0 01       	movw	r24, r0
    1354:	25 9f       	mul	r18, r21
    1356:	90 0d       	add	r25, r0
    1358:	34 9f       	mul	r19, r20
    135a:	90 0d       	add	r25, r0
    135c:	11 24       	eor	r1, r1
    135e:	80 93 6a 01 	sts	0x016A, r24
					Motor_voidSetSpeed(MotorSpeed);
    1362:	80 91 6a 01 	lds	r24, 0x016A
    1366:	0e 94 89 14 	call	0x2912	; 0x2912 <Motor_voidSetSpeed>
				}
				else
				{

				}
				LCD_voidGoToPosition(1,4);
    136a:	81 e0       	ldi	r24, 0x01	; 1
    136c:	64 e0       	ldi	r22, 0x04	; 4
    136e:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
				LCD_voidWriteIntData(MotorSpeed);
    1372:	80 91 6a 01 	lds	r24, 0x016A
    1376:	88 2f       	mov	r24, r24
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	a0 e0       	ldi	r26, 0x00	; 0
    137c:	b0 e0       	ldi	r27, 0x00	; 0
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <LCD_voidWriteIntData>
    1386:	1e cf       	rjmp	.-452    	; 0x11c4 <main+0x10>

00001388 <USART_voidInit>:
static void (*Global_UDRECallBack)(void)= NULL;
static void (*Global_RXCCallBack)(void)= NULL;


void USART_voidInit()
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
	 * UPM1:0 = 0 (Disable parity)
	 * USBS   = 0 (One bit stop bit)
	 * UCSZ1  = UCSZ0 = 1 (8-bit data size)
	 * UCPOL  = 0  (0 for Asynch. mode)
	 */
	SET_BIT(UCSRC, UCSRC_URSEL);
    1390:	a0 e4       	ldi	r26, 0x40	; 64
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	e0 e4       	ldi	r30, 0x40	; 64
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 68       	ori	r24, 0x80	; 128
    139c:	8c 93       	st	X, r24

#if MODE_OF_OPERATION == USART_ASYNCHRONOUS
	CLR_BIT(UCSRC, UCSRC_UMSEL);
    139e:	a0 e4       	ldi	r26, 0x40	; 64
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e0 e4       	ldi	r30, 0x40	; 64
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	8f 7b       	andi	r24, 0xBF	; 191
    13aa:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UCPOL);
    13ac:	a0 e4       	ldi	r26, 0x40	; 64
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e0 e4       	ldi	r30, 0x40	; 64
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	8e 7f       	andi	r24, 0xFE	; 254
    13b8:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UCPOL);
#endif
#endif

#if FRAME_SIZE == 8
	SET_BIT(UCSRC, UCSRC_UCSZ0);
    13ba:	a0 e4       	ldi	r26, 0x40	; 64
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	e0 e4       	ldi	r30, 0x40	; 64
    13c0:	f0 e0       	ldi	r31, 0x00	; 0
    13c2:	80 81       	ld	r24, Z
    13c4:	82 60       	ori	r24, 0x02	; 2
    13c6:	8c 93       	st	X, r24
	SET_BIT(UCSRC, UCSRC_UCSZ1);
    13c8:	a0 e4       	ldi	r26, 0x40	; 64
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	e0 e4       	ldi	r30, 0x40	; 64
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	80 81       	ld	r24, Z
    13d2:	84 60       	ori	r24, 0x04	; 4
    13d4:	8c 93       	st	X, r24
#endif

#if PARITY_MODE == USART_PARITY_DISABLED
	CLR_BIT(UCSRC, UCSRC_UPM1);
    13d6:	a0 e4       	ldi	r26, 0x40	; 64
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	e0 e4       	ldi	r30, 0x40	; 64
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	80 81       	ld	r24, Z
    13e0:	8f 7d       	andi	r24, 0xDF	; 223
    13e2:	8c 93       	st	X, r24
	CLR_BIT(UCSRC, UCSRC_UPM0);
    13e4:	a0 e4       	ldi	r26, 0x40	; 64
    13e6:	b0 e0       	ldi	r27, 0x00	; 0
    13e8:	e0 e4       	ldi	r30, 0x40	; 64
    13ea:	f0 e0       	ldi	r31, 0x00	; 0
    13ec:	80 81       	ld	r24, Z
    13ee:	8f 7e       	andi	r24, 0xEF	; 239
    13f0:	8c 93       	st	X, r24
#endif

#if STOP_BIT_SELECT == USART_STOP_2BIT
	SET_BIT(UCSRC, UCSRC_USBS);
#elif STOP_BIT_SELECT == USART_STOP_1BIT
	CLR_BIT(UCSRC, UCSRC_USBS);
    13f2:	a0 e4       	ldi	r26, 0x40	; 64
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	e0 e4       	ldi	r30, 0x40	; 64
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	87 7f       	andi	r24, 0xF7	; 247
    13fe:	8c 93       	st	X, r24
#endif

	/* Write data in UBRR*/
	CLR_BIT(UCSRC, UCSRC_URSEL);
    1400:	a0 e4       	ldi	r26, 0x40	; 64
    1402:	b0 e0       	ldi	r27, 0x00	; 0
    1404:	e0 e4       	ldi	r30, 0x40	; 64
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	80 81       	ld	r24, Z
    140a:	8f 77       	andi	r24, 0x7F	; 127
    140c:	8c 93       	st	X, r24

	UCSRC = 0; // writing to UBRRH
    140e:	e0 e4       	ldi	r30, 0x40	; 64
    1410:	f0 e0       	ldi	r31, 0x00	; 0
    1412:	10 82       	st	Z, r1
	UBRRL = UBRR_VALUE;
    1414:	e9 e2       	ldi	r30, 0x29	; 41
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	83 e3       	ldi	r24, 0x33	; 51
    141a:	80 83       	st	Z, r24
	/* RXCIE = TXCIE = UDRIE = 0  (No interrupt Mode)
	 * RXEN = TXEN = 1 (Enable receive and transmit)
	 * UCSZ2 = 0 (8-bit data size)
	 * RXB8 & TXB8 not used
	 */
	SET_BIT(UCSRB, UCSRB_RXEN);
    141c:	aa e2       	ldi	r26, 0x2A	; 42
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	ea e2       	ldi	r30, 0x2A	; 42
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	80 61       	ori	r24, 0x10	; 16
    1428:	8c 93       	st	X, r24
	SET_BIT(UCSRB, UCSRB_TXEN);
    142a:	aa e2       	ldi	r26, 0x2A	; 42
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	ea e2       	ldi	r30, 0x2A	; 42
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	88 60       	ori	r24, 0x08	; 8
    1436:	8c 93       	st	X, r24
}
    1438:	cf 91       	pop	r28
    143a:	df 91       	pop	r29
    143c:	08 95       	ret

0000143e <USART_voidEnableUDREInterrupt>:


void USART_voidEnableUDREInterrupt(){
    143e:	df 93       	push	r29
    1440:	cf 93       	push	r28
    1442:	cd b7       	in	r28, 0x3d	; 61
    1444:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_UDRIE);
    1446:	aa e2       	ldi	r26, 0x2A	; 42
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	ea e2       	ldi	r30, 0x2A	; 42
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	80 62       	ori	r24, 0x20	; 32
    1452:	8c 93       	st	X, r24
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <USART_voidDisableUDREInterrupt>:

void USART_voidDisableUDREInterrupt(){
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_UDRIE);
    1462:	aa e2       	ldi	r26, 0x2A	; 42
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ea e2       	ldi	r30, 0x2A	; 42
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	8f 7d       	andi	r24, 0xDF	; 223
    146e:	8c 93       	st	X, r24
}
    1470:	cf 91       	pop	r28
    1472:	df 91       	pop	r29
    1474:	08 95       	ret

00001476 <USART_voidEnableRXCInterrupt>:

void USART_voidEnableRXCInterrupt(){
    1476:	df 93       	push	r29
    1478:	cf 93       	push	r28
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(UCSRB,UCSRB_RXCIE);
    147e:	aa e2       	ldi	r26, 0x2A	; 42
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ea e2       	ldi	r30, 0x2A	; 42
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	80 68       	ori	r24, 0x80	; 128
    148a:	8c 93       	st	X, r24
}
    148c:	cf 91       	pop	r28
    148e:	df 91       	pop	r29
    1490:	08 95       	ret

00001492 <USART_voidDisableRXCInterrupt>:

void USART_voidDisableRXCInterrupt(){
    1492:	df 93       	push	r29
    1494:	cf 93       	push	r28
    1496:	cd b7       	in	r28, 0x3d	; 61
    1498:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(UCSRB,UCSRB_RXCIE);
    149a:	aa e2       	ldi	r26, 0x2A	; 42
    149c:	b0 e0       	ldi	r27, 0x00	; 0
    149e:	ea e2       	ldi	r30, 0x2A	; 42
    14a0:	f0 e0       	ldi	r31, 0x00	; 0
    14a2:	80 81       	ld	r24, Z
    14a4:	8f 77       	andi	r24, 0x7F	; 127
    14a6:	8c 93       	st	X, r24
}
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <USART_voidSendByte>:

void USART_voidSendByte(const u8 data)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	0f 92       	push	r0
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	89 83       	std	Y+1, r24	; 0x01
	/*UDRE is 1 once UDR register is empty*/
	while(!GET_BIT(UCSRA,UCSRA_UDRE));
    14ba:	eb e2       	ldi	r30, 0x2B	; 43
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	82 95       	swap	r24
    14c2:	86 95       	lsr	r24
    14c4:	87 70       	andi	r24, 0x07	; 7
    14c6:	88 2f       	mov	r24, r24
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	81 70       	andi	r24, 0x01	; 1
    14cc:	90 70       	andi	r25, 0x00	; 0
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	a1 f3       	breq	.-24     	; 0x14ba <USART_voidSendByte+0xc>
	/*Once polling finished (UDR is empty) load ur new data in the UDR register*/
	UDR = data;
    14d2:	ec e2       	ldi	r30, 0x2C	; 44
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	89 81       	ldd	r24, Y+1	; 0x01
    14d8:	80 83       	st	Z, r24
}
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <USART_voidSendInterruptByte>:

void USART_voidSendInterruptByte(const u8 data){
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	0f 92       	push	r0
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	89 83       	std	Y+1, r24	; 0x01
	UDR = data;
    14ee:	ec e2       	ldi	r30, 0x2C	; 44
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	89 81       	ldd	r24, Y+1	; 0x01
    14f4:	80 83       	st	Z, r24
}
    14f6:	0f 90       	pop	r0
    14f8:	cf 91       	pop	r28
    14fa:	df 91       	pop	r29
    14fc:	08 95       	ret

000014fe <USART_u8ReceiveInterruptByte>:

u8 USART_u8ReceiveInterruptByte(){
    14fe:	df 93       	push	r29
    1500:	cf 93       	push	r28
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    1506:	ec e2       	ldi	r30, 0x2C	; 44
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	80 81       	ld	r24, Z
}
    150c:	cf 91       	pop	r28
    150e:	df 91       	pop	r29
    1510:	08 95       	ret

00001512 <USART_u8ReceiveByte>:

u8 USART_u8ReceiveByte()
{
    1512:	df 93       	push	r29
    1514:	cf 93       	push	r28
    1516:	cd b7       	in	r28, 0x3d	; 61
    1518:	de b7       	in	r29, 0x3e	; 62
	while(!GET_BIT(UCSRA, UCSRA_RXC));
    151a:	eb e2       	ldi	r30, 0x2B	; 43
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	88 23       	and	r24, r24
    1522:	dc f7       	brge	.-10     	; 0x151a <USART_u8ReceiveByte+0x8>
	return UDR;
    1524:	ec e2       	ldi	r30, 0x2C	; 44
    1526:	f0 e0       	ldi	r31, 0x00	; 0
    1528:	80 81       	ld	r24, Z
}
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	08 95       	ret

00001530 <USART_voidSendString>:

void USART_voidSendString(const u8* str)
{
    1530:	df 93       	push	r29
    1532:	cf 93       	push	r28
    1534:	00 d0       	rcall	.+0      	; 0x1536 <USART_voidSendString+0x6>
    1536:	cd b7       	in	r28, 0x3d	; 61
    1538:	de b7       	in	r29, 0x3e	; 62
    153a:	9a 83       	std	Y+2, r25	; 0x02
    153c:	89 83       	std	Y+1, r24	; 0x01
    153e:	0a c0       	rjmp	.+20     	; 0x1554 <USART_voidSendString+0x24>
	while(*str != '\0')
	{
		USART_voidSendByte(*str);
    1540:	e9 81       	ldd	r30, Y+1	; 0x01
    1542:	fa 81       	ldd	r31, Y+2	; 0x02
    1544:	80 81       	ld	r24, Z
    1546:	0e 94 57 0a 	call	0x14ae	; 0x14ae <USART_voidSendByte>
		str++;
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	9a 81       	ldd	r25, Y+2	; 0x02
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	89 83       	std	Y+1, r24	; 0x01
	return UDR;
}

void USART_voidSendString(const u8* str)
{
	while(*str != '\0')
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	80 81       	ld	r24, Z
    155a:	88 23       	and	r24, r24
    155c:	89 f7       	brne	.-30     	; 0x1540 <USART_voidSendString+0x10>
	{
		USART_voidSendByte(*str);
		str++;
	}
}
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <USART_voidReceiveString>:

void USART_voidReceiveString(u8* str)
{
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	df 93       	push	r29
    156e:	cf 93       	push	r28
    1570:	00 d0       	rcall	.+0      	; 0x1572 <USART_voidReceiveString+0xa>
    1572:	0f 92       	push	r0
    1574:	cd b7       	in	r28, 0x3d	; 61
    1576:	de b7       	in	r29, 0x3e	; 62
    1578:	9b 83       	std	Y+3, r25	; 0x03
    157a:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    157c:	19 82       	std	Y+1, r1	; 0x01
    157e:	0f c0       	rjmp	.+30     	; 0x159e <USART_voidReceiveString+0x36>
	while(str[i] != '\0')
	{
		str[i++] = USART_u8ReceiveByte();
    1580:	89 81       	ldd	r24, Y+1	; 0x01
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	9b 81       	ldd	r25, Y+3	; 0x03
    158a:	8c 01       	movw	r16, r24
    158c:	02 0f       	add	r16, r18
    158e:	13 1f       	adc	r17, r19
    1590:	0e 94 89 0a 	call	0x1512	; 0x1512 <USART_u8ReceiveByte>
    1594:	f8 01       	movw	r30, r16
    1596:	80 83       	st	Z, r24
    1598:	89 81       	ldd	r24, Y+1	; 0x01
    159a:	8f 5f       	subi	r24, 0xFF	; 255
    159c:	89 83       	std	Y+1, r24	; 0x01
}

void USART_voidReceiveString(u8* str)
{
	u8 i = 0;
	while(str[i] != '\0')
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	8a 81       	ldd	r24, Y+2	; 0x02
    15a6:	9b 81       	ldd	r25, Y+3	; 0x03
    15a8:	fc 01       	movw	r30, r24
    15aa:	e2 0f       	add	r30, r18
    15ac:	f3 1f       	adc	r31, r19
    15ae:	80 81       	ld	r24, Z
    15b0:	88 23       	and	r24, r24
    15b2:	31 f7       	brne	.-52     	; 0x1580 <USART_voidReceiveString+0x18>
	{
		str[i++] = USART_u8ReceiveByte();
	}
	str[i]= '\0';
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	9b 81       	ldd	r25, Y+3	; 0x03
    15be:	fc 01       	movw	r30, r24
    15c0:	e2 0f       	add	r30, r18
    15c2:	f3 1f       	adc	r31, r19
    15c4:	10 82       	st	Z, r1
}
    15c6:	0f 90       	pop	r0
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	08 95       	ret

000015d6 <USART_voidRXCSetCallBack>:

void USART_voidRXCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    15d6:	df 93       	push	r29
    15d8:	cf 93       	push	r28
    15da:	00 d0       	rcall	.+0      	; 0x15dc <USART_voidRXCSetCallBack+0x6>
    15dc:	cd b7       	in	r28, 0x3d	; 61
    15de:	de b7       	in	r29, 0x3e	; 62
    15e0:	9a 83       	std	Y+2, r25	; 0x02
    15e2:	89 83       	std	Y+1, r24	; 0x01
	Global_RXCCallBack = Copy_pvCallBackFunc;
    15e4:	89 81       	ldd	r24, Y+1	; 0x01
    15e6:	9a 81       	ldd	r25, Y+2	; 0x02
    15e8:	90 93 92 01 	sts	0x0192, r25
    15ec:	80 93 91 01 	sts	0x0191, r24
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	cf 91       	pop	r28
    15f6:	df 91       	pop	r29
    15f8:	08 95       	ret

000015fa <USART_voidUDRESetCallBack>:

void USART_voidUDRESetCallBack(void (*Copy_pvCallBackFunc)(void)){
    15fa:	df 93       	push	r29
    15fc:	cf 93       	push	r28
    15fe:	00 d0       	rcall	.+0      	; 0x1600 <USART_voidUDRESetCallBack+0x6>
    1600:	cd b7       	in	r28, 0x3d	; 61
    1602:	de b7       	in	r29, 0x3e	; 62
    1604:	9a 83       	std	Y+2, r25	; 0x02
    1606:	89 83       	std	Y+1, r24	; 0x01
	Global_UDRECallBack = Copy_pvCallBackFunc;
    1608:	89 81       	ldd	r24, Y+1	; 0x01
    160a:	9a 81       	ldd	r25, Y+2	; 0x02
    160c:	90 93 90 01 	sts	0x0190, r25
    1610:	80 93 8f 01 	sts	0x018F, r24
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <__vector_13>:

void  __vector_13 (void)	__attribute__((signal));
void  __vector_13 (void)
{
    161e:	1f 92       	push	r1
    1620:	0f 92       	push	r0
    1622:	0f b6       	in	r0, 0x3f	; 63
    1624:	0f 92       	push	r0
    1626:	11 24       	eor	r1, r1
    1628:	2f 93       	push	r18
    162a:	3f 93       	push	r19
    162c:	4f 93       	push	r20
    162e:	5f 93       	push	r21
    1630:	6f 93       	push	r22
    1632:	7f 93       	push	r23
    1634:	8f 93       	push	r24
    1636:	9f 93       	push	r25
    1638:	af 93       	push	r26
    163a:	bf 93       	push	r27
    163c:	ef 93       	push	r30
    163e:	ff 93       	push	r31
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	cd b7       	in	r28, 0x3d	; 61
    1646:	de b7       	in	r29, 0x3e	; 62
	if(Global_RXCCallBack != NULL)
    1648:	80 91 91 01 	lds	r24, 0x0191
    164c:	90 91 92 01 	lds	r25, 0x0192
    1650:	00 97       	sbiw	r24, 0x00	; 0
    1652:	29 f0       	breq	.+10     	; 0x165e <__vector_13+0x40>
	{
		Global_RXCCallBack();
    1654:	e0 91 91 01 	lds	r30, 0x0191
    1658:	f0 91 92 01 	lds	r31, 0x0192
    165c:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	ff 91       	pop	r31
    1664:	ef 91       	pop	r30
    1666:	bf 91       	pop	r27
    1668:	af 91       	pop	r26
    166a:	9f 91       	pop	r25
    166c:	8f 91       	pop	r24
    166e:	7f 91       	pop	r23
    1670:	6f 91       	pop	r22
    1672:	5f 91       	pop	r21
    1674:	4f 91       	pop	r20
    1676:	3f 91       	pop	r19
    1678:	2f 91       	pop	r18
    167a:	0f 90       	pop	r0
    167c:	0f be       	out	0x3f, r0	; 63
    167e:	0f 90       	pop	r0
    1680:	1f 90       	pop	r1
    1682:	18 95       	reti

00001684 <__vector_14>:


void  __vector_14 (void)	__attribute__((signal));
void  __vector_14 (void)
{
    1684:	1f 92       	push	r1
    1686:	0f 92       	push	r0
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	0f 92       	push	r0
    168c:	11 24       	eor	r1, r1
    168e:	2f 93       	push	r18
    1690:	3f 93       	push	r19
    1692:	4f 93       	push	r20
    1694:	5f 93       	push	r21
    1696:	6f 93       	push	r22
    1698:	7f 93       	push	r23
    169a:	8f 93       	push	r24
    169c:	9f 93       	push	r25
    169e:	af 93       	push	r26
    16a0:	bf 93       	push	r27
    16a2:	ef 93       	push	r30
    16a4:	ff 93       	push	r31
    16a6:	df 93       	push	r29
    16a8:	cf 93       	push	r28
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
	if(Global_UDRECallBack != NULL)
    16ae:	80 91 8f 01 	lds	r24, 0x018F
    16b2:	90 91 90 01 	lds	r25, 0x0190
    16b6:	00 97       	sbiw	r24, 0x00	; 0
    16b8:	29 f0       	breq	.+10     	; 0x16c4 <__vector_14+0x40>
	{
		Global_UDRECallBack();
    16ba:	e0 91 8f 01 	lds	r30, 0x018F
    16be:	f0 91 90 01 	lds	r31, 0x0190
    16c2:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	ff 91       	pop	r31
    16ca:	ef 91       	pop	r30
    16cc:	bf 91       	pop	r27
    16ce:	af 91       	pop	r26
    16d0:	9f 91       	pop	r25
    16d2:	8f 91       	pop	r24
    16d4:	7f 91       	pop	r23
    16d6:	6f 91       	pop	r22
    16d8:	5f 91       	pop	r21
    16da:	4f 91       	pop	r20
    16dc:	3f 91       	pop	r19
    16de:	2f 91       	pop	r18
    16e0:	0f 90       	pop	r0
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	0f 90       	pop	r0
    16e6:	1f 90       	pop	r1
    16e8:	18 95       	reti

000016ea <TIMER1_voidInit>:

static void (*Global_pvTimerICUCallBack)(void)= NULL;
static void (*Global_pvTimerCTCCallBack)(void)= NULL;

void TIMER1_voidInit()
{
    16ea:	df 93       	push	r29
    16ec:	cf 93       	push	r28
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
	//Configure TIMER1
	TCCR1A = 0;
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	10 82       	st	Z, r1
	TCCR1B = 0;
    16f8:	ee e4       	ldi	r30, 0x4E	; 78
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	10 82       	st	Z, r1

#if PWM_MODE	== TIMER1_FPWM

#if INVERTING_MODE == TIMER1_Noninverting
	//NON Inverted PWM
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    16fe:	af e4       	ldi	r26, 0x4F	; 79
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	ef e4       	ldi	r30, 0x4F	; 79
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	80 68       	ori	r24, 0x80	; 128
    170a:	8c 93       	st	X, r24
	Clear_Bit(TCCR1A,TCCR1A_COM1A0);
    170c:	af e4       	ldi	r26, 0x4F	; 79
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	ef e4       	ldi	r30, 0x4F	; 79
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	8f 7b       	andi	r24, 0xBF	; 191
    1718:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
    171a:	af e4       	ldi	r26, 0x4F	; 79
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	ef e4       	ldi	r30, 0x4F	; 79
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	80 62       	ori	r24, 0x20	; 32
    1726:	8c 93       	st	X, r24
	Clear_Bit(TCCR1A,TCCR1A_COM1B0);
    1728:	af e4       	ldi	r26, 0x4F	; 79
    172a:	b0 e0       	ldi	r27, 0x00	; 0
    172c:	ef e4       	ldi	r30, 0x4F	; 79
    172e:	f0 e0       	ldi	r31, 0x00	; 0
    1730:	80 81       	ld	r24, Z
    1732:	8f 7e       	andi	r24, 0xEF	; 239
    1734:	8c 93       	st	X, r24

	//MODE 14(FAST PWM)
	Clear_Bit(TCCR1A,TCCR1A_WGM10);
    1736:	af e4       	ldi	r26, 0x4F	; 79
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	ef e4       	ldi	r30, 0x4F	; 79
    173c:	f0 e0       	ldi	r31, 0x00	; 0
    173e:	80 81       	ld	r24, Z
    1740:	8e 7f       	andi	r24, 0xFE	; 254
    1742:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_WGM11);
    1744:	af e4       	ldi	r26, 0x4F	; 79
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	ef e4       	ldi	r30, 0x4F	; 79
    174a:	f0 e0       	ldi	r31, 0x00	; 0
    174c:	80 81       	ld	r24, Z
    174e:	82 60       	ori	r24, 0x02	; 2
    1750:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM12);
    1752:	ae e4       	ldi	r26, 0x4E	; 78
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ee e4       	ldi	r30, 0x4E	; 78
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	88 60       	ori	r24, 0x08	; 8
    175e:	8c 93       	st	X, r24
	SET_BIT(TCCR1B,TCCR1B_WGM13);
    1760:	ae e4       	ldi	r26, 0x4E	; 78
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	ee e4       	ldi	r30, 0x4E	; 78
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	80 61       	ori	r24, 0x10	; 16
    176c:	8c 93       	st	X, r24

	/* Enable ICU Interrupt*/
	SET_BIT(TIMSK,TIMSK_TICIE1);
#endif

	Clear_Bit(TCCR1B,TCCR1B_CS10);
    176e:	ae e4       	ldi	r26, 0x4E	; 78
    1770:	b0 e0       	ldi	r27, 0x00	; 0
    1772:	ee e4       	ldi	r30, 0x4E	; 78
    1774:	f0 e0       	ldi	r31, 0x00	; 0
    1776:	80 81       	ld	r24, Z
    1778:	8e 7f       	andi	r24, 0xFE	; 254
    177a:	8c 93       	st	X, r24
	Set_Bit(TCCR1B,TCCR1B_CS11);
    177c:	ae e4       	ldi	r26, 0x4E	; 78
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	ee e4       	ldi	r30, 0x4E	; 78
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	82 60       	ori	r24, 0x02	; 2
    1788:	8c 93       	st	X, r24
	Clear_Bit(TCCR1B,TCCR1B_CS12);
    178a:	ae e4       	ldi	r26, 0x4E	; 78
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	ee e4       	ldi	r30, 0x4E	; 78
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8b 7f       	andi	r24, 0xFB	; 251
    1796:	8c 93       	st	X, r24

}
    1798:	cf 91       	pop	r28
    179a:	df 91       	pop	r29
    179c:	08 95       	ret

0000179e <TIMER1_voidSetICR>:

void TIMER1_voidSetICR(u16 value)
{
    179e:	df 93       	push	r29
    17a0:	cf 93       	push	r28
    17a2:	00 d0       	rcall	.+0      	; 0x17a4 <TIMER1_voidSetICR+0x6>
    17a4:	cd b7       	in	r28, 0x3d	; 61
    17a6:	de b7       	in	r29, 0x3e	; 62
    17a8:	9a 83       	std	Y+2, r25	; 0x02
    17aa:	89 83       	std	Y+1, r24	; 0x01
	ICR1 = value;
    17ac:	e6 e4       	ldi	r30, 0x46	; 70
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	91 83       	std	Z+1, r25	; 0x01
    17b6:	80 83       	st	Z, r24
}
    17b8:	0f 90       	pop	r0
    17ba:	0f 90       	pop	r0
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <TIMER1_voidSetTimerValue>:

void TIMER1_voidSetTimerValue(u16 value)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <TIMER1_voidSetTimerValue+0x6>
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
    17cc:	9a 83       	std	Y+2, r25	; 0x02
    17ce:	89 83       	std	Y+1, r24	; 0x01
	TCNT1 = value;
    17d0:	ec e4       	ldi	r30, 0x4C	; 76
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	9a 81       	ldd	r25, Y+2	; 0x02
    17d8:	91 83       	std	Z+1, r25	; 0x01
    17da:	80 83       	st	Z, r24
}
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	cf 91       	pop	r28
    17e2:	df 91       	pop	r29
    17e4:	08 95       	ret

000017e6 <TIMER1_u16ReadTimerValue>:
u16 TIMER1_u16ReadTimerValue()
{
    17e6:	df 93       	push	r29
    17e8:	cf 93       	push	r28
    17ea:	cd b7       	in	r28, 0x3d	; 61
    17ec:	de b7       	in	r29, 0x3e	; 62
	return TCNT1;
    17ee:	ec e4       	ldi	r30, 0x4C	; 76
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	91 81       	ldd	r25, Z+1	; 0x01
}
    17f6:	cf 91       	pop	r28
    17f8:	df 91       	pop	r29
    17fa:	08 95       	ret

000017fc <TIMER1_voidSetDutyCycle>:

void TIMER1_voidSetDutyCycle(u16 duty)
{
    17fc:	df 93       	push	r29
    17fe:	cf 93       	push	r28
    1800:	00 d0       	rcall	.+0      	; 0x1802 <TIMER1_voidSetDutyCycle+0x6>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
    1806:	9a 83       	std	Y+2, r25	; 0x02
    1808:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty;
    180a:	ea e4       	ldi	r30, 0x4A	; 74
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	89 81       	ldd	r24, Y+1	; 0x01
    1810:	9a 81       	ldd	r25, Y+2	; 0x02
    1812:	91 83       	std	Z+1, r25	; 0x01
    1814:	80 83       	st	Z, r24
}
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <TIMER1_voidStop>:

void TIMER1_voidStop()
{
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1828:	ec e4       	ldi	r30, 0x4C	; 76
    182a:	f0 e0       	ldi	r31, 0x00	; 0
    182c:	11 82       	std	Z+1, r1	; 0x01
    182e:	10 82       	st	Z, r1

	Clear_Bit(TCCR1B,TCCR1B_CS10);
    1830:	ae e4       	ldi	r26, 0x4E	; 78
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ee e4       	ldi	r30, 0x4E	; 78
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8e 7f       	andi	r24, 0xFE	; 254
    183c:	8c 93       	st	X, r24
	Clear_Bit(TCCR1B,TCCR1B_CS11);
    183e:	ae e4       	ldi	r26, 0x4E	; 78
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ee e4       	ldi	r30, 0x4E	; 78
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	8d 7f       	andi	r24, 0xFD	; 253
    184a:	8c 93       	st	X, r24
	Clear_Bit(TCCR1B,TCCR1B_CS12);
    184c:	ae e4       	ldi	r26, 0x4E	; 78
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	ee e4       	ldi	r30, 0x4E	; 78
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	8b 7f       	andi	r24, 0xFB	; 251
    1858:	8c 93       	st	X, r24

}
    185a:	cf 91       	pop	r28
    185c:	df 91       	pop	r29
    185e:	08 95       	ret

00001860 <TIMER1_ICUsetEdgeDetectionMode>:

void TIMER1_ICUsetEdgeDetectionMode(u8 edge)
{
    1860:	df 93       	push	r29
    1862:	cf 93       	push	r28
    1864:	0f 92       	push	r0
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	89 83       	std	Y+1, r24	; 0x01
	if(edge == TIMER1_RISING){
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	81 30       	cpi	r24, 0x01	; 1
    1870:	41 f4       	brne	.+16     	; 0x1882 <TIMER1_ICUsetEdgeDetectionMode+0x22>
		SET_BIT(TCCR1B,TCCR1B_ICES);
    1872:	ae e4       	ldi	r26, 0x4E	; 78
    1874:	b0 e0       	ldi	r27, 0x00	; 0
    1876:	ee e4       	ldi	r30, 0x4E	; 78
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	80 81       	ld	r24, Z
    187c:	80 64       	ori	r24, 0x40	; 64
    187e:	8c 93       	st	X, r24
    1880:	0a c0       	rjmp	.+20     	; 0x1896 <TIMER1_ICUsetEdgeDetectionMode+0x36>
	}
	else if(edge == TIMER1_FALLING){
    1882:	89 81       	ldd	r24, Y+1	; 0x01
    1884:	88 23       	and	r24, r24
    1886:	39 f4       	brne	.+14     	; 0x1896 <TIMER1_ICUsetEdgeDetectionMode+0x36>
		Clear_Bit(TCCR1B,TCCR1B_ICES);
    1888:	ae e4       	ldi	r26, 0x4E	; 78
    188a:	b0 e0       	ldi	r27, 0x00	; 0
    188c:	ee e4       	ldi	r30, 0x4E	; 78
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	80 81       	ld	r24, Z
    1892:	8f 7b       	andi	r24, 0xBF	; 191
    1894:	8c 93       	st	X, r24
	}
}
    1896:	0f 90       	pop	r0
    1898:	cf 91       	pop	r28
    189a:	df 91       	pop	r29
    189c:	08 95       	ret

0000189e <TIMER1_ICUgetInputCaptureValue>:

u16 TIMER1_ICUgetInputCaptureValue()
{
    189e:	df 93       	push	r29
    18a0:	cf 93       	push	r28
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    18a6:	e6 e4       	ldi	r30, 0x46	; 70
    18a8:	f0 e0       	ldi	r31, 0x00	; 0
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
}
    18ae:	cf 91       	pop	r28
    18b0:	df 91       	pop	r29
    18b2:	08 95       	ret

000018b4 <TIMER1_ICUclearTimerValue>:

void TIMER1_ICUclearTimerValue()
{
    18b4:	df 93       	push	r29
    18b6:	cf 93       	push	r28
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    18bc:	ec e4       	ldi	r30, 0x4C	; 76
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	11 82       	std	Z+1, r1	; 0x01
    18c2:	10 82       	st	Z, r1
}
    18c4:	cf 91       	pop	r28
    18c6:	df 91       	pop	r29
    18c8:	08 95       	ret

000018ca <TIMER1_ICUDeInit>:

void TIMER1_ICUDeInit()
{
    18ca:	df 93       	push	r29
    18cc:	cf 93       	push	r28
    18ce:	cd b7       	in	r28, 0x3d	; 61
    18d0:	de b7       	in	r29, 0x3e	; 62
	TCCR1A = 0;
    18d2:	ef e4       	ldi	r30, 0x4F	; 79
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	10 82       	st	Z, r1
	TCCR1B = 0;
    18d8:	ee e4       	ldi	r30, 0x4E	; 78
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	10 82       	st	Z, r1
	TCNT1  = 0;
    18de:	ec e4       	ldi	r30, 0x4C	; 76
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	11 82       	std	Z+1, r1	; 0x01
    18e4:	10 82       	st	Z, r1
	ICR1   = 0;
    18e6:	e6 e4       	ldi	r30, 0x46	; 70
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	11 82       	std	Z+1, r1	; 0x01
    18ec:	10 82       	st	Z, r1

	/* Disable the interrupt */
	Clear_Bit(TIMSK,TIMSK_TICIE1);
    18ee:	a9 e5       	ldi	r26, 0x59	; 89
    18f0:	b0 e0       	ldi	r27, 0x00	; 0
    18f2:	e9 e5       	ldi	r30, 0x59	; 89
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	80 81       	ld	r24, Z
    18f8:	8f 7d       	andi	r24, 0xDF	; 223
    18fa:	8c 93       	st	X, r24
}
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <TIMER1_voidTIMER1ICUSetCallBack>:

void TIMER1_voidTIMER1ICUSetCallBack(void (*Copy_pvCallBackFunc)(void))
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	00 d0       	rcall	.+0      	; 0x1908 <TIMER1_voidTIMER1ICUSetCallBack+0x6>
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	9a 83       	std	Y+2, r25	; 0x02
    190e:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerICUCallBack = Copy_pvCallBackFunc;
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	9a 81       	ldd	r25, Y+2	; 0x02
    1914:	90 93 94 01 	sts	0x0194, r25
    1918:	80 93 93 01 	sts	0x0193, r24
}
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	cf 91       	pop	r28
    1922:	df 91       	pop	r29
    1924:	08 95       	ret

00001926 <TIMER1_voidTIMER1CTCSetCallBack>:

void TIMER1_voidTIMER1CTCSetCallBack(void (*Copy_pvCallBackFunc)(void)){
    1926:	df 93       	push	r29
    1928:	cf 93       	push	r28
    192a:	00 d0       	rcall	.+0      	; 0x192c <TIMER1_voidTIMER1CTCSetCallBack+0x6>
    192c:	cd b7       	in	r28, 0x3d	; 61
    192e:	de b7       	in	r29, 0x3e	; 62
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
	Global_pvTimerCTCCallBack = Copy_pvCallBackFunc;
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	90 93 96 01 	sts	0x0196, r25
    193c:	80 93 95 01 	sts	0x0195, r24
}
    1940:	0f 90       	pop	r0
    1942:	0f 90       	pop	r0
    1944:	cf 91       	pop	r28
    1946:	df 91       	pop	r29
    1948:	08 95       	ret

0000194a <__vector_6>:

void __vector_6(void) __attribute__((signal));
void __vector_6(void)
{
    194a:	1f 92       	push	r1
    194c:	0f 92       	push	r0
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	0f 92       	push	r0
    1952:	11 24       	eor	r1, r1
    1954:	2f 93       	push	r18
    1956:	3f 93       	push	r19
    1958:	4f 93       	push	r20
    195a:	5f 93       	push	r21
    195c:	6f 93       	push	r22
    195e:	7f 93       	push	r23
    1960:	8f 93       	push	r24
    1962:	9f 93       	push	r25
    1964:	af 93       	push	r26
    1966:	bf 93       	push	r27
    1968:	ef 93       	push	r30
    196a:	ff 93       	push	r31
    196c:	df 93       	push	r29
    196e:	cf 93       	push	r28
    1970:	cd b7       	in	r28, 0x3d	; 61
    1972:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerICUCallBack != NULL){
    1974:	80 91 93 01 	lds	r24, 0x0193
    1978:	90 91 94 01 	lds	r25, 0x0194
    197c:	00 97       	sbiw	r24, 0x00	; 0
    197e:	29 f0       	breq	.+10     	; 0x198a <__vector_6+0x40>
		Global_pvTimerICUCallBack();
    1980:	e0 91 93 01 	lds	r30, 0x0193
    1984:	f0 91 94 01 	lds	r31, 0x0194
    1988:	09 95       	icall
	}
}
    198a:	cf 91       	pop	r28
    198c:	df 91       	pop	r29
    198e:	ff 91       	pop	r31
    1990:	ef 91       	pop	r30
    1992:	bf 91       	pop	r27
    1994:	af 91       	pop	r26
    1996:	9f 91       	pop	r25
    1998:	8f 91       	pop	r24
    199a:	7f 91       	pop	r23
    199c:	6f 91       	pop	r22
    199e:	5f 91       	pop	r21
    19a0:	4f 91       	pop	r20
    19a2:	3f 91       	pop	r19
    19a4:	2f 91       	pop	r18
    19a6:	0f 90       	pop	r0
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	0f 90       	pop	r0
    19ac:	1f 90       	pop	r1
    19ae:	18 95       	reti

000019b0 <__vector_7>:

void __vector_7(void) __attribute__((signal));
void __vector_7(void)
{
    19b0:	1f 92       	push	r1
    19b2:	0f 92       	push	r0
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	0f 92       	push	r0
    19b8:	11 24       	eor	r1, r1
    19ba:	2f 93       	push	r18
    19bc:	3f 93       	push	r19
    19be:	4f 93       	push	r20
    19c0:	5f 93       	push	r21
    19c2:	6f 93       	push	r22
    19c4:	7f 93       	push	r23
    19c6:	8f 93       	push	r24
    19c8:	9f 93       	push	r25
    19ca:	af 93       	push	r26
    19cc:	bf 93       	push	r27
    19ce:	ef 93       	push	r30
    19d0:	ff 93       	push	r31
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvTimerCTCCallBack != NULL){
    19da:	80 91 95 01 	lds	r24, 0x0195
    19de:	90 91 96 01 	lds	r25, 0x0196
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	29 f0       	breq	.+10     	; 0x19f0 <__vector_7+0x40>
		Global_pvTimerCTCCallBack();
    19e6:	e0 91 95 01 	lds	r30, 0x0195
    19ea:	f0 91 96 01 	lds	r31, 0x0196
    19ee:	09 95       	icall
	}
}
    19f0:	cf 91       	pop	r28
    19f2:	df 91       	pop	r29
    19f4:	ff 91       	pop	r31
    19f6:	ef 91       	pop	r30
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	0f 90       	pop	r0
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	0f 90       	pop	r0
    1a12:	1f 90       	pop	r1
    1a14:	18 95       	reti

00001a16 <SPI_voidMasterInit>:
#include "SPI_Private.h"
#include "SPI_Interface.h"

static void (*Global_pvSPICallBack)(void)= NULL;

void SPI_voidMasterInit(void){
    1a16:	df 93       	push	r29
    1a18:	cf 93       	push	r28
    1a1a:	cd b7       	in	r28, 0x3d	; 61
    1a1c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_MSTR);
    1a1e:	ad e2       	ldi	r26, 0x2D	; 45
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	ed e2       	ldi	r30, 0x2D	; 45
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	80 81       	ld	r24, Z
    1a28:	80 61       	ori	r24, 0x10	; 16
    1a2a:	8c 93       	st	X, r24
	SET_BIT(SPCR,SPCR_SPE);
    1a2c:	ad e2       	ldi	r26, 0x2D	; 45
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	ed e2       	ldi	r30, 0x2D	; 45
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	80 64       	ori	r24, 0x40	; 64
    1a38:	8c 93       	st	X, r24
#if INTERRUPT_MODE == ENABLE_INTERRUPT
	SET_BIT(SPCR,SPCR_SPIE);
#endif

#if CLOCK_POLARITY == IDLE_LOW
	CLR_BIT(SPCR,SPCR_CPOL);
    1a3a:	ad e2       	ldi	r26, 0x2D	; 45
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	ed e2       	ldi	r30, 0x2D	; 45
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	87 7f       	andi	r24, 0xF7	; 247
    1a46:	8c 93       	st	X, r24
#elif CLOCK_POLARITY == IDLE_HIGH
	SET_BIT(SPCR,SPCR_CPOL);
#endif

#if CLOCK_PHASE == SPI_ZERO
	CLR_BIT(SPCR,SPCR_CPHA);
    1a48:	ad e2       	ldi	r26, 0x2D	; 45
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	ed e2       	ldi	r30, 0x2D	; 45
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	8b 7f       	andi	r24, 0xFB	; 251
    1a54:	8c 93       	st	X, r24


#if DATA_ORDER == LSB_FIRST
	SET_BIT(SPCR,SPCR_DORD);
#elif DATA_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
    1a56:	ad e2       	ldi	r26, 0x2D	; 45
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	ed e2       	ldi	r30, 0x2D	; 45
    1a5c:	f0 e0       	ldi	r31, 0x00	; 0
    1a5e:	80 81       	ld	r24, Z
    1a60:	8f 7d       	andi	r24, 0xDF	; 223
    1a62:	8c 93       	st	X, r24
#endif

#if SPI_FREQUENCY == QUARTER_FREQ
	CLR_BIT(SPSR,SPSR_SPI2X);
    1a64:	ae e2       	ldi	r26, 0x2E	; 46
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	ee e2       	ldi	r30, 0x2E	; 46
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8e 7f       	andi	r24, 0xFE	; 254
    1a70:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR0);
    1a72:	ad e2       	ldi	r26, 0x2D	; 45
    1a74:	b0 e0       	ldi	r27, 0x00	; 0
    1a76:	ed e2       	ldi	r30, 0x2D	; 45
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	80 81       	ld	r24, Z
    1a7c:	8e 7f       	andi	r24, 0xFE	; 254
    1a7e:	8c 93       	st	X, r24
	CLR_BIT(SPCR,SPCR_SPR1);
    1a80:	ad e2       	ldi	r26, 0x2D	; 45
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	ed e2       	ldi	r30, 0x2D	; 45
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8d 7f       	andi	r24, 0xFD	; 253
    1a8c:	8c 93       	st	X, r24
#elif SPI_FREQUENCY == HALF_FREQ
	SET_BIT(SPSR,SPSR_SPI2X);
	CLR_BIT(SPCR,SPCR_SPR0);
	CLR_BIT(SPCR,SPCR_SPR1);
#endif
}
    1a8e:	cf 91       	pop	r28
    1a90:	df 91       	pop	r29
    1a92:	08 95       	ret

00001a94 <SPI_voidSlaveInit>:

void SPI_voidSlaveInit(void)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	cd b7       	in	r28, 0x3d	; 61
    1a9a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_MSTR);
    1a9c:	ad e2       	ldi	r26, 0x2D	; 45
    1a9e:	b0 e0       	ldi	r27, 0x00	; 0
    1aa0:	ed e2       	ldi	r30, 0x2D	; 45
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	80 81       	ld	r24, Z
    1aa6:	8f 7e       	andi	r24, 0xEF	; 239
    1aa8:	8c 93       	st	X, r24
#if INTERRUPT_MODE == ENABLE_INTERRUPT
	SET_BIT(SPCR,SPCR_SPIE);
#endif

#if CLOCK_POLARITY == IDLE_LOW
	CLR_BIT(SPCR,SPCR_CPOL);
    1aaa:	ad e2       	ldi	r26, 0x2D	; 45
    1aac:	b0 e0       	ldi	r27, 0x00	; 0
    1aae:	ed e2       	ldi	r30, 0x2D	; 45
    1ab0:	f0 e0       	ldi	r31, 0x00	; 0
    1ab2:	80 81       	ld	r24, Z
    1ab4:	87 7f       	andi	r24, 0xF7	; 247
    1ab6:	8c 93       	st	X, r24
#elif CLOCK_POLARITY == IDLE_HIGH
	SET_BIT(SPCR,SPCR_CPOL);
#endif

#if CLOCK_PHASE == SPI_ZERO
	CLR_BIT(SPCR,SPCR_CPHA);
    1ab8:	ad e2       	ldi	r26, 0x2D	; 45
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	ed e2       	ldi	r30, 0x2D	; 45
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	8b 7f       	andi	r24, 0xFB	; 251
    1ac4:	8c 93       	st	X, r24
#endif

#if DATA_ORDER == LSB_FIRST
	SET_BIT(SPCR,SPCR_DORD);
#elif DATA_ORDER == MSB_FIRST
	CLR_BIT(SPCR,SPCR_DORD);
    1ac6:	ad e2       	ldi	r26, 0x2D	; 45
    1ac8:	b0 e0       	ldi	r27, 0x00	; 0
    1aca:	ed e2       	ldi	r30, 0x2D	; 45
    1acc:	f0 e0       	ldi	r31, 0x00	; 0
    1ace:	80 81       	ld	r24, Z
    1ad0:	8f 7d       	andi	r24, 0xDF	; 223
    1ad2:	8c 93       	st	X, r24
#endif

	SET_BIT(SPCR,SPCR_SPE);
    1ad4:	ad e2       	ldi	r26, 0x2D	; 45
    1ad6:	b0 e0       	ldi	r27, 0x00	; 0
    1ad8:	ed e2       	ldi	r30, 0x2D	; 45
    1ada:	f0 e0       	ldi	r31, 0x00	; 0
    1adc:	80 81       	ld	r24, Z
    1ade:	80 64       	ori	r24, 0x40	; 64
    1ae0:	8c 93       	st	X, r24
}
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <SPI_u8Transfer>:

u8 SPI_u8Transfer(u8 Copy_Data){
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	0f 92       	push	r0
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	89 83       	std	Y+1, r24	; 0x01
	/* Start transmission */
	SPDR = Copy_Data;
    1af4:	ef e2       	ldi	r30, 0x2F	; 47
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	80 83       	st	Z, r24
	static u8 counter = '0';
	counter++;
    1afc:	80 91 6b 01 	lds	r24, 0x016B
    1b00:	8f 5f       	subi	r24, 0xFF	; 255
    1b02:	80 93 6b 01 	sts	0x016B, r24
	/* Wait for transmission complete */
	//	LCD_voidGoToPosition(1,0);
	//	LCD_voidWriteChar(counter);
	while(!GET_BIT(SPSR,SPSR_SPIF));
    1b06:	ee e2       	ldi	r30, 0x2E	; 46
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	80 81       	ld	r24, Z
    1b0c:	88 23       	and	r24, r24
    1b0e:	dc f7       	brge	.-10     	; 0x1b06 <SPI_u8Transfer+0x1e>
	return SPDR;
    1b10:	ef e2       	ldi	r30, 0x2F	; 47
    1b12:	f0 e0       	ldi	r31, 0x00	; 0
    1b14:	80 81       	ld	r24, Z
}
    1b16:	0f 90       	pop	r0
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <SPI_voidSetCallBack>:

void SPI_voidSetCallBack( void (*PtrToFunc) (void) ){
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	00 d0       	rcall	.+0      	; 0x1b24 <SPI_voidSetCallBack+0x6>
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    1b28:	9a 83       	std	Y+2, r25	; 0x02
    1b2a:	89 83       	std	Y+1, r24	; 0x01
	Global_pvSPICallBack = PtrToFunc;
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b30:	90 93 98 01 	sts	0x0198, r25
    1b34:	80 93 97 01 	sts	0x0197, r24
}
    1b38:	0f 90       	pop	r0
    1b3a:	0f 90       	pop	r0
    1b3c:	cf 91       	pop	r28
    1b3e:	df 91       	pop	r29
    1b40:	08 95       	ret

00001b42 <SPI_u8ReadDataISR>:

u8 SPI_u8ReadDataISR(void){
    1b42:	df 93       	push	r29
    1b44:	cf 93       	push	r28
    1b46:	cd b7       	in	r28, 0x3d	; 61
    1b48:	de b7       	in	r29, 0x3e	; 62
	return SPDR;
    1b4a:	ef e2       	ldi	r30, 0x2F	; 47
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
}
    1b50:	cf 91       	pop	r28
    1b52:	df 91       	pop	r29
    1b54:	08 95       	ret

00001b56 <SPI_voidSendDataISR>:

void SPI_voidSendDataISR(u8 Copy_Data)
{
    1b56:	df 93       	push	r29
    1b58:	cf 93       	push	r28
    1b5a:	0f 92       	push	r0
    1b5c:	cd b7       	in	r28, 0x3d	; 61
    1b5e:	de b7       	in	r29, 0x3e	; 62
    1b60:	89 83       	std	Y+1, r24	; 0x01
	SPDR = Copy_Data;
    1b62:	ef e2       	ldi	r30, 0x2F	; 47
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	80 83       	st	Z, r24
}
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <__vector_12>:

void  __vector_12 (void)	__attribute__((signal));
void  __vector_12 (void)
{
    1b72:	1f 92       	push	r1
    1b74:	0f 92       	push	r0
    1b76:	0f b6       	in	r0, 0x3f	; 63
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	df 93       	push	r29
    1b96:	cf 93       	push	r28
    1b98:	cd b7       	in	r28, 0x3d	; 61
    1b9a:	de b7       	in	r29, 0x3e	; 62
	if(Global_pvSPICallBack != NULL)
    1b9c:	80 91 97 01 	lds	r24, 0x0197
    1ba0:	90 91 98 01 	lds	r25, 0x0198
    1ba4:	00 97       	sbiw	r24, 0x00	; 0
    1ba6:	29 f0       	breq	.+10     	; 0x1bb2 <__vector_12+0x40>
	{
		Global_pvSPICallBack();
    1ba8:	e0 91 97 01 	lds	r30, 0x0197
    1bac:	f0 91 98 01 	lds	r31, 0x0198
    1bb0:	09 95       	icall
	else
	{
		/*Do nothing*/
	}

}
    1bb2:	cf 91       	pop	r28
    1bb4:	df 91       	pop	r29
    1bb6:	ff 91       	pop	r31
    1bb8:	ef 91       	pop	r30
    1bba:	bf 91       	pop	r27
    1bbc:	af 91       	pop	r26
    1bbe:	9f 91       	pop	r25
    1bc0:	8f 91       	pop	r24
    1bc2:	7f 91       	pop	r23
    1bc4:	6f 91       	pop	r22
    1bc6:	5f 91       	pop	r21
    1bc8:	4f 91       	pop	r20
    1bca:	3f 91       	pop	r19
    1bcc:	2f 91       	pop	r18
    1bce:	0f 90       	pop	r0
    1bd0:	0f be       	out	0x3f, r0	; 63
    1bd2:	0f 90       	pop	r0
    1bd4:	1f 90       	pop	r1
    1bd6:	18 95       	reti

00001bd8 <PORT_voidInit>:
#include "Port_Interface.h"
#include "Port_Register.h"


void PORT_voidInit(void)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	cd b7       	in	r28, 0x3d	; 61
    1bde:	de b7       	in	r29, 0x3e	; 62
    DDRA = PORTA_DIR ;
    1be0:	ea e3       	ldi	r30, 0x3A	; 58
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8e ef       	ldi	r24, 0xFE	; 254
    1be6:	80 83       	st	Z, r24
    DDRB = PORTB_DIR ;
    1be8:	e7 e3       	ldi	r30, 0x37	; 55
    1bea:	f0 e0       	ldi	r31, 0x00	; 0
    1bec:	8f e4       	ldi	r24, 0x4F	; 79
    1bee:	80 83       	st	Z, r24
    DDRC = PORTC_DIR ;
    1bf0:	e4 e3       	ldi	r30, 0x34	; 52
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	80 83       	st	Z, r24
    DDRD = PORTD_DIR ;
    1bf8:	e1 e3       	ldi	r30, 0x31	; 49
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	8e ef       	ldi	r24, 0xFE	; 254
    1bfe:	80 83       	st	Z, r24

    PORTA = PORTA_INIT_VALUE;
    1c00:	eb e3       	ldi	r30, 0x3B	; 59
    1c02:	f0 e0       	ldi	r31, 0x00	; 0
    1c04:	10 82       	st	Z, r1
    PORTB = PORTB_INIT_VALUE;
    1c06:	e8 e3       	ldi	r30, 0x38	; 56
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 ea       	ldi	r24, 0xA0	; 160
    1c0c:	80 83       	st	Z, r24
    PORTC = PORTC_INIT_VALUE;
    1c0e:	e5 e3       	ldi	r30, 0x35	; 53
    1c10:	f0 e0       	ldi	r31, 0x00	; 0
    1c12:	10 82       	st	Z, r1
    PORTD = PORTD_INIT_VALUE;
    1c14:	e2 e3       	ldi	r30, 0x32	; 50
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	10 82       	st	Z, r1


}
    1c1a:	cf 91       	pop	r28
    1c1c:	df 91       	pop	r29
    1c1e:	08 95       	ret

00001c20 <GIE_voidEnable>:

#include "GIE_Register.h"
#include "GIE_Interface.h"

void GIE_voidEnable(void)
{
    1c20:	df 93       	push	r29
    1c22:	cf 93       	push	r28
    1c24:	cd b7       	in	r28, 0x3d	; 61
    1c26:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt  */
	Set_Bit(SREG, SREG_I);
    1c28:	af e5       	ldi	r26, 0x5F	; 95
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	ef e5       	ldi	r30, 0x5F	; 95
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	80 68       	ori	r24, 0x80	; 128
    1c34:	8c 93       	st	X, r24
}
    1c36:	cf 91       	pop	r28
    1c38:	df 91       	pop	r29
    1c3a:	08 95       	ret

00001c3c <GIE_voidDisable>:
void GIE_voidDisable(void)
{
    1c3c:	df 93       	push	r29
    1c3e:	cf 93       	push	r28
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
	/* Disable Global Interrupt  */
	Clear_Bit(SREG, SREG_I);
    1c44:	af e5       	ldi	r26, 0x5F	; 95
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	ef e5       	ldi	r30, 0x5F	; 95
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	8f 77       	andi	r24, 0x7F	; 127
    1c50:	8c 93       	st	X, r24
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <EXTI0_voidInit>:
void (*EXTI_pvINT1Func)(void) = NULL;
void (*EXTI_pvINT2Func)(void) = NULL;


void EXTI0_voidInit(void)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	cd b7       	in	r28, 0x3d	; 61
    1c5e:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT0_SENSE_CONTROL == FALLING_EADGE
	/* ISC01 -> 1, ISC00 -> 0  */
	Set_Bit(MCUCR, MCUCR_ISC01);
    1c60:	a5 e5       	ldi	r26, 0x55	; 85
    1c62:	b0 e0       	ldi	r27, 0x00	; 0
    1c64:	e5 e5       	ldi	r30, 0x55	; 85
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	80 81       	ld	r24, Z
    1c6a:	82 60       	ori	r24, 0x02	; 2
    1c6c:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC00);
    1c6e:	a5 e5       	ldi	r26, 0x55	; 85
    1c70:	b0 e0       	ldi	r27, 0x00	; 0
    1c72:	e5 e5       	ldi	r30, 0x55	; 85
    1c74:	f0 e0       	ldi	r31, 0x00	; 0
    1c76:	80 81       	ld	r24, Z
    1c78:	8e 7f       	andi	r24, 0xFE	; 254
    1c7a:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC00);
	Clear_Bit(MCUCR, MCUCR_ISC01);
#else
#error "WRONG SENCE CONTROL"
#endif
}
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	08 95       	ret

00001c82 <EXTI0_voidEnable>:

void EXTI0_voidEnable(void)
{
    1c82:	df 93       	push	r29
    1c84:	cf 93       	push	r28
    1c86:	cd b7       	in	r28, 0x3d	; 61
    1c88:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT0);
    1c8a:	ab e5       	ldi	r26, 0x5B	; 91
    1c8c:	b0 e0       	ldi	r27, 0x00	; 0
    1c8e:	eb e5       	ldi	r30, 0x5B	; 91
    1c90:	f0 e0       	ldi	r31, 0x00	; 0
    1c92:	80 81       	ld	r24, Z
    1c94:	80 64       	ori	r24, 0x40	; 64
    1c96:	8c 93       	st	X, r24
}
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <EXTI0_voidDisable>:

void EXTI0_voidDisable(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT0);
    1ca6:	ab e5       	ldi	r26, 0x5B	; 91
    1ca8:	b0 e0       	ldi	r27, 0x00	; 0
    1caa:	eb e5       	ldi	r30, 0x5B	; 91
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
    1cb0:	8f 7b       	andi	r24, 0xBF	; 191
    1cb2:	8c 93       	st	X, r24
}
    1cb4:	cf 91       	pop	r28
    1cb6:	df 91       	pop	r29
    1cb8:	08 95       	ret

00001cba <EXT0_voidSetSignalch>:

void EXT0_voidSetSignalch(u8 SenseCpy)
{
    1cba:	df 93       	push	r29
    1cbc:	cf 93       	push	r28
    1cbe:	00 d0       	rcall	.+0      	; 0x1cc0 <EXT0_voidSetSignalch+0x6>
    1cc0:	0f 92       	push	r0
    1cc2:	cd b7       	in	r28, 0x3d	; 61
    1cc4:	de b7       	in	r29, 0x3e	; 62
    1cc6:	89 83       	std	Y+1, r24	; 0x01
	switch( SenseCpy )
    1cc8:	89 81       	ldd	r24, Y+1	; 0x01
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	3b 83       	std	Y+3, r19	; 0x03
    1cd0:	2a 83       	std	Y+2, r18	; 0x02
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cd6:	82 30       	cpi	r24, 0x02	; 2
    1cd8:	91 05       	cpc	r25, r1
    1cda:	99 f1       	breq	.+102    	; 0x1d42 <EXT0_voidSetSignalch+0x88>
    1cdc:	2a 81       	ldd	r18, Y+2	; 0x02
    1cde:	3b 81       	ldd	r19, Y+3	; 0x03
    1ce0:	23 30       	cpi	r18, 0x03	; 3
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	34 f4       	brge	.+12     	; 0x1cf2 <EXT0_voidSetSignalch+0x38>
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	91 05       	cpc	r25, r1
    1cee:	c1 f1       	breq	.+112    	; 0x1d60 <EXT0_voidSetSignalch+0xa6>
    1cf0:	45 c0       	rjmp	.+138    	; 0x1d7c <EXT0_voidSetSignalch+0xc2>
    1cf2:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf4:	3b 81       	ldd	r19, Y+3	; 0x03
    1cf6:	23 30       	cpi	r18, 0x03	; 3
    1cf8:	31 05       	cpc	r19, r1
    1cfa:	a1 f0       	breq	.+40     	; 0x1d24 <EXT0_voidSetSignalch+0x6a>
    1cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1d00:	84 30       	cpi	r24, 0x04	; 4
    1d02:	91 05       	cpc	r25, r1
    1d04:	d9 f5       	brne	.+118    	; 0x1d7c <EXT0_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC01 -> 1, ISC00 -> 0  */
		Set_Bit(MCUCR, MCUCR_ISC01);
    1d06:	a5 e5       	ldi	r26, 0x55	; 85
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e5 e5       	ldi	r30, 0x55	; 85
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	82 60       	ori	r24, 0x02	; 2
    1d12:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
    1d14:	a5 e5       	ldi	r26, 0x55	; 85
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	e5 e5       	ldi	r30, 0x55	; 85
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	80 81       	ld	r24, Z
    1d1e:	8e 7f       	andi	r24, 0xFE	; 254
    1d20:	8c 93       	st	X, r24
    1d22:	2c c0       	rjmp	.+88     	; 0x1d7c <EXT0_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC01 -> 1, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC01);
    1d24:	a5 e5       	ldi	r26, 0x55	; 85
    1d26:	b0 e0       	ldi	r27, 0x00	; 0
    1d28:	e5 e5       	ldi	r30, 0x55	; 85
    1d2a:	f0 e0       	ldi	r31, 0x00	; 0
    1d2c:	80 81       	ld	r24, Z
    1d2e:	82 60       	ori	r24, 0x02	; 2
    1d30:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC00);
    1d32:	a5 e5       	ldi	r26, 0x55	; 85
    1d34:	b0 e0       	ldi	r27, 0x00	; 0
    1d36:	e5 e5       	ldi	r30, 0x55	; 85
    1d38:	f0 e0       	ldi	r31, 0x00	; 0
    1d3a:	80 81       	ld	r24, Z
    1d3c:	81 60       	ori	r24, 0x01	; 1
    1d3e:	8c 93       	st	X, r24
    1d40:	1d c0       	rjmp	.+58     	; 0x1d7c <EXT0_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC01 -> 0, ISC00 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC01);
    1d42:	a5 e5       	ldi	r26, 0x55	; 85
    1d44:	b0 e0       	ldi	r27, 0x00	; 0
    1d46:	e5 e5       	ldi	r30, 0x55	; 85
    1d48:	f0 e0       	ldi	r31, 0x00	; 0
    1d4a:	80 81       	ld	r24, Z
    1d4c:	8d 7f       	andi	r24, 0xFD	; 253
    1d4e:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC00);
    1d50:	a5 e5       	ldi	r26, 0x55	; 85
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e5 e5       	ldi	r30, 0x55	; 85
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 81       	ld	r24, Z
    1d5a:	8e 7f       	andi	r24, 0xFE	; 254
    1d5c:	8c 93       	st	X, r24
    1d5e:	0e c0       	rjmp	.+28     	; 0x1d7c <EXT0_voidSetSignalch+0xc2>

		break;
	case ON_CHANGE:
		/* ISC01 -> 0, ISC00 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC00);
    1d60:	a5 e5       	ldi	r26, 0x55	; 85
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	e5 e5       	ldi	r30, 0x55	; 85
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	81 60       	ori	r24, 0x01	; 1
    1d6c:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC01);
    1d6e:	a5 e5       	ldi	r26, 0x55	; 85
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e5 e5       	ldi	r30, 0x55	; 85
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	8d 7f       	andi	r24, 0xFD	; 253
    1d7a:	8c 93       	st	X, r24
		break;
	default:
		break;
	}
}
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	0f 90       	pop	r0
    1d82:	cf 91       	pop	r28
    1d84:	df 91       	pop	r29
    1d86:	08 95       	ret

00001d88 <EXTI1_voidInit>:

void EXTI1_voidInit(void)
{
    1d88:	df 93       	push	r29
    1d8a:	cf 93       	push	r28
    1d8c:	cd b7       	in	r28, 0x3d	; 61
    1d8e:	de b7       	in	r29, 0x3e	; 62
#if		SELECT_INT1_SENSE_CONTROL == FALLING_EADGE
	/* ISC11 -> 1, ISC10 -> 0  */
	Clear_Bit(MCUCR, MCUCR_ISC10);
    1d90:	a5 e5       	ldi	r26, 0x55	; 85
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	e5 e5       	ldi	r30, 0x55	; 85
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	8b 7f       	andi	r24, 0xFB	; 251
    1d9c:	8c 93       	st	X, r24
	Set_Bit(MCUCR, MCUCR_ISC11);
    1d9e:	a5 e5       	ldi	r26, 0x55	; 85
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e5 e5       	ldi	r30, 0x55	; 85
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	88 60       	ori	r24, 0x08	; 8
    1daa:	8c 93       	st	X, r24
	Clear_Bit(MCUCR, MCUCR_ISC11);
	Set_Bit(MCUCR, MCUCR_ISC10);

#error "WRONG SENCE CONTROL"
#endif
}
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <EXTI1_voidEnable>:

void EXTI1_voidEnable(void)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT1);
    1dba:	ab e5       	ldi	r26, 0x5B	; 91
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	eb e5       	ldi	r30, 0x5B	; 91
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	80 68       	ori	r24, 0x80	; 128
    1dc6:	8c 93       	st	X, r24
}
    1dc8:	cf 91       	pop	r28
    1dca:	df 91       	pop	r29
    1dcc:	08 95       	ret

00001dce <EXTI1_voidDisable>:

void EXTI1_voidDisable(void)
{
    1dce:	df 93       	push	r29
    1dd0:	cf 93       	push	r28
    1dd2:	cd b7       	in	r28, 0x3d	; 61
    1dd4:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT1);
    1dd6:	ab e5       	ldi	r26, 0x5B	; 91
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	eb e5       	ldi	r30, 0x5B	; 91
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	80 81       	ld	r24, Z
    1de0:	8f 77       	andi	r24, 0x7F	; 127
    1de2:	8c 93       	st	X, r24
}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <EXT1_voidSetSignalch>:

void EXT1_voidSetSignalch(u8 SenseCpy)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <EXT1_voidSetSignalch+0x6>
    1df0:	0f 92       	push	r0
    1df2:	cd b7       	in	r28, 0x3d	; 61
    1df4:	de b7       	in	r29, 0x3e	; 62
    1df6:	89 83       	std	Y+1, r24	; 0x01

	switch (SenseCpy)
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	3b 83       	std	Y+3, r19	; 0x03
    1e00:	2a 83       	std	Y+2, r18	; 0x02
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	82 30       	cpi	r24, 0x02	; 2
    1e08:	91 05       	cpc	r25, r1
    1e0a:	99 f1       	breq	.+102    	; 0x1e72 <EXT1_voidSetSignalch+0x88>
    1e0c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e10:	23 30       	cpi	r18, 0x03	; 3
    1e12:	31 05       	cpc	r19, r1
    1e14:	34 f4       	brge	.+12     	; 0x1e22 <EXT1_voidSetSignalch+0x38>
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	9b 81       	ldd	r25, Y+3	; 0x03
    1e1a:	81 30       	cpi	r24, 0x01	; 1
    1e1c:	91 05       	cpc	r25, r1
    1e1e:	c1 f1       	breq	.+112    	; 0x1e90 <EXT1_voidSetSignalch+0xa6>
    1e20:	45 c0       	rjmp	.+138    	; 0x1eac <EXT1_voidSetSignalch+0xc2>
    1e22:	2a 81       	ldd	r18, Y+2	; 0x02
    1e24:	3b 81       	ldd	r19, Y+3	; 0x03
    1e26:	23 30       	cpi	r18, 0x03	; 3
    1e28:	31 05       	cpc	r19, r1
    1e2a:	a1 f0       	breq	.+40     	; 0x1e54 <EXT1_voidSetSignalch+0x6a>
    1e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	91 05       	cpc	r25, r1
    1e34:	d9 f5       	brne	.+118    	; 0x1eac <EXT1_voidSetSignalch+0xc2>
	{
	case FALLING_EADGE:
		/* ISC11 -> 1, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    1e36:	a5 e5       	ldi	r26, 0x55	; 85
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e5 e5       	ldi	r30, 0x55	; 85
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	8b 7f       	andi	r24, 0xFB	; 251
    1e42:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    1e44:	a5 e5       	ldi	r26, 0x55	; 85
    1e46:	b0 e0       	ldi	r27, 0x00	; 0
    1e48:	e5 e5       	ldi	r30, 0x55	; 85
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	80 81       	ld	r24, Z
    1e4e:	88 60       	ori	r24, 0x08	; 8
    1e50:	8c 93       	st	X, r24
    1e52:	2c c0       	rjmp	.+88     	; 0x1eac <EXT1_voidSetSignalch+0xc2>
		break;
	case RISING_EADGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Set_Bit(MCUCR, MCUCR_ISC10);
    1e54:	a5 e5       	ldi	r26, 0x55	; 85
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	e5 e5       	ldi	r30, 0x55	; 85
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	80 81       	ld	r24, Z
    1e5e:	84 60       	ori	r24, 0x04	; 4
    1e60:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC11);
    1e62:	a5 e5       	ldi	r26, 0x55	; 85
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e5 e5       	ldi	r30, 0x55	; 85
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	88 60       	ori	r24, 0x08	; 8
    1e6e:	8c 93       	st	X, r24
    1e70:	1d c0       	rjmp	.+58     	; 0x1eac <EXT1_voidSetSignalch+0xc2>
		break;
	case LOW_LEVEL:
		/* ISC11 -> 0, ISC10 -> 0  */
		Clear_Bit(MCUCR, MCUCR_ISC10);
    1e72:	a5 e5       	ldi	r26, 0x55	; 85
    1e74:	b0 e0       	ldi	r27, 0x00	; 0
    1e76:	e5 e5       	ldi	r30, 0x55	; 85
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	80 81       	ld	r24, Z
    1e7c:	8b 7f       	andi	r24, 0xFB	; 251
    1e7e:	8c 93       	st	X, r24
		Clear_Bit(MCUCR, MCUCR_ISC11);
    1e80:	a5 e5       	ldi	r26, 0x55	; 85
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e5 e5       	ldi	r30, 0x55	; 85
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	80 81       	ld	r24, Z
    1e8a:	87 7f       	andi	r24, 0xF7	; 247
    1e8c:	8c 93       	st	X, r24
    1e8e:	0e c0       	rjmp	.+28     	; 0x1eac <EXT1_voidSetSignalch+0xc2>
		break;
	case ON_CHANGE:
		/* ISC11 -> 1, ISC10 -> 1  */
		Clear_Bit(MCUCR, MCUCR_ISC11);
    1e90:	a5 e5       	ldi	r26, 0x55	; 85
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e5 e5       	ldi	r30, 0x55	; 85
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 81       	ld	r24, Z
    1e9a:	87 7f       	andi	r24, 0xF7	; 247
    1e9c:	8c 93       	st	X, r24
		Set_Bit(MCUCR, MCUCR_ISC10);
    1e9e:	a5 e5       	ldi	r26, 0x55	; 85
    1ea0:	b0 e0       	ldi	r27, 0x00	; 0
    1ea2:	e5 e5       	ldi	r30, 0x55	; 85
    1ea4:	f0 e0       	ldi	r31, 0x00	; 0
    1ea6:	80 81       	ld	r24, Z
    1ea8:	84 60       	ori	r24, 0x04	; 4
    1eaa:	8c 93       	st	X, r24
		break;
	default:
		break;
	}

}
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <EXTI2_voidInit>:


// INTERRUPT 1
void EXTI2_voidInit(void)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62

#if 	SELECT_INT2_SENSE_CONTROL == FALLING_EADGE
	Clear_Bit(MCUCR, MCUCSR_ISC2);
    1ec0:	a5 e5       	ldi	r26, 0x55	; 85
    1ec2:	b0 e0       	ldi	r27, 0x00	; 0
    1ec4:	e5 e5       	ldi	r30, 0x55	; 85
    1ec6:	f0 e0       	ldi	r31, 0x00	; 0
    1ec8:	80 81       	ld	r24, Z
    1eca:	8f 7b       	andi	r24, 0xBF	; 191
    1ecc:	8c 93       	st	X, r24
#elif 	SELECT_INT2_SENSE_CONTROL == RISING_EADGE
	Set_Bit(MCUCR, MCUCSR_ISC2);
#else
#endif

}
    1ece:	cf 91       	pop	r28
    1ed0:	df 91       	pop	r29
    1ed2:	08 95       	ret

00001ed4 <EXTI2_voidEnable>:

//enable EXTI
void EXTI2_voidEnable(void)
{
    1ed4:	df 93       	push	r29
    1ed6:	cf 93       	push	r28
    1ed8:	cd b7       	in	r28, 0x3d	; 61
    1eda:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(GICR, GICR_INT2);
    1edc:	ab e5       	ldi	r26, 0x5B	; 91
    1ede:	b0 e0       	ldi	r27, 0x00	; 0
    1ee0:	eb e5       	ldi	r30, 0x5B	; 91
    1ee2:	f0 e0       	ldi	r31, 0x00	; 0
    1ee4:	80 81       	ld	r24, Z
    1ee6:	80 62       	ori	r24, 0x20	; 32
    1ee8:	8c 93       	st	X, r24
}
    1eea:	cf 91       	pop	r28
    1eec:	df 91       	pop	r29
    1eee:	08 95       	ret

00001ef0 <EXTI2_voidDisable>:

//disable EXTI
void EXTI2_voidDisable(void)
{
    1ef0:	df 93       	push	r29
    1ef2:	cf 93       	push	r28
    1ef4:	cd b7       	in	r28, 0x3d	; 61
    1ef6:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(GICR, GICR_INT2);
    1ef8:	ab e5       	ldi	r26, 0x5B	; 91
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	eb e5       	ldi	r30, 0x5B	; 91
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	80 81       	ld	r24, Z
    1f02:	8f 7d       	andi	r24, 0xDF	; 223
    1f04:	8c 93       	st	X, r24
}
    1f06:	cf 91       	pop	r28
    1f08:	df 91       	pop	r29
    1f0a:	08 95       	ret

00001f0c <EXT2_voidSetSignalch>:

//change the INT with sensing mood in runtime
void EXT2_voidSetSignalch(u8 SenseCpy)
{
    1f0c:	df 93       	push	r29
    1f0e:	cf 93       	push	r28
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <EXT2_voidSetSignalch+0x6>
    1f12:	0f 92       	push	r0
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	89 83       	std	Y+1, r24	; 0x01
	switch(SenseCpy)
    1f1a:	89 81       	ldd	r24, Y+1	; 0x01
    1f1c:	28 2f       	mov	r18, r24
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	3b 83       	std	Y+3, r19	; 0x03
    1f22:	2a 83       	std	Y+2, r18	; 0x02
    1f24:	8a 81       	ldd	r24, Y+2	; 0x02
    1f26:	9b 81       	ldd	r25, Y+3	; 0x03
    1f28:	83 30       	cpi	r24, 0x03	; 3
    1f2a:	91 05       	cpc	r25, r1
    1f2c:	69 f0       	breq	.+26     	; 0x1f48 <EXT2_voidSetSignalch+0x3c>
    1f2e:	2a 81       	ldd	r18, Y+2	; 0x02
    1f30:	3b 81       	ldd	r19, Y+3	; 0x03
    1f32:	24 30       	cpi	r18, 0x04	; 4
    1f34:	31 05       	cpc	r19, r1
    1f36:	79 f4       	brne	.+30     	; 0x1f56 <EXT2_voidSetSignalch+0x4a>
	{
	case FALLING_EADGE:
		Clear_Bit(MCUCR, MCUCSR_ISC2);
    1f38:	a5 e5       	ldi	r26, 0x55	; 85
    1f3a:	b0 e0       	ldi	r27, 0x00	; 0
    1f3c:	e5 e5       	ldi	r30, 0x55	; 85
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8f 7b       	andi	r24, 0xBF	; 191
    1f44:	8c 93       	st	X, r24
    1f46:	07 c0       	rjmp	.+14     	; 0x1f56 <EXT2_voidSetSignalch+0x4a>
		break;
	case RISING_EADGE:
		Set_Bit(MCUCR, MCUCSR_ISC2);
    1f48:	a5 e5       	ldi	r26, 0x55	; 85
    1f4a:	b0 e0       	ldi	r27, 0x00	; 0
    1f4c:	e5 e5       	ldi	r30, 0x55	; 85
    1f4e:	f0 e0       	ldi	r31, 0x00	; 0
    1f50:	80 81       	ld	r24, Z
    1f52:	80 64       	ori	r24, 0x40	; 64
    1f54:	8c 93       	st	X, r24
		break;

	}
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <EXT0_VID_SET_CALL_BACK>:



//callback function
void EXT0_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	00 d0       	rcall	.+0      	; 0x1f68 <EXT0_VID_SET_CALL_BACK+0x6>
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	9a 83       	std	Y+2, r25	; 0x02
    1f6e:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	9a 81       	ldd	r25, Y+2	; 0x02
    1f74:	00 97       	sbiw	r24, 0x00	; 0
    1f76:	31 f0       	breq	.+12     	; 0x1f84 <EXT0_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT0Func = PTR;
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f7c:	90 93 9a 01 	sts	0x019A, r25
    1f80:	80 93 99 01 	sts	0x0199, r24
	}
	else
	{

	}
}
    1f84:	0f 90       	pop	r0
    1f86:	0f 90       	pop	r0
    1f88:	cf 91       	pop	r28
    1f8a:	df 91       	pop	r29
    1f8c:	08 95       	ret

00001f8e <EXT1_VID_SET_CALL_BACK>:
void EXT1_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1f8e:	df 93       	push	r29
    1f90:	cf 93       	push	r28
    1f92:	00 d0       	rcall	.+0      	; 0x1f94 <EXT1_VID_SET_CALL_BACK+0x6>
    1f94:	cd b7       	in	r28, 0x3d	; 61
    1f96:	de b7       	in	r29, 0x3e	; 62
    1f98:	9a 83       	std	Y+2, r25	; 0x02
    1f9a:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa0:	00 97       	sbiw	r24, 0x00	; 0
    1fa2:	31 f0       	breq	.+12     	; 0x1fb0 <EXT1_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT1Func = PTR;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
    1fa6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa8:	90 93 9c 01 	sts	0x019C, r25
    1fac:	80 93 9b 01 	sts	0x019B, r24
	}
	else
	{

	}
}
    1fb0:	0f 90       	pop	r0
    1fb2:	0f 90       	pop	r0
    1fb4:	cf 91       	pop	r28
    1fb6:	df 91       	pop	r29
    1fb8:	08 95       	ret

00001fba <EXT2_VID_SET_CALL_BACK>:
void EXT2_VID_SET_CALL_BACK(void (*PTR)(void))
{
    1fba:	df 93       	push	r29
    1fbc:	cf 93       	push	r28
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <EXT2_VID_SET_CALL_BACK+0x6>
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	9a 83       	std	Y+2, r25	; 0x02
    1fc6:	89 83       	std	Y+1, r24	; 0x01
	if(PTR != NULL)
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	9a 81       	ldd	r25, Y+2	; 0x02
    1fcc:	00 97       	sbiw	r24, 0x00	; 0
    1fce:	31 f0       	breq	.+12     	; 0x1fdc <EXT2_VID_SET_CALL_BACK+0x22>
	{
		EXTI_pvINT2Func = PTR;
    1fd0:	89 81       	ldd	r24, Y+1	; 0x01
    1fd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd4:	90 93 9e 01 	sts	0x019E, r25
    1fd8:	80 93 9d 01 	sts	0x019D, r24
	}
	else
	{

	}
}
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	cf 91       	pop	r28
    1fe2:	df 91       	pop	r29
    1fe4:	08 95       	ret

00001fe6 <__vector_1>:



void __vector_1(void)__attribute__((signal,used, externally_visible));
void __vector_1(void)
{
    1fe6:	1f 92       	push	r1
    1fe8:	0f 92       	push	r0
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	0f 92       	push	r0
    1fee:	11 24       	eor	r1, r1
    1ff0:	2f 93       	push	r18
    1ff2:	3f 93       	push	r19
    1ff4:	4f 93       	push	r20
    1ff6:	5f 93       	push	r21
    1ff8:	6f 93       	push	r22
    1ffa:	7f 93       	push	r23
    1ffc:	8f 93       	push	r24
    1ffe:	9f 93       	push	r25
    2000:	af 93       	push	r26
    2002:	bf 93       	push	r27
    2004:	ef 93       	push	r30
    2006:	ff 93       	push	r31
    2008:	df 93       	push	r29
    200a:	cf 93       	push	r28
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT0Func != NULL)
    2010:	80 91 99 01 	lds	r24, 0x0199
    2014:	90 91 9a 01 	lds	r25, 0x019A
    2018:	00 97       	sbiw	r24, 0x00	; 0
    201a:	29 f0       	breq	.+10     	; 0x2026 <__vector_1+0x40>
	{
		EXTI_pvINT0Func();
    201c:	e0 91 99 01 	lds	r30, 0x0199
    2020:	f0 91 9a 01 	lds	r31, 0x019A
    2024:	09 95       	icall
	}
}
    2026:	cf 91       	pop	r28
    2028:	df 91       	pop	r29
    202a:	ff 91       	pop	r31
    202c:	ef 91       	pop	r30
    202e:	bf 91       	pop	r27
    2030:	af 91       	pop	r26
    2032:	9f 91       	pop	r25
    2034:	8f 91       	pop	r24
    2036:	7f 91       	pop	r23
    2038:	6f 91       	pop	r22
    203a:	5f 91       	pop	r21
    203c:	4f 91       	pop	r20
    203e:	3f 91       	pop	r19
    2040:	2f 91       	pop	r18
    2042:	0f 90       	pop	r0
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	0f 90       	pop	r0
    2048:	1f 90       	pop	r1
    204a:	18 95       	reti

0000204c <__vector_2>:

void __vector_2(void)__attribute__((signal,used, externally_visible));
void __vector_2(void)
{
    204c:	1f 92       	push	r1
    204e:	0f 92       	push	r0
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	0f 92       	push	r0
    2054:	11 24       	eor	r1, r1
    2056:	2f 93       	push	r18
    2058:	3f 93       	push	r19
    205a:	4f 93       	push	r20
    205c:	5f 93       	push	r21
    205e:	6f 93       	push	r22
    2060:	7f 93       	push	r23
    2062:	8f 93       	push	r24
    2064:	9f 93       	push	r25
    2066:	af 93       	push	r26
    2068:	bf 93       	push	r27
    206a:	ef 93       	push	r30
    206c:	ff 93       	push	r31
    206e:	df 93       	push	r29
    2070:	cf 93       	push	r28
    2072:	cd b7       	in	r28, 0x3d	; 61
    2074:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT1Func != NULL)
    2076:	80 91 9b 01 	lds	r24, 0x019B
    207a:	90 91 9c 01 	lds	r25, 0x019C
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	29 f0       	breq	.+10     	; 0x208c <__vector_2+0x40>
	{
		EXTI_pvINT1Func();
    2082:	e0 91 9b 01 	lds	r30, 0x019B
    2086:	f0 91 9c 01 	lds	r31, 0x019C
    208a:	09 95       	icall
	}
}
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	ff 91       	pop	r31
    2092:	ef 91       	pop	r30
    2094:	bf 91       	pop	r27
    2096:	af 91       	pop	r26
    2098:	9f 91       	pop	r25
    209a:	8f 91       	pop	r24
    209c:	7f 91       	pop	r23
    209e:	6f 91       	pop	r22
    20a0:	5f 91       	pop	r21
    20a2:	4f 91       	pop	r20
    20a4:	3f 91       	pop	r19
    20a6:	2f 91       	pop	r18
    20a8:	0f 90       	pop	r0
    20aa:	0f be       	out	0x3f, r0	; 63
    20ac:	0f 90       	pop	r0
    20ae:	1f 90       	pop	r1
    20b0:	18 95       	reti

000020b2 <__vector_3>:

void __vector_3(void)__attribute__((signal,used, externally_visible));
void __vector_3(void)
{
    20b2:	1f 92       	push	r1
    20b4:	0f 92       	push	r0
    20b6:	0f b6       	in	r0, 0x3f	; 63
    20b8:	0f 92       	push	r0
    20ba:	11 24       	eor	r1, r1
    20bc:	2f 93       	push	r18
    20be:	3f 93       	push	r19
    20c0:	4f 93       	push	r20
    20c2:	5f 93       	push	r21
    20c4:	6f 93       	push	r22
    20c6:	7f 93       	push	r23
    20c8:	8f 93       	push	r24
    20ca:	9f 93       	push	r25
    20cc:	af 93       	push	r26
    20ce:	bf 93       	push	r27
    20d0:	ef 93       	push	r30
    20d2:	ff 93       	push	r31
    20d4:	df 93       	push	r29
    20d6:	cf 93       	push	r28
    20d8:	cd b7       	in	r28, 0x3d	; 61
    20da:	de b7       	in	r29, 0x3e	; 62
	if(EXTI_pvINT2Func != NULL)
    20dc:	80 91 9d 01 	lds	r24, 0x019D
    20e0:	90 91 9e 01 	lds	r25, 0x019E
    20e4:	00 97       	sbiw	r24, 0x00	; 0
    20e6:	29 f0       	breq	.+10     	; 0x20f2 <__vector_3+0x40>
	{
		EXTI_pvINT2Func();
    20e8:	e0 91 9d 01 	lds	r30, 0x019D
    20ec:	f0 91 9e 01 	lds	r31, 0x019E
    20f0:	09 95       	icall
	}
}
    20f2:	cf 91       	pop	r28
    20f4:	df 91       	pop	r29
    20f6:	ff 91       	pop	r31
    20f8:	ef 91       	pop	r30
    20fa:	bf 91       	pop	r27
    20fc:	af 91       	pop	r26
    20fe:	9f 91       	pop	r25
    2100:	8f 91       	pop	r24
    2102:	7f 91       	pop	r23
    2104:	6f 91       	pop	r22
    2106:	5f 91       	pop	r21
    2108:	4f 91       	pop	r20
    210a:	3f 91       	pop	r19
    210c:	2f 91       	pop	r18
    210e:	0f 90       	pop	r0
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	0f 90       	pop	r0
    2114:	1f 90       	pop	r1
    2116:	18 95       	reti

00002118 <DIO_u8SetPinValue>:
}
*/

// Set "Pin" Value
u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    2118:	df 93       	push	r29
    211a:	cf 93       	push	r28
    211c:	00 d0       	rcall	.+0      	; 0x211e <DIO_u8SetPinValue+0x6>
    211e:	00 d0       	rcall	.+0      	; 0x2120 <DIO_u8SetPinValue+0x8>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <DIO_u8SetPinValue+0xa>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	8a 83       	std	Y+2, r24	; 0x02
    2128:	6b 83       	std	Y+3, r22	; 0x03
    212a:	4c 83       	std	Y+4, r20	; 0x04
    u8 ERROR_FLAG = 0;
    212c:	19 82       	std	Y+1, r1	; 0x01

    switch (Copy_u8Port)
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	28 2f       	mov	r18, r24
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	3e 83       	std	Y+6, r19	; 0x06
    2136:	2d 83       	std	Y+5, r18	; 0x05
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	81 30       	cpi	r24, 0x01	; 1
    213e:	91 05       	cpc	r25, r1
    2140:	09 f4       	brne	.+2      	; 0x2144 <DIO_u8SetPinValue+0x2c>
    2142:	49 c0       	rjmp	.+146    	; 0x21d6 <DIO_u8SetPinValue+0xbe>
    2144:	2d 81       	ldd	r18, Y+5	; 0x05
    2146:	3e 81       	ldd	r19, Y+6	; 0x06
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	2c f4       	brge	.+10     	; 0x2158 <DIO_u8SetPinValue+0x40>
    214e:	8d 81       	ldd	r24, Y+5	; 0x05
    2150:	9e 81       	ldd	r25, Y+6	; 0x06
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	71 f0       	breq	.+28     	; 0x2172 <DIO_u8SetPinValue+0x5a>
    2156:	d4 c0       	rjmp	.+424    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
    2158:	2d 81       	ldd	r18, Y+5	; 0x05
    215a:	3e 81       	ldd	r19, Y+6	; 0x06
    215c:	22 30       	cpi	r18, 0x02	; 2
    215e:	31 05       	cpc	r19, r1
    2160:	09 f4       	brne	.+2      	; 0x2164 <DIO_u8SetPinValue+0x4c>
    2162:	6b c0       	rjmp	.+214    	; 0x223a <DIO_u8SetPinValue+0x122>
    2164:	8d 81       	ldd	r24, Y+5	; 0x05
    2166:	9e 81       	ldd	r25, Y+6	; 0x06
    2168:	83 30       	cpi	r24, 0x03	; 3
    216a:	91 05       	cpc	r25, r1
    216c:	09 f4       	brne	.+2      	; 0x2170 <DIO_u8SetPinValue+0x58>
    216e:	97 c0       	rjmp	.+302    	; 0x229e <DIO_u8SetPinValue+0x186>
    2170:	c7 c0       	rjmp	.+398    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
    {
    case DIO_u8PORTA:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    2172:	8c 81       	ldd	r24, Y+4	; 0x04
    2174:	81 30       	cpi	r24, 0x01	; 1
    2176:	a1 f4       	brne	.+40     	; 0x21a0 <DIO_u8SetPinValue+0x88>
            Set_Bit(PORTA, Copy_u8Pin);
    2178:	ab e3       	ldi	r26, 0x3B	; 59
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	eb e3       	ldi	r30, 0x3B	; 59
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	48 2f       	mov	r20, r24
    2184:	8b 81       	ldd	r24, Y+3	; 0x03
    2186:	28 2f       	mov	r18, r24
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	90 e0       	ldi	r25, 0x00	; 0
    218e:	02 2e       	mov	r0, r18
    2190:	02 c0       	rjmp	.+4      	; 0x2196 <DIO_u8SetPinValue+0x7e>
    2192:	88 0f       	add	r24, r24
    2194:	99 1f       	adc	r25, r25
    2196:	0a 94       	dec	r0
    2198:	e2 f7       	brpl	.-8      	; 0x2192 <DIO_u8SetPinValue+0x7a>
    219a:	84 2b       	or	r24, r20
    219c:	8c 93       	st	X, r24
    219e:	b0 c0       	rjmp	.+352    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    21a0:	8c 81       	ldd	r24, Y+4	; 0x04
    21a2:	88 23       	and	r24, r24
    21a4:	a9 f4       	brne	.+42     	; 0x21d0 <DIO_u8SetPinValue+0xb8>
            Clear_Bit(PORTA, Copy_u8Pin);
    21a6:	ab e3       	ldi	r26, 0x3B	; 59
    21a8:	b0 e0       	ldi	r27, 0x00	; 0
    21aa:	eb e3       	ldi	r30, 0x3B	; 59
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	80 81       	ld	r24, Z
    21b0:	48 2f       	mov	r20, r24
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	28 2f       	mov	r18, r24
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	81 e0       	ldi	r24, 0x01	; 1
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	02 2e       	mov	r0, r18
    21be:	02 c0       	rjmp	.+4      	; 0x21c4 <DIO_u8SetPinValue+0xac>
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	0a 94       	dec	r0
    21c6:	e2 f7       	brpl	.-8      	; 0x21c0 <DIO_u8SetPinValue+0xa8>
    21c8:	80 95       	com	r24
    21ca:	84 23       	and	r24, r20
    21cc:	8c 93       	st	X, r24
    21ce:	98 c0       	rjmp	.+304    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	89 83       	std	Y+1, r24	; 0x01
    21d4:	95 c0       	rjmp	.+298    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTB:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    21d6:	8c 81       	ldd	r24, Y+4	; 0x04
    21d8:	81 30       	cpi	r24, 0x01	; 1
    21da:	a1 f4       	brne	.+40     	; 0x2204 <DIO_u8SetPinValue+0xec>
            Set_Bit(PORTB, Copy_u8Pin);
    21dc:	a8 e3       	ldi	r26, 0x38	; 56
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e8 e3       	ldi	r30, 0x38	; 56
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	48 2f       	mov	r20, r24
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	28 2f       	mov	r18, r24
    21ec:	30 e0       	ldi	r19, 0x00	; 0
    21ee:	81 e0       	ldi	r24, 0x01	; 1
    21f0:	90 e0       	ldi	r25, 0x00	; 0
    21f2:	02 2e       	mov	r0, r18
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <DIO_u8SetPinValue+0xe2>
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	0a 94       	dec	r0
    21fc:	e2 f7       	brpl	.-8      	; 0x21f6 <DIO_u8SetPinValue+0xde>
    21fe:	84 2b       	or	r24, r20
    2200:	8c 93       	st	X, r24
    2202:	7e c0       	rjmp	.+252    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    2204:	8c 81       	ldd	r24, Y+4	; 0x04
    2206:	88 23       	and	r24, r24
    2208:	a9 f4       	brne	.+42     	; 0x2234 <DIO_u8SetPinValue+0x11c>
            Clear_Bit(PORTB, Copy_u8Pin);
    220a:	a8 e3       	ldi	r26, 0x38	; 56
    220c:	b0 e0       	ldi	r27, 0x00	; 0
    220e:	e8 e3       	ldi	r30, 0x38	; 56
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	80 81       	ld	r24, Z
    2214:	48 2f       	mov	r20, r24
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	90 e0       	ldi	r25, 0x00	; 0
    2220:	02 2e       	mov	r0, r18
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_u8SetPinValue+0x110>
    2224:	88 0f       	add	r24, r24
    2226:	99 1f       	adc	r25, r25
    2228:	0a 94       	dec	r0
    222a:	e2 f7       	brpl	.-8      	; 0x2224 <DIO_u8SetPinValue+0x10c>
    222c:	80 95       	com	r24
    222e:	84 23       	and	r24, r20
    2230:	8c 93       	st	X, r24
    2232:	66 c0       	rjmp	.+204    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	63 c0       	rjmp	.+198    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTC:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    223a:	8c 81       	ldd	r24, Y+4	; 0x04
    223c:	81 30       	cpi	r24, 0x01	; 1
    223e:	a1 f4       	brne	.+40     	; 0x2268 <DIO_u8SetPinValue+0x150>
            Set_Bit(PORTC, Copy_u8Pin);
    2240:	a5 e3       	ldi	r26, 0x35	; 53
    2242:	b0 e0       	ldi	r27, 0x00	; 0
    2244:	e5 e3       	ldi	r30, 0x35	; 53
    2246:	f0 e0       	ldi	r31, 0x00	; 0
    2248:	80 81       	ld	r24, Z
    224a:	48 2f       	mov	r20, r24
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	28 2f       	mov	r18, r24
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	02 2e       	mov	r0, r18
    2258:	02 c0       	rjmp	.+4      	; 0x225e <DIO_u8SetPinValue+0x146>
    225a:	88 0f       	add	r24, r24
    225c:	99 1f       	adc	r25, r25
    225e:	0a 94       	dec	r0
    2260:	e2 f7       	brpl	.-8      	; 0x225a <DIO_u8SetPinValue+0x142>
    2262:	84 2b       	or	r24, r20
    2264:	8c 93       	st	X, r24
    2266:	4c c0       	rjmp	.+152    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    2268:	8c 81       	ldd	r24, Y+4	; 0x04
    226a:	88 23       	and	r24, r24
    226c:	a9 f4       	brne	.+42     	; 0x2298 <DIO_u8SetPinValue+0x180>
            Clear_Bit(PORTC, Copy_u8Pin);
    226e:	a5 e3       	ldi	r26, 0x35	; 53
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	e5 e3       	ldi	r30, 0x35	; 53
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	48 2f       	mov	r20, r24
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	28 2f       	mov	r18, r24
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	02 2e       	mov	r0, r18
    2286:	02 c0       	rjmp	.+4      	; 0x228c <DIO_u8SetPinValue+0x174>
    2288:	88 0f       	add	r24, r24
    228a:	99 1f       	adc	r25, r25
    228c:	0a 94       	dec	r0
    228e:	e2 f7       	brpl	.-8      	; 0x2288 <DIO_u8SetPinValue+0x170>
    2290:	80 95       	com	r24
    2292:	84 23       	and	r24, r20
    2294:	8c 93       	st	X, r24
    2296:	34 c0       	rjmp	.+104    	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	31 c0       	rjmp	.+98     	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        break;

    case DIO_u8PORTD:
        if (Copy_u8Value == DIO_u8PIN_HIGH)
    229e:	8c 81       	ldd	r24, Y+4	; 0x04
    22a0:	81 30       	cpi	r24, 0x01	; 1
    22a2:	a1 f4       	brne	.+40     	; 0x22cc <DIO_u8SetPinValue+0x1b4>
            Set_Bit(PORTD, Copy_u8Pin);
    22a4:	a2 e3       	ldi	r26, 0x32	; 50
    22a6:	b0 e0       	ldi	r27, 0x00	; 0
    22a8:	e2 e3       	ldi	r30, 0x32	; 50
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	48 2f       	mov	r20, r24
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	28 2f       	mov	r18, r24
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	81 e0       	ldi	r24, 0x01	; 1
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	02 2e       	mov	r0, r18
    22bc:	02 c0       	rjmp	.+4      	; 0x22c2 <DIO_u8SetPinValue+0x1aa>
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	0a 94       	dec	r0
    22c4:	e2 f7       	brpl	.-8      	; 0x22be <DIO_u8SetPinValue+0x1a6>
    22c6:	84 2b       	or	r24, r20
    22c8:	8c 93       	st	X, r24
    22ca:	1a c0       	rjmp	.+52     	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        else if (Copy_u8Value == DIO_u8PIN_LOW)
    22cc:	8c 81       	ldd	r24, Y+4	; 0x04
    22ce:	88 23       	and	r24, r24
    22d0:	a9 f4       	brne	.+42     	; 0x22fc <DIO_u8SetPinValue+0x1e4>
            Clear_Bit(PORTD, Copy_u8Pin);
    22d2:	a2 e3       	ldi	r26, 0x32	; 50
    22d4:	b0 e0       	ldi	r27, 0x00	; 0
    22d6:	e2 e3       	ldi	r30, 0x32	; 50
    22d8:	f0 e0       	ldi	r31, 0x00	; 0
    22da:	80 81       	ld	r24, Z
    22dc:	48 2f       	mov	r20, r24
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	28 2f       	mov	r18, r24
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	90 e0       	ldi	r25, 0x00	; 0
    22e8:	02 2e       	mov	r0, r18
    22ea:	02 c0       	rjmp	.+4      	; 0x22f0 <DIO_u8SetPinValue+0x1d8>
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	0a 94       	dec	r0
    22f2:	e2 f7       	brpl	.-8      	; 0x22ec <DIO_u8SetPinValue+0x1d4>
    22f4:	80 95       	com	r24
    22f6:	84 23       	and	r24, r20
    22f8:	8c 93       	st	X, r24
    22fa:	02 c0       	rjmp	.+4      	; 0x2300 <DIO_u8SetPinValue+0x1e8>
        else
            ERROR_FLAG = 1;
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	89 83       	std	Y+1, r24	; 0x01

    default:
        break;
    }

    return ERROR_FLAG;
    2300:	89 81       	ldd	r24, Y+1	; 0x01
}
    2302:	26 96       	adiw	r28, 0x06	; 6
    2304:	0f b6       	in	r0, 0x3f	; 63
    2306:	f8 94       	cli
    2308:	de bf       	out	0x3e, r29	; 62
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	cd bf       	out	0x3d, r28	; 61
    230e:	cf 91       	pop	r28
    2310:	df 91       	pop	r29
    2312:	08 95       	ret

00002314 <DIO_u8SetPortValue>:
    return Local_u8Error;
}*/

// Set "Port" Value
u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    2314:	df 93       	push	r29
    2316:	cf 93       	push	r28
    2318:	00 d0       	rcall	.+0      	; 0x231a <DIO_u8SetPortValue+0x6>
    231a:	00 d0       	rcall	.+0      	; 0x231c <DIO_u8SetPortValue+0x8>
    231c:	0f 92       	push	r0
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	8a 83       	std	Y+2, r24	; 0x02
    2324:	6b 83       	std	Y+3, r22	; 0x03
    u8 Local_u8Error = 0;
    2326:	19 82       	std	Y+1, r1	; 0x01
    if (Copy_u8Port < 4)
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	84 30       	cpi	r24, 0x04	; 4
    232c:	98 f5       	brcc	.+102    	; 0x2394 <DIO_u8SetPortValue+0x80>
    {
        switch (Copy_u8Port)
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	28 2f       	mov	r18, r24
    2332:	30 e0       	ldi	r19, 0x00	; 0
    2334:	3d 83       	std	Y+5, r19	; 0x05
    2336:	2c 83       	std	Y+4, r18	; 0x04
    2338:	8c 81       	ldd	r24, Y+4	; 0x04
    233a:	9d 81       	ldd	r25, Y+5	; 0x05
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	91 05       	cpc	r25, r1
    2340:	d1 f0       	breq	.+52     	; 0x2376 <DIO_u8SetPortValue+0x62>
    2342:	2c 81       	ldd	r18, Y+4	; 0x04
    2344:	3d 81       	ldd	r19, Y+5	; 0x05
    2346:	22 30       	cpi	r18, 0x02	; 2
    2348:	31 05       	cpc	r19, r1
    234a:	2c f4       	brge	.+10     	; 0x2356 <DIO_u8SetPortValue+0x42>
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	9d 81       	ldd	r25, Y+5	; 0x05
    2350:	00 97       	sbiw	r24, 0x00	; 0
    2352:	61 f0       	breq	.+24     	; 0x236c <DIO_u8SetPortValue+0x58>
    2354:	21 c0       	rjmp	.+66     	; 0x2398 <DIO_u8SetPortValue+0x84>
    2356:	2c 81       	ldd	r18, Y+4	; 0x04
    2358:	3d 81       	ldd	r19, Y+5	; 0x05
    235a:	22 30       	cpi	r18, 0x02	; 2
    235c:	31 05       	cpc	r19, r1
    235e:	81 f0       	breq	.+32     	; 0x2380 <DIO_u8SetPortValue+0x6c>
    2360:	8c 81       	ldd	r24, Y+4	; 0x04
    2362:	9d 81       	ldd	r25, Y+5	; 0x05
    2364:	83 30       	cpi	r24, 0x03	; 3
    2366:	91 05       	cpc	r25, r1
    2368:	81 f0       	breq	.+32     	; 0x238a <DIO_u8SetPortValue+0x76>
    236a:	16 c0       	rjmp	.+44     	; 0x2398 <DIO_u8SetPortValue+0x84>
        {
        case DIO_u8PORTA:
            PORTA = Copy_u8Value;
    236c:	eb e3       	ldi	r30, 0x3B	; 59
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	80 83       	st	Z, r24
    2374:	11 c0       	rjmp	.+34     	; 0x2398 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTB:
            PORTB = Copy_u8Value;
    2376:	e8 e3       	ldi	r30, 0x38	; 56
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	80 83       	st	Z, r24
    237e:	0c c0       	rjmp	.+24     	; 0x2398 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTC:
            PORTC = Copy_u8Value;
    2380:	e5 e3       	ldi	r30, 0x35	; 53
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	8b 81       	ldd	r24, Y+3	; 0x03
    2386:	80 83       	st	Z, r24
    2388:	07 c0       	rjmp	.+14     	; 0x2398 <DIO_u8SetPortValue+0x84>
            break;
        case DIO_u8PORTD:
            PORTD = Copy_u8Value;
    238a:	e2 e3       	ldi	r30, 0x32	; 50
    238c:	f0 e0       	ldi	r31, 0x00	; 0
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	80 83       	st	Z, r24
    2392:	02 c0       	rjmp	.+4      	; 0x2398 <DIO_u8SetPortValue+0x84>
            break;
        }
    }
    else
    {
        Local_u8Error = 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	89 83       	std	Y+1, r24	; 0x01
    }

    return Local_u8Error;
    2398:	89 81       	ldd	r24, Y+1	; 0x01
}
    239a:	0f 90       	pop	r0
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <DIO_GetPinValue>:

// Get/Read "Pin" value
u8 DIO_GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_u8Value)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	27 97       	sbiw	r28, 0x07	; 7
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	89 83       	std	Y+1, r24	; 0x01
    23c0:	6a 83       	std	Y+2, r22	; 0x02
    23c2:	5c 83       	std	Y+4, r21	; 0x04
    23c4:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
    23c6:	89 81       	ldd	r24, Y+1	; 0x01
    23c8:	28 2f       	mov	r18, r24
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	3f 83       	std	Y+7, r19	; 0x07
    23ce:	2e 83       	std	Y+6, r18	; 0x06
    23d0:	4e 81       	ldd	r20, Y+6	; 0x06
    23d2:	5f 81       	ldd	r21, Y+7	; 0x07
    23d4:	41 30       	cpi	r20, 0x01	; 1
    23d6:	51 05       	cpc	r21, r1
    23d8:	59 f1       	breq	.+86     	; 0x2430 <DIO_GetPinValue+0x86>
    23da:	8e 81       	ldd	r24, Y+6	; 0x06
    23dc:	9f 81       	ldd	r25, Y+7	; 0x07
    23de:	82 30       	cpi	r24, 0x02	; 2
    23e0:	91 05       	cpc	r25, r1
    23e2:	34 f4       	brge	.+12     	; 0x23f0 <DIO_GetPinValue+0x46>
    23e4:	2e 81       	ldd	r18, Y+6	; 0x06
    23e6:	3f 81       	ldd	r19, Y+7	; 0x07
    23e8:	21 15       	cp	r18, r1
    23ea:	31 05       	cpc	r19, r1
    23ec:	69 f0       	breq	.+26     	; 0x2408 <DIO_GetPinValue+0x5e>
    23ee:	5c c0       	rjmp	.+184    	; 0x24a8 <DIO_GetPinValue+0xfe>
    23f0:	4e 81       	ldd	r20, Y+6	; 0x06
    23f2:	5f 81       	ldd	r21, Y+7	; 0x07
    23f4:	42 30       	cpi	r20, 0x02	; 2
    23f6:	51 05       	cpc	r21, r1
    23f8:	79 f1       	breq	.+94     	; 0x2458 <DIO_GetPinValue+0xae>
    23fa:	8e 81       	ldd	r24, Y+6	; 0x06
    23fc:	9f 81       	ldd	r25, Y+7	; 0x07
    23fe:	83 30       	cpi	r24, 0x03	; 3
    2400:	91 05       	cpc	r25, r1
    2402:	09 f4       	brne	.+2      	; 0x2406 <DIO_GetPinValue+0x5c>
    2404:	3d c0       	rjmp	.+122    	; 0x2480 <DIO_GetPinValue+0xd6>
    2406:	50 c0       	rjmp	.+160    	; 0x24a8 <DIO_GetPinValue+0xfe>
    {
    case DIO_u8PORTA:
        *Copy_u8Value = Get_Bit(PINA, Copy_u8Pin);
    2408:	e9 e3       	ldi	r30, 0x39	; 57
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	88 2f       	mov	r24, r24
    2416:	90 e0       	ldi	r25, 0x00	; 0
    2418:	a9 01       	movw	r20, r18
    241a:	02 c0       	rjmp	.+4      	; 0x2420 <DIO_GetPinValue+0x76>
    241c:	55 95       	asr	r21
    241e:	47 95       	ror	r20
    2420:	8a 95       	dec	r24
    2422:	e2 f7       	brpl	.-8      	; 0x241c <DIO_GetPinValue+0x72>
    2424:	ca 01       	movw	r24, r20
    2426:	81 70       	andi	r24, 0x01	; 1
    2428:	eb 81       	ldd	r30, Y+3	; 0x03
    242a:	fc 81       	ldd	r31, Y+4	; 0x04
    242c:	80 83       	st	Z, r24
    242e:	3e c0       	rjmp	.+124    	; 0x24ac <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTB:
        *Copy_u8Value = Get_Bit(PINB, Copy_u8Pin);
    2430:	e6 e3       	ldi	r30, 0x36	; 54
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	80 81       	ld	r24, Z
    2436:	28 2f       	mov	r18, r24
    2438:	30 e0       	ldi	r19, 0x00	; 0
    243a:	8a 81       	ldd	r24, Y+2	; 0x02
    243c:	88 2f       	mov	r24, r24
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	a9 01       	movw	r20, r18
    2442:	02 c0       	rjmp	.+4      	; 0x2448 <DIO_GetPinValue+0x9e>
    2444:	55 95       	asr	r21
    2446:	47 95       	ror	r20
    2448:	8a 95       	dec	r24
    244a:	e2 f7       	brpl	.-8      	; 0x2444 <DIO_GetPinValue+0x9a>
    244c:	ca 01       	movw	r24, r20
    244e:	81 70       	andi	r24, 0x01	; 1
    2450:	eb 81       	ldd	r30, Y+3	; 0x03
    2452:	fc 81       	ldd	r31, Y+4	; 0x04
    2454:	80 83       	st	Z, r24
    2456:	2a c0       	rjmp	.+84     	; 0x24ac <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTC:
        *Copy_u8Value = Get_Bit(PINC, Copy_u8Pin);
    2458:	e3 e3       	ldi	r30, 0x33	; 51
    245a:	f0 e0       	ldi	r31, 0x00	; 0
    245c:	80 81       	ld	r24, Z
    245e:	28 2f       	mov	r18, r24
    2460:	30 e0       	ldi	r19, 0x00	; 0
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a9 01       	movw	r20, r18
    246a:	02 c0       	rjmp	.+4      	; 0x2470 <DIO_GetPinValue+0xc6>
    246c:	55 95       	asr	r21
    246e:	47 95       	ror	r20
    2470:	8a 95       	dec	r24
    2472:	e2 f7       	brpl	.-8      	; 0x246c <DIO_GetPinValue+0xc2>
    2474:	ca 01       	movw	r24, r20
    2476:	81 70       	andi	r24, 0x01	; 1
    2478:	eb 81       	ldd	r30, Y+3	; 0x03
    247a:	fc 81       	ldd	r31, Y+4	; 0x04
    247c:	80 83       	st	Z, r24
    247e:	16 c0       	rjmp	.+44     	; 0x24ac <DIO_GetPinValue+0x102>
        break;
    case DIO_u8PORTD:
        *Copy_u8Value = Get_Bit(PIND, Copy_u8Pin);
    2480:	e0 e3       	ldi	r30, 0x30	; 48
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	28 2f       	mov	r18, r24
    2488:	30 e0       	ldi	r19, 0x00	; 0
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	88 2f       	mov	r24, r24
    248e:	90 e0       	ldi	r25, 0x00	; 0
    2490:	a9 01       	movw	r20, r18
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <DIO_GetPinValue+0xee>
    2494:	55 95       	asr	r21
    2496:	47 95       	ror	r20
    2498:	8a 95       	dec	r24
    249a:	e2 f7       	brpl	.-8      	; 0x2494 <DIO_GetPinValue+0xea>
    249c:	ca 01       	movw	r24, r20
    249e:	81 70       	andi	r24, 0x01	; 1
    24a0:	eb 81       	ldd	r30, Y+3	; 0x03
    24a2:	fc 81       	ldd	r31, Y+4	; 0x04
    24a4:	80 83       	st	Z, r24
    24a6:	02 c0       	rjmp	.+4      	; 0x24ac <DIO_GetPinValue+0x102>
        break;

    default:
    	return NOK;
    24a8:	1d 82       	std	Y+5, r1	; 0x05
    24aa:	02 c0       	rjmp	.+4      	; 0x24b0 <DIO_GetPinValue+0x106>
        break;
    }

    return OK;
    24ac:	51 e0       	ldi	r21, 0x01	; 1
    24ae:	5d 83       	std	Y+5, r21	; 0x05
    24b0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    24b2:	27 96       	adiw	r28, 0x07	; 7
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <DIO_u8GetPinValue>:


u8 DIO_u8GetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <DIO_u8GetPinValue+0x6>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <DIO_u8GetPinValue+0x8>
    24cc:	0f 92       	push	r0
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	8a 83       	std	Y+2, r24	; 0x02
    24d4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Value = 0;
    24d6:	19 82       	std	Y+1, r1	; 0x01

	 switch (Copy_u8Port)
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	28 2f       	mov	r18, r24
    24dc:	30 e0       	ldi	r19, 0x00	; 0
    24de:	3d 83       	std	Y+5, r19	; 0x05
    24e0:	2c 83       	std	Y+4, r18	; 0x04
    24e2:	4c 81       	ldd	r20, Y+4	; 0x04
    24e4:	5d 81       	ldd	r21, Y+5	; 0x05
    24e6:	41 30       	cpi	r20, 0x01	; 1
    24e8:	51 05       	cpc	r21, r1
    24ea:	41 f1       	breq	.+80     	; 0x253c <DIO_u8GetPinValue+0x78>
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	9d 81       	ldd	r25, Y+5	; 0x05
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	91 05       	cpc	r25, r1
    24f4:	34 f4       	brge	.+12     	; 0x2502 <DIO_u8GetPinValue+0x3e>
    24f6:	2c 81       	ldd	r18, Y+4	; 0x04
    24f8:	3d 81       	ldd	r19, Y+5	; 0x05
    24fa:	21 15       	cp	r18, r1
    24fc:	31 05       	cpc	r19, r1
    24fe:	61 f0       	breq	.+24     	; 0x2518 <DIO_u8GetPinValue+0x54>
    2500:	52 c0       	rjmp	.+164    	; 0x25a6 <DIO_u8GetPinValue+0xe2>
    2502:	4c 81       	ldd	r20, Y+4	; 0x04
    2504:	5d 81       	ldd	r21, Y+5	; 0x05
    2506:	42 30       	cpi	r20, 0x02	; 2
    2508:	51 05       	cpc	r21, r1
    250a:	51 f1       	breq	.+84     	; 0x2560 <DIO_u8GetPinValue+0x9c>
    250c:	8c 81       	ldd	r24, Y+4	; 0x04
    250e:	9d 81       	ldd	r25, Y+5	; 0x05
    2510:	83 30       	cpi	r24, 0x03	; 3
    2512:	91 05       	cpc	r25, r1
    2514:	b9 f1       	breq	.+110    	; 0x2584 <DIO_u8GetPinValue+0xc0>
    2516:	47 c0       	rjmp	.+142    	; 0x25a6 <DIO_u8GetPinValue+0xe2>
	    {
	    case DIO_u8PORTA:
	        Local_u8Value = Get_Bit(PINA, Copy_u8Pin);
    2518:	e9 e3       	ldi	r30, 0x39	; 57
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	28 2f       	mov	r18, r24
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	88 2f       	mov	r24, r24
    2526:	90 e0       	ldi	r25, 0x00	; 0
    2528:	a9 01       	movw	r20, r18
    252a:	02 c0       	rjmp	.+4      	; 0x2530 <DIO_u8GetPinValue+0x6c>
    252c:	55 95       	asr	r21
    252e:	47 95       	ror	r20
    2530:	8a 95       	dec	r24
    2532:	e2 f7       	brpl	.-8      	; 0x252c <DIO_u8GetPinValue+0x68>
    2534:	ca 01       	movw	r24, r20
    2536:	81 70       	andi	r24, 0x01	; 1
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	35 c0       	rjmp	.+106    	; 0x25a6 <DIO_u8GetPinValue+0xe2>
	        break;
	    case DIO_u8PORTB:
	    	Local_u8Value = Get_Bit(PINB, Copy_u8Pin);
    253c:	e6 e3       	ldi	r30, 0x36	; 54
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	28 2f       	mov	r18, r24
    2544:	30 e0       	ldi	r19, 0x00	; 0
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	a9 01       	movw	r20, r18
    254e:	02 c0       	rjmp	.+4      	; 0x2554 <DIO_u8GetPinValue+0x90>
    2550:	55 95       	asr	r21
    2552:	47 95       	ror	r20
    2554:	8a 95       	dec	r24
    2556:	e2 f7       	brpl	.-8      	; 0x2550 <DIO_u8GetPinValue+0x8c>
    2558:	ca 01       	movw	r24, r20
    255a:	81 70       	andi	r24, 0x01	; 1
    255c:	89 83       	std	Y+1, r24	; 0x01
    255e:	23 c0       	rjmp	.+70     	; 0x25a6 <DIO_u8GetPinValue+0xe2>
	        break;
	    case DIO_u8PORTC:
	    	Local_u8Value = Get_Bit(PINC, Copy_u8Pin);
    2560:	e3 e3       	ldi	r30, 0x33	; 51
    2562:	f0 e0       	ldi	r31, 0x00	; 0
    2564:	80 81       	ld	r24, Z
    2566:	28 2f       	mov	r18, r24
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	8b 81       	ldd	r24, Y+3	; 0x03
    256c:	88 2f       	mov	r24, r24
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a9 01       	movw	r20, r18
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <DIO_u8GetPinValue+0xb4>
    2574:	55 95       	asr	r21
    2576:	47 95       	ror	r20
    2578:	8a 95       	dec	r24
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <DIO_u8GetPinValue+0xb0>
    257c:	ca 01       	movw	r24, r20
    257e:	81 70       	andi	r24, 0x01	; 1
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	11 c0       	rjmp	.+34     	; 0x25a6 <DIO_u8GetPinValue+0xe2>
	        break;
	    case DIO_u8PORTD:
	    	Local_u8Value = Get_Bit(PIND, Copy_u8Pin);
    2584:	e0 e3       	ldi	r30, 0x30	; 48
    2586:	f0 e0       	ldi	r31, 0x00	; 0
    2588:	80 81       	ld	r24, Z
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	8b 81       	ldd	r24, Y+3	; 0x03
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a9 01       	movw	r20, r18
    2596:	02 c0       	rjmp	.+4      	; 0x259c <DIO_u8GetPinValue+0xd8>
    2598:	55 95       	asr	r21
    259a:	47 95       	ror	r20
    259c:	8a 95       	dec	r24
    259e:	e2 f7       	brpl	.-8      	; 0x2598 <DIO_u8GetPinValue+0xd4>
    25a0:	ca 01       	movw	r24, r20
    25a2:	81 70       	andi	r24, 0x01	; 1
    25a4:	89 83       	std	Y+1, r24	; 0x01
	        break;
	    default:
	        break;
	    }

	 return Local_u8Value;
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    25a8:	0f 90       	pop	r0
    25aa:	0f 90       	pop	r0
    25ac:	0f 90       	pop	r0
    25ae:	0f 90       	pop	r0
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <DIO_voidSetPortValue>:

void DIO_voidSetPortValue( u8 PORT_OUTPUT_VAL )
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	0f 92       	push	r0
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	89 83       	std	Y+1, r24	; 0x01

#if SELECTED_PORT == PORT_u8_A
    PORTA = PORT_OUTPUT_VAL;
    25c4:	eb e3       	ldi	r30, 0x3B	; 59
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	80 83       	st	Z, r24
    PORTD = PORT_OUTPUT_VAL;
#else

#endif

}
    25cc:	0f 90       	pop	r0
    25ce:	cf 91       	pop	r28
    25d0:	df 91       	pop	r29
    25d2:	08 95       	ret

000025d4 <ADC_voidInit>:

void (*ADC_pvFunc)(void);


void ADC_voidInit()
{
    25d4:	df 93       	push	r29
    25d6:	cf 93       	push	r28
    25d8:	cd b7       	in	r28, 0x3d	; 61
    25da:	de b7       	in	r29, 0x3e	; 62

#if 	VOLTAGE_REFERENCE == AVCC
	/* REFS1 -> 0, REFS0 -> 1 */
	Set_Bit(ADMUX, ADMUX_REFS0);
    25dc:	a7 e2       	ldi	r26, 0x27	; 39
    25de:	b0 e0       	ldi	r27, 0x00	; 0
    25e0:	e7 e2       	ldi	r30, 0x27	; 39
    25e2:	f0 e0       	ldi	r31, 0x00	; 0
    25e4:	80 81       	ld	r24, Z
    25e6:	80 64       	ori	r24, 0x40	; 64
    25e8:	8c 93       	st	X, r24
	Clear_Bit(ADMUX, ADMUX_REFS1);
    25ea:	a7 e2       	ldi	r26, 0x27	; 39
    25ec:	b0 e0       	ldi	r27, 0x00	; 0
    25ee:	e7 e2       	ldi	r30, 0x27	; 39
    25f0:	f0 e0       	ldi	r31, 0x00	; 0
    25f2:	80 81       	ld	r24, Z
    25f4:	8f 77       	andi	r24, 0x7F	; 127
    25f6:	8c 93       	st	X, r24
	Vref = 5;
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 ea       	ldi	r26, 0xA0	; 160
    25fe:	b0 e4       	ldi	r27, 0x40	; 64
    2600:	80 93 6c 01 	sts	0x016C, r24
    2604:	90 93 6d 01 	sts	0x016D, r25
    2608:	a0 93 6e 01 	sts	0x016E, r26
    260c:	b0 93 6f 01 	sts	0x016F, r27
	Clear_Bit(ADCSRA, ADCSRA_ADPS0);
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
#elif ADC_PRESCALER_SELECTION == DIVIDE_BY_128
	/* ADPS2 -> 1,  ADPS1 -> 1, ADPS0 -> 1 */
	Set_Bit(ADCSRA, ADCSRA_ADPS0);
    2610:	a6 e2       	ldi	r26, 0x26	; 38
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e6 e2       	ldi	r30, 0x26	; 38
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	81 60       	ori	r24, 0x01	; 1
    261c:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS1);
    261e:	a6 e2       	ldi	r26, 0x26	; 38
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e6 e2       	ldi	r30, 0x26	; 38
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	82 60       	ori	r24, 0x02	; 2
    262a:	8c 93       	st	X, r24
	Set_Bit(ADCSRA, ADCSRA_ADPS2);
    262c:	a6 e2       	ldi	r26, 0x26	; 38
    262e:	b0 e0       	ldi	r27, 0x00	; 0
    2630:	e6 e2       	ldi	r30, 0x26	; 38
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	84 60       	ori	r24, 0x04	; 4
    2638:	8c 93       	st	X, r24
#endif

#if		ADJUSTMENT == LEFT_ADJUSTMENT
	Set_Bit(ADMUX, ADMUX_ADLAR);
#elif   ADJUSTMENT == RIGHT_ADJUSTMENT
	Clear_Bit(ADMUX, ADMUX_ADLAR);
    263a:	a7 e2       	ldi	r26, 0x27	; 39
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e7 e2       	ldi	r30, 0x27	; 39
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	8f 7d       	andi	r24, 0xDF	; 223
    2646:	8c 93       	st	X, r24

#else
#error
#endif

}
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <ADC_voidEnable>:


void ADC_voidEnable()
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADEN);
    2656:	a6 e2       	ldi	r26, 0x26	; 38
    2658:	b0 e0       	ldi	r27, 0x00	; 0
    265a:	e6 e2       	ldi	r30, 0x26	; 38
    265c:	f0 e0       	ldi	r31, 0x00	; 0
    265e:	80 81       	ld	r24, Z
    2660:	80 68       	ori	r24, 0x80	; 128
    2662:	8c 93       	st	X, r24
}
    2664:	cf 91       	pop	r28
    2666:	df 91       	pop	r29
    2668:	08 95       	ret

0000266a <ADC_voidInterrputEnable>:

void ADC_voidInterrputEnable()
{
    266a:	df 93       	push	r29
    266c:	cf 93       	push	r28
    266e:	cd b7       	in	r28, 0x3d	; 61
    2670:	de b7       	in	r29, 0x3e	; 62
	Set_Bit(ADCSRA, ADCSRA_ADIE);
    2672:	a6 e2       	ldi	r26, 0x26	; 38
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	e6 e2       	ldi	r30, 0x26	; 38
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	88 60       	ori	r24, 0x08	; 8
    267e:	8c 93       	st	X, r24
}
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	08 95       	ret

00002686 <ADC_voidDisable>:

void ADC_voidDisable()
{
    2686:	df 93       	push	r29
    2688:	cf 93       	push	r28
    268a:	cd b7       	in	r28, 0x3d	; 61
    268c:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADEN);
    268e:	a6 e2       	ldi	r26, 0x26	; 38
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	e6 e2       	ldi	r30, 0x26	; 38
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	8f 77       	andi	r24, 0x7F	; 127
    269a:	8c 93       	st	X, r24
}
    269c:	cf 91       	pop	r28
    269e:	df 91       	pop	r29
    26a0:	08 95       	ret

000026a2 <ADC_u16ReadADC>:

u16 ADC_u16ReadADC()
{
    26a2:	df 93       	push	r29
    26a4:	cf 93       	push	r28
    26a6:	00 d0       	rcall	.+0      	; 0x26a8 <ADC_u16ReadADC+0x6>
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result=0;
    26ac:	1a 82       	std	Y+2, r1	; 0x02
    26ae:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = ( ADC_10Bit * Vref) / 1024;
    26b0:	e4 e2       	ldi	r30, 0x24	; 36
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	91 81       	ldd	r25, Z+1	; 0x01
    26b8:	cc 01       	movw	r24, r24
    26ba:	a0 e0       	ldi	r26, 0x00	; 0
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	bc 01       	movw	r22, r24
    26c0:	cd 01       	movw	r24, r26
    26c2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    26c6:	dc 01       	movw	r26, r24
    26c8:	cb 01       	movw	r24, r22
    26ca:	20 91 6c 01 	lds	r18, 0x016C
    26ce:	30 91 6d 01 	lds	r19, 0x016D
    26d2:	40 91 6e 01 	lds	r20, 0x016E
    26d6:	50 91 6f 01 	lds	r21, 0x016F
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	bc 01       	movw	r22, r24
    26e8:	cd 01       	movw	r24, r26
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e8       	ldi	r20, 0x80	; 128
    26f0:	54 e4       	ldi	r21, 0x44	; 68
    26f2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    26f6:	dc 01       	movw	r26, r24
    26f8:	cb 01       	movw	r24, r22
    26fa:	bc 01       	movw	r22, r24
    26fc:	cd 01       	movw	r24, r26
    26fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2702:	dc 01       	movw	r26, r24
    2704:	cb 01       	movw	r24, r22
    2706:	9a 83       	std	Y+2, r25	; 0x02
    2708:	89 83       	std	Y+1, r24	; 0x01

	return ADC_Result;
    270a:	89 81       	ldd	r24, Y+1	; 0x01
    270c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    270e:	0f 90       	pop	r0
    2710:	0f 90       	pop	r0
    2712:	cf 91       	pop	r28
    2714:	df 91       	pop	r29
    2716:	08 95       	ret

00002718 <ADC_voidStartConversion>:

void ADC_voidStartConversion(u8 Copy_u8Channel)
{
    2718:	df 93       	push	r29
    271a:	cf 93       	push	r28
    271c:	0f 92       	push	r0
    271e:	cd b7       	in	r28, 0x3d	; 61
    2720:	de b7       	in	r29, 0x3e	; 62
    2722:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    2724:	a7 e2       	ldi	r26, 0x27	; 39
    2726:	b0 e0       	ldi	r27, 0x00	; 0
    2728:	e7 e2       	ldi	r30, 0x27	; 39
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	80 81       	ld	r24, Z
    272e:	80 7e       	andi	r24, 0xE0	; 224
    2730:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    2732:	a7 e2       	ldi	r26, 0x27	; 39
    2734:	b0 e0       	ldi	r27, 0x00	; 0
    2736:	e7 e2       	ldi	r30, 0x27	; 39
    2738:	f0 e0       	ldi	r31, 0x00	; 0
    273a:	90 81       	ld	r25, Z
    273c:	89 81       	ldd	r24, Y+1	; 0x01
    273e:	89 2b       	or	r24, r25
    2740:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    2742:	a6 e2       	ldi	r26, 0x26	; 38
    2744:	b0 e0       	ldi	r27, 0x00	; 0
    2746:	e6 e2       	ldi	r30, 0x26	; 38
    2748:	f0 e0       	ldi	r31, 0x00	; 0
    274a:	80 81       	ld	r24, Z
    274c:	80 64       	ori	r24, 0x40	; 64
    274e:	8c 93       	st	X, r24

	// Polling { Busy Waiting } until conversion complete
	while( Get_Bit(ADCSRA, ADCSRA_ADIF) == 0 );
    2750:	e6 e2       	ldi	r30, 0x26	; 38
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	82 95       	swap	r24
    2758:	8f 70       	andi	r24, 0x0F	; 15
    275a:	88 2f       	mov	r24, r24
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	81 70       	andi	r24, 0x01	; 1
    2760:	90 70       	andi	r25, 0x00	; 0
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	a9 f3       	breq	.-22     	; 0x2750 <ADC_voidStartConversion+0x38>

	// Clear Conversion Flag
	Set_Bit(ADCSRA, ADCSRA_ADIF);
    2766:	a6 e2       	ldi	r26, 0x26	; 38
    2768:	b0 e0       	ldi	r27, 0x00	; 0
    276a:	e6 e2       	ldi	r30, 0x26	; 38
    276c:	f0 e0       	ldi	r31, 0x00	; 0
    276e:	80 81       	ld	r24, Z
    2770:	80 61       	ori	r24, 0x10	; 16
    2772:	8c 93       	st	X, r24

}
    2774:	0f 90       	pop	r0
    2776:	cf 91       	pop	r28
    2778:	df 91       	pop	r29
    277a:	08 95       	ret

0000277c <ADC_voidStartInterruptConversion>:

void ADC_voidStartInterruptConversion(u8 Copy_u8Channel)
{
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	0f 92       	push	r0
    2782:	cd b7       	in	r28, 0x3d	; 61
    2784:	de b7       	in	r29, 0x3e	; 62
    2786:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0b11100000;
    2788:	a7 e2       	ldi	r26, 0x27	; 39
    278a:	b0 e0       	ldi	r27, 0x00	; 0
    278c:	e7 e2       	ldi	r30, 0x27	; 39
    278e:	f0 e0       	ldi	r31, 0x00	; 0
    2790:	80 81       	ld	r24, Z
    2792:	80 7e       	andi	r24, 0xE0	; 224
    2794:	8c 93       	st	X, r24

	ADMUX |= Copy_u8Channel;
    2796:	a7 e2       	ldi	r26, 0x27	; 39
    2798:	b0 e0       	ldi	r27, 0x00	; 0
    279a:	e7 e2       	ldi	r30, 0x27	; 39
    279c:	f0 e0       	ldi	r31, 0x00	; 0
    279e:	90 81       	ld	r25, Z
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	89 2b       	or	r24, r25
    27a4:	8c 93       	st	X, r24

	// Start Conversion
	Set_Bit(ADCSRA, ADCSRA_ADSC);
    27a6:	a6 e2       	ldi	r26, 0x26	; 38
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	e6 e2       	ldi	r30, 0x26	; 38
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	80 64       	ori	r24, 0x40	; 64
    27b2:	8c 93       	st	X, r24

}
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <ADC_u16ReadADCInMV>:


u16 ADC_u16ReadADCInMV()
{
    27bc:	ef 92       	push	r14
    27be:	ff 92       	push	r15
    27c0:	0f 93       	push	r16
    27c2:	1f 93       	push	r17
    27c4:	df 93       	push	r29
    27c6:	cf 93       	push	r28
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <ADC_u16ReadADCInMV+0xe>
    27ca:	cd b7       	in	r28, 0x3d	; 61
    27cc:	de b7       	in	r29, 0x3e	; 62
	u16 ADC_Result= 0;
    27ce:	1a 82       	std	Y+2, r1	; 0x02
    27d0:	19 82       	std	Y+1, r1	; 0x01

	ADC_Result = (ADC_10Bit * 1000UL * (u8)Vref) / 1024UL;
    27d2:	e4 e2       	ldi	r30, 0x24	; 36
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	91 81       	ldd	r25, Z+1	; 0x01
    27da:	7c 01       	movw	r14, r24
    27dc:	00 e0       	ldi	r16, 0x00	; 0
    27de:	10 e0       	ldi	r17, 0x00	; 0
    27e0:	80 91 6c 01 	lds	r24, 0x016C
    27e4:	90 91 6d 01 	lds	r25, 0x016D
    27e8:	a0 91 6e 01 	lds	r26, 0x016E
    27ec:	b0 91 6f 01 	lds	r27, 0x016F
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	50 e0       	ldi	r21, 0x00	; 0
    2804:	c8 01       	movw	r24, r16
    2806:	b7 01       	movw	r22, r14
    2808:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__mulsi3>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	28 ee       	ldi	r18, 0xE8	; 232
    2812:	33 e0       	ldi	r19, 0x03	; 3
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	bc 01       	movw	r22, r24
    281a:	cd 01       	movw	r24, r26
    281c:	0e 94 dd 20 	call	0x41ba	; 0x41ba <__mulsi3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	07 2e       	mov	r0, r23
    2826:	7a e0       	ldi	r23, 0x0A	; 10
    2828:	b6 95       	lsr	r27
    282a:	a7 95       	ror	r26
    282c:	97 95       	ror	r25
    282e:	87 95       	ror	r24
    2830:	7a 95       	dec	r23
    2832:	d1 f7       	brne	.-12     	; 0x2828 <ADC_u16ReadADCInMV+0x6c>
    2834:	70 2d       	mov	r23, r0
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01

	return (u16)ADC_Result;
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02

}
    283e:	0f 90       	pop	r0
    2840:	0f 90       	pop	r0
    2842:	cf 91       	pop	r28
    2844:	df 91       	pop	r29
    2846:	1f 91       	pop	r17
    2848:	0f 91       	pop	r16
    284a:	ff 90       	pop	r15
    284c:	ef 90       	pop	r14
    284e:	08 95       	ret

00002850 <ADC_voidDisableInt>:

void ADC_voidDisableInt()
{
    2850:	df 93       	push	r29
    2852:	cf 93       	push	r28
    2854:	cd b7       	in	r28, 0x3d	; 61
    2856:	de b7       	in	r29, 0x3e	; 62
	Clear_Bit(ADCSRA, ADCSRA_ADIE);
    2858:	a6 e2       	ldi	r26, 0x26	; 38
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	e6 e2       	ldi	r30, 0x26	; 38
    285e:	f0 e0       	ldi	r31, 0x00	; 0
    2860:	80 81       	ld	r24, Z
    2862:	87 7f       	andi	r24, 0xF7	; 247
    2864:	8c 93       	st	X, r24
}
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <ADC_SetCallback>:

void ADC_SetCallback( void (*ptr) (void) )
{
    286c:	df 93       	push	r29
    286e:	cf 93       	push	r28
    2870:	00 d0       	rcall	.+0      	; 0x2872 <ADC_SetCallback+0x6>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9a 83       	std	Y+2, r25	; 0x02
    2878:	89 83       	std	Y+1, r24	; 0x01
	if( ptr != NULL )
    287a:	89 81       	ldd	r24, Y+1	; 0x01
    287c:	9a 81       	ldd	r25, Y+2	; 0x02
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	31 f0       	breq	.+12     	; 0x288e <ADC_SetCallback+0x22>
	{
		ADC_pvFunc = ptr;
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	90 93 a4 01 	sts	0x01A4, r25
    288a:	80 93 a3 01 	sts	0x01A3, r24
	}
}
    288e:	0f 90       	pop	r0
    2890:	0f 90       	pop	r0
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <__vector_16>:


void __vector_16(void)__attribute__((signal,used, externally_visible));
void __vector_16(void)
{
    2898:	1f 92       	push	r1
    289a:	0f 92       	push	r0
    289c:	0f b6       	in	r0, 0x3f	; 63
    289e:	0f 92       	push	r0
    28a0:	11 24       	eor	r1, r1
    28a2:	2f 93       	push	r18
    28a4:	3f 93       	push	r19
    28a6:	4f 93       	push	r20
    28a8:	5f 93       	push	r21
    28aa:	6f 93       	push	r22
    28ac:	7f 93       	push	r23
    28ae:	8f 93       	push	r24
    28b0:	9f 93       	push	r25
    28b2:	af 93       	push	r26
    28b4:	bf 93       	push	r27
    28b6:	ef 93       	push	r30
    28b8:	ff 93       	push	r31
    28ba:	df 93       	push	r29
    28bc:	cf 93       	push	r28
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
	if( ADC_pvFunc != NULL )
    28c2:	80 91 a3 01 	lds	r24, 0x01A3
    28c6:	90 91 a4 01 	lds	r25, 0x01A4
    28ca:	00 97       	sbiw	r24, 0x00	; 0
    28cc:	29 f0       	breq	.+10     	; 0x28d8 <__vector_16+0x40>
	{
		ADC_pvFunc();
    28ce:	e0 91 a3 01 	lds	r30, 0x01A3
    28d2:	f0 91 a4 01 	lds	r31, 0x01A4
    28d6:	09 95       	icall
	}
}
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	ff 91       	pop	r31
    28de:	ef 91       	pop	r30
    28e0:	bf 91       	pop	r27
    28e2:	af 91       	pop	r26
    28e4:	9f 91       	pop	r25
    28e6:	8f 91       	pop	r24
    28e8:	7f 91       	pop	r23
    28ea:	6f 91       	pop	r22
    28ec:	5f 91       	pop	r21
    28ee:	4f 91       	pop	r20
    28f0:	3f 91       	pop	r19
    28f2:	2f 91       	pop	r18
    28f4:	0f 90       	pop	r0
    28f6:	0f be       	out	0x3f, r0	; 63
    28f8:	0f 90       	pop	r0
    28fa:	1f 90       	pop	r1
    28fc:	18 95       	reti

000028fe <Motor_voidInit>:

#include "Motor_Interface.h"
#include "Motor_Config.h"

void Motor_voidInit()
{
    28fe:	df 93       	push	r29
    2900:	cf 93       	push	r28
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
	Motor_voidSetSpeed(MOTOR_INIT_SPEED);
    2906:	80 e0       	ldi	r24, 0x00	; 0
    2908:	0e 94 89 14 	call	0x2912	; 0x2912 <Motor_voidSetSpeed>
}
    290c:	cf 91       	pop	r28
    290e:	df 91       	pop	r29
    2910:	08 95       	ret

00002912 <Motor_voidSetSpeed>:

void Motor_voidSetSpeed(u8 Copy_u8Speed)		// 50 - 50% duty / 100 - 100% duty
{
    2912:	df 93       	push	r29
    2914:	cf 93       	push	r28
    2916:	00 d0       	rcall	.+0      	; 0x2918 <Motor_voidSetSpeed+0x6>
    2918:	0f 92       	push	r0
    291a:	cd b7       	in	r28, 0x3d	; 61
    291c:	de b7       	in	r29, 0x3e	; 62
    291e:	8b 83       	std	Y+3, r24	; 0x03
	u16 Local_u16SpeedMapping = ((f32)Copy_u8Speed / MAX_SPEED) * (MAX_PERIOD);		// 10 / 100 -> 0.1 * (20,000)
    2920:	8b 81       	ldd	r24, Y+3	; 0x03
    2922:	88 2f       	mov	r24, r24
    2924:	90 e0       	ldi	r25, 0x00	; 0
    2926:	a0 e0       	ldi	r26, 0x00	; 0
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	bc 01       	movw	r22, r24
    292c:	cd 01       	movw	r24, r26
    292e:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	48 ec       	ldi	r20, 0xC8	; 200
    2940:	52 e4       	ldi	r21, 0x42	; 66
    2942:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	20 e0       	ldi	r18, 0x00	; 0
    2950:	30 e4       	ldi	r19, 0x40	; 64
    2952:	4c e9       	ldi	r20, 0x9C	; 156
    2954:	56 e4       	ldi	r21, 0x46	; 70
    2956:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    295a:	dc 01       	movw	r26, r24
    295c:	cb 01       	movw	r24, r22
    295e:	bc 01       	movw	r22, r24
    2960:	cd 01       	movw	r24, r26
    2962:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2966:	dc 01       	movw	r26, r24
    2968:	cb 01       	movw	r24, r22
    296a:	9a 83       	std	Y+2, r25	; 0x02
    296c:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Speed > 0){
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	88 23       	and	r24, r24
    2972:	39 f0       	breq	.+14     	; 0x2982 <Motor_voidSetSpeed+0x70>
		// Init Timer 1
		TIMER1_voidInit();
    2974:	0e 94 75 0b 	call	0x16ea	; 0x16ea <TIMER1_voidInit>
		// Set OCR1A
		TIMER1_voidSetDutyCycle(Local_u16SpeedMapping);
    2978:	89 81       	ldd	r24, Y+1	; 0x01
    297a:	9a 81       	ldd	r25, Y+2	; 0x02
    297c:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <TIMER1_voidSetDutyCycle>
    2980:	02 c0       	rjmp	.+4      	; 0x2986 <Motor_voidSetSpeed+0x74>
	}
	else{
		TIMER1_voidStop();
    2982:	0e 94 10 0c 	call	0x1820	; 0x1820 <TIMER1_voidStop>
	}


}
    2986:	0f 90       	pop	r0
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	cf 91       	pop	r28
    298e:	df 91       	pop	r29
    2990:	08 95       	ret

00002992 <LED_voidInit>:

#include "LED_Config.h"
#include "LED_Interface.h"

void LED_voidInit()
{
    2992:	df 93       	push	r29
    2994:	cf 93       	push	r28
    2996:	cd b7       	in	r28, 0x3d	; 61
    2998:	de b7       	in	r29, 0x3e	; 62
	LED_voidRIGHT(LED_OFF);
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <LED_voidRIGHT>
	LED_voidLEFT(LED_OFF);
    29a0:	80 e0       	ldi	r24, 0x00	; 0
    29a2:	0e 94 f7 14 	call	0x29ee	; 0x29ee <LED_voidLEFT>
	LED_voidFRONT(LED_OFF);
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	0e 94 23 15 	call	0x2a46	; 0x2a46 <LED_voidFRONT>
	LED_voidBACK(LED_OFF);
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <LED_voidBACK>
}
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <LED_voidRIGHT>:

void LED_voidRIGHT(u8 Copy_u8State)
{
    29b8:	df 93       	push	r29
    29ba:	cf 93       	push	r28
    29bc:	0f 92       	push	r0
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
    29c2:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == LED_ON)
    29c4:	89 81       	ldd	r24, Y+1	; 0x01
    29c6:	81 30       	cpi	r24, 0x01	; 1
    29c8:	31 f4       	brne	.+12     	; 0x29d6 <LED_voidRIGHT+0x1e>
	{
		DIO_u8SetPinValue(LED_RIGHT,DIO_u8PIN_HIGH);
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	66 e0       	ldi	r22, 0x06	; 6
    29ce:	41 e0       	ldi	r20, 0x01	; 1
    29d0:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
    29d4:	08 c0       	rjmp	.+16     	; 0x29e6 <LED_voidRIGHT+0x2e>

	}
	else if(Copy_u8State == LED_OFF)
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	88 23       	and	r24, r24
    29da:	29 f4       	brne	.+10     	; 0x29e6 <LED_voidRIGHT+0x2e>
	{
		DIO_u8SetPinValue(LED_RIGHT,DIO_u8PIN_LOW);
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	66 e0       	ldi	r22, 0x06	; 6
    29e0:	40 e0       	ldi	r20, 0x00	; 0
    29e2:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	}
}
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <LED_voidLEFT>:
void LED_voidLEFT(u8 Copy_u8State)
{
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	0f 92       	push	r0
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == LED_ON)
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	81 30       	cpi	r24, 0x01	; 1
    29fe:	31 f4       	brne	.+12     	; 0x2a0c <LED_voidLEFT+0x1e>
	{
		DIO_u8SetPinValue(LED_LEFT,DIO_u8PIN_HIGH);
    2a00:	80 e0       	ldi	r24, 0x00	; 0
    2a02:	67 e0       	ldi	r22, 0x07	; 7
    2a04:	41 e0       	ldi	r20, 0x01	; 1
    2a06:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
    2a0a:	08 c0       	rjmp	.+16     	; 0x2a1c <LED_voidLEFT+0x2e>
	}
	else if(Copy_u8State == LED_OFF)
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	88 23       	and	r24, r24
    2a10:	29 f4       	brne	.+10     	; 0x2a1c <LED_voidLEFT+0x2e>
	{
		DIO_u8SetPinValue(LED_LEFT,DIO_u8PIN_LOW);
    2a12:	80 e0       	ldi	r24, 0x00	; 0
    2a14:	67 e0       	ldi	r22, 0x07	; 7
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	}
}
    2a1c:	0f 90       	pop	r0
    2a1e:	cf 91       	pop	r28
    2a20:	df 91       	pop	r29
    2a22:	08 95       	ret

00002a24 <LED_voidCloseTraffic>:
void LED_voidCloseTraffic(void)
{
    2a24:	df 93       	push	r29
    2a26:	cf 93       	push	r28
    2a28:	cd b7       	in	r28, 0x3d	; 61
    2a2a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(LED_RIGHT, DIO_u8PIN_LOW);
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	66 e0       	ldi	r22, 0x06	; 6
    2a30:	40 e0       	ldi	r20, 0x00	; 0
    2a32:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LED_LEFT, DIO_u8PIN_LOW);
    2a36:	80 e0       	ldi	r24, 0x00	; 0
    2a38:	67 e0       	ldi	r22, 0x07	; 7
    2a3a:	40 e0       	ldi	r20, 0x00	; 0
    2a3c:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <LED_voidFRONT>:
void LED_voidFRONT(u8 Copy_u8State)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	0f 92       	push	r0
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == LED_ON)
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	31 f4       	brne	.+12     	; 0x2a64 <LED_voidFRONT+0x1e>
	{
		DIO_u8SetPinValue(LED_FRONT, DIO_u8PIN_HIGH);
    2a58:	80 e0       	ldi	r24, 0x00	; 0
    2a5a:	64 e0       	ldi	r22, 0x04	; 4
    2a5c:	41 e0       	ldi	r20, 0x01	; 1
    2a5e:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
    2a62:	05 c0       	rjmp	.+10     	; 0x2a6e <LED_voidFRONT+0x28>
	}
	else
	{
		DIO_u8SetPinValue(LED_FRONT, DIO_u8PIN_LOW);
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	64 e0       	ldi	r22, 0x04	; 4
    2a68:	40 e0       	ldi	r20, 0x00	; 0
    2a6a:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	}
}
    2a6e:	0f 90       	pop	r0
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <LED_voidBACK>:
void LED_voidBACK(u8 Copy_u8State)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	0f 92       	push	r0
    2a7c:	cd b7       	in	r28, 0x3d	; 61
    2a7e:	de b7       	in	r29, 0x3e	; 62
    2a80:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_u8State == LED_ON)
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	81 30       	cpi	r24, 0x01	; 1
    2a86:	31 f4       	brne	.+12     	; 0x2a94 <LED_voidBACK+0x1e>
	{
		DIO_u8SetPinValue(LED_BACK, DIO_u8PIN_HIGH);
    2a88:	80 e0       	ldi	r24, 0x00	; 0
    2a8a:	65 e0       	ldi	r22, 0x05	; 5
    2a8c:	41 e0       	ldi	r20, 0x01	; 1
    2a8e:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
    2a92:	05 c0       	rjmp	.+10     	; 0x2a9e <LED_voidBACK+0x28>
	}
	else
	{
		DIO_u8SetPinValue(LED_BACK, DIO_u8PIN_LOW);
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	65 e0       	ldi	r22, 0x05	; 5
    2a98:	40 e0       	ldi	r20, 0x00	; 0
    2a9a:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	}
}
    2a9e:	0f 90       	pop	r0
    2aa0:	cf 91       	pop	r28
    2aa2:	df 91       	pop	r29
    2aa4:	08 95       	ret

00002aa6 <LCD_voidInit>:
#include "LCD_Private.h"

#include "avr/delay.h"


void LCD_voidInit(){
    2aa6:	0f 93       	push	r16
    2aa8:	1f 93       	push	r17
    2aaa:	df 93       	push	r29
    2aac:	cf 93       	push	r28
    2aae:	cd b7       	in	r28, 0x3d	; 61
    2ab0:	de b7       	in	r29, 0x3e	; 62
    2ab2:	cc 58       	subi	r28, 0x8C	; 140
    2ab4:	d0 40       	sbci	r29, 0x00	; 0
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	fe 01       	movw	r30, r28
    2ac2:	e7 57       	subi	r30, 0x77	; 119
    2ac4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ac6:	80 e0       	ldi	r24, 0x00	; 0
    2ac8:	90 e0       	ldi	r25, 0x00	; 0
    2aca:	ac e0       	ldi	r26, 0x0C	; 12
    2acc:	b2 e4       	ldi	r27, 0x42	; 66
    2ace:	80 83       	st	Z, r24
    2ad0:	91 83       	std	Z+1, r25	; 0x01
    2ad2:	a2 83       	std	Z+2, r26	; 0x02
    2ad4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad6:	8e 01       	movw	r16, r28
    2ad8:	0b 57       	subi	r16, 0x7B	; 123
    2ada:	1f 4f       	sbci	r17, 0xFF	; 255
    2adc:	fe 01       	movw	r30, r28
    2ade:	e7 57       	subi	r30, 0x77	; 119
    2ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    2ae2:	60 81       	ld	r22, Z
    2ae4:	71 81       	ldd	r23, Z+1	; 0x01
    2ae6:	82 81       	ldd	r24, Z+2	; 0x02
    2ae8:	93 81       	ldd	r25, Z+3	; 0x03
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	55 e4       	ldi	r21, 0x45	; 69
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	f8 01       	movw	r30, r16
    2afc:	80 83       	st	Z, r24
    2afe:	91 83       	std	Z+1, r25	; 0x01
    2b00:	a2 83       	std	Z+2, r26	; 0x02
    2b02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2b04:	fe 01       	movw	r30, r28
    2b06:	eb 57       	subi	r30, 0x7B	; 123
    2b08:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0a:	60 81       	ld	r22, Z
    2b0c:	71 81       	ldd	r23, Z+1	; 0x01
    2b0e:	82 81       	ldd	r24, Z+2	; 0x02
    2b10:	93 81       	ldd	r25, Z+3	; 0x03
    2b12:	20 e0       	ldi	r18, 0x00	; 0
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	40 e8       	ldi	r20, 0x80	; 128
    2b18:	5f e3       	ldi	r21, 0x3F	; 63
    2b1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b1e:	88 23       	and	r24, r24
    2b20:	44 f4       	brge	.+16     	; 0x2b32 <LCD_voidInit+0x8c>
		__ticks = 1;
    2b22:	fe 01       	movw	r30, r28
    2b24:	ed 57       	subi	r30, 0x7D	; 125
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	81 e0       	ldi	r24, 0x01	; 1
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	91 83       	std	Z+1, r25	; 0x01
    2b2e:	80 83       	st	Z, r24
    2b30:	64 c0       	rjmp	.+200    	; 0x2bfa <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2b32:	fe 01       	movw	r30, r28
    2b34:	eb 57       	subi	r30, 0x7B	; 123
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	60 81       	ld	r22, Z
    2b3a:	71 81       	ldd	r23, Z+1	; 0x01
    2b3c:	82 81       	ldd	r24, Z+2	; 0x02
    2b3e:	93 81       	ldd	r25, Z+3	; 0x03
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	3f ef       	ldi	r19, 0xFF	; 255
    2b44:	4f e7       	ldi	r20, 0x7F	; 127
    2b46:	57 e4       	ldi	r21, 0x47	; 71
    2b48:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b4c:	18 16       	cp	r1, r24
    2b4e:	0c f0       	brlt	.+2      	; 0x2b52 <LCD_voidInit+0xac>
    2b50:	43 c0       	rjmp	.+134    	; 0x2bd8 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b52:	fe 01       	movw	r30, r28
    2b54:	e7 57       	subi	r30, 0x77	; 119
    2b56:	ff 4f       	sbci	r31, 0xFF	; 255
    2b58:	60 81       	ld	r22, Z
    2b5a:	71 81       	ldd	r23, Z+1	; 0x01
    2b5c:	82 81       	ldd	r24, Z+2	; 0x02
    2b5e:	93 81       	ldd	r25, Z+3	; 0x03
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	30 e0       	ldi	r19, 0x00	; 0
    2b64:	40 e2       	ldi	r20, 0x20	; 32
    2b66:	51 e4       	ldi	r21, 0x41	; 65
    2b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	8e 01       	movw	r16, r28
    2b72:	0d 57       	subi	r16, 0x7D	; 125
    2b74:	1f 4f       	sbci	r17, 0xFF	; 255
    2b76:	bc 01       	movw	r22, r24
    2b78:	cd 01       	movw	r24, r26
    2b7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7e:	dc 01       	movw	r26, r24
    2b80:	cb 01       	movw	r24, r22
    2b82:	f8 01       	movw	r30, r16
    2b84:	91 83       	std	Z+1, r25	; 0x01
    2b86:	80 83       	st	Z, r24
    2b88:	1f c0       	rjmp	.+62     	; 0x2bc8 <LCD_voidInit+0x122>
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	ef 57       	subi	r30, 0x7F	; 127
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 e9       	ldi	r24, 0x90	; 144
    2b92:	91 e0       	ldi	r25, 0x01	; 1
    2b94:	91 83       	std	Z+1, r25	; 0x01
    2b96:	80 83       	st	Z, r24
    2b98:	fe 01       	movw	r30, r28
    2b9a:	ef 57       	subi	r30, 0x7F	; 127
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	80 81       	ld	r24, Z
    2ba0:	91 81       	ldd	r25, Z+1	; 0x01
    2ba2:	01 97       	sbiw	r24, 0x01	; 1
    2ba4:	f1 f7       	brne	.-4      	; 0x2ba2 <LCD_voidInit+0xfc>
    2ba6:	fe 01       	movw	r30, r28
    2ba8:	ef 57       	subi	r30, 0x7F	; 127
    2baa:	ff 4f       	sbci	r31, 0xFF	; 255
    2bac:	91 83       	std	Z+1, r25	; 0x01
    2bae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bb0:	de 01       	movw	r26, r28
    2bb2:	ad 57       	subi	r26, 0x7D	; 125
    2bb4:	bf 4f       	sbci	r27, 0xFF	; 255
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ed 57       	subi	r30, 0x7D	; 125
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	80 81       	ld	r24, Z
    2bbe:	91 81       	ldd	r25, Z+1	; 0x01
    2bc0:	01 97       	sbiw	r24, 0x01	; 1
    2bc2:	11 96       	adiw	r26, 0x01	; 1
    2bc4:	9c 93       	st	X, r25
    2bc6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bc8:	fe 01       	movw	r30, r28
    2bca:	ed 57       	subi	r30, 0x7D	; 125
    2bcc:	ff 4f       	sbci	r31, 0xFF	; 255
    2bce:	80 81       	ld	r24, Z
    2bd0:	91 81       	ldd	r25, Z+1	; 0x01
    2bd2:	00 97       	sbiw	r24, 0x00	; 0
    2bd4:	d1 f6       	brne	.-76     	; 0x2b8a <LCD_voidInit+0xe4>
    2bd6:	27 c0       	rjmp	.+78     	; 0x2c26 <LCD_voidInit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bd8:	8e 01       	movw	r16, r28
    2bda:	0d 57       	subi	r16, 0x7D	; 125
    2bdc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bde:	fe 01       	movw	r30, r28
    2be0:	eb 57       	subi	r30, 0x7B	; 123
    2be2:	ff 4f       	sbci	r31, 0xFF	; 255
    2be4:	60 81       	ld	r22, Z
    2be6:	71 81       	ldd	r23, Z+1	; 0x01
    2be8:	82 81       	ldd	r24, Z+2	; 0x02
    2bea:	93 81       	ldd	r25, Z+3	; 0x03
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	f8 01       	movw	r30, r16
    2bf6:	91 83       	std	Z+1, r25	; 0x01
    2bf8:	80 83       	st	Z, r24
    2bfa:	de 01       	movw	r26, r28
    2bfc:	a1 58       	subi	r26, 0x81	; 129
    2bfe:	bf 4f       	sbci	r27, 0xFF	; 255
    2c00:	fe 01       	movw	r30, r28
    2c02:	ed 57       	subi	r30, 0x7D	; 125
    2c04:	ff 4f       	sbci	r31, 0xFF	; 255
    2c06:	80 81       	ld	r24, Z
    2c08:	91 81       	ldd	r25, Z+1	; 0x01
    2c0a:	8d 93       	st	X+, r24
    2c0c:	9c 93       	st	X, r25
    2c0e:	fe 01       	movw	r30, r28
    2c10:	e1 58       	subi	r30, 0x81	; 129
    2c12:	ff 4f       	sbci	r31, 0xFF	; 255
    2c14:	80 81       	ld	r24, Z
    2c16:	91 81       	ldd	r25, Z+1	; 0x01
    2c18:	01 97       	sbiw	r24, 0x01	; 1
    2c1a:	f1 f7       	brne	.-4      	; 0x2c18 <LCD_voidInit+0x172>
    2c1c:	fe 01       	movw	r30, r28
    2c1e:	e1 58       	subi	r30, 0x81	; 129
    2c20:	ff 4f       	sbci	r31, 0xFF	; 255
    2c22:	91 83       	std	Z+1, r25	; 0x01
    2c24:	80 83       	st	Z, r24
	_delay_ms(35);
#if LCD_BITS == LCD_4_BIT_MODE
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2c26:	80 e3       	ldi	r24, 0x30	; 48
    2c28:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_voidSendInitCommand>
    2c2c:	fe 01       	movw	r30, r28
    2c2e:	e5 58       	subi	r30, 0x85	; 133
    2c30:	ff 4f       	sbci	r31, 0xFF	; 255
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	a0 ea       	ldi	r26, 0xA0	; 160
    2c38:	b0 e4       	ldi	r27, 0x40	; 64
    2c3a:	80 83       	st	Z, r24
    2c3c:	91 83       	std	Z+1, r25	; 0x01
    2c3e:	a2 83       	std	Z+2, r26	; 0x02
    2c40:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c42:	8e 01       	movw	r16, r28
    2c44:	09 58       	subi	r16, 0x89	; 137
    2c46:	1f 4f       	sbci	r17, 0xFF	; 255
    2c48:	fe 01       	movw	r30, r28
    2c4a:	e5 58       	subi	r30, 0x85	; 133
    2c4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4e:	60 81       	ld	r22, Z
    2c50:	71 81       	ldd	r23, Z+1	; 0x01
    2c52:	82 81       	ldd	r24, Z+2	; 0x02
    2c54:	93 81       	ldd	r25, Z+3	; 0x03
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	4a e7       	ldi	r20, 0x7A	; 122
    2c5c:	55 e4       	ldi	r21, 0x45	; 69
    2c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c62:	dc 01       	movw	r26, r24
    2c64:	cb 01       	movw	r24, r22
    2c66:	f8 01       	movw	r30, r16
    2c68:	80 83       	st	Z, r24
    2c6a:	91 83       	std	Z+1, r25	; 0x01
    2c6c:	a2 83       	std	Z+2, r26	; 0x02
    2c6e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c70:	fe 01       	movw	r30, r28
    2c72:	e9 58       	subi	r30, 0x89	; 137
    2c74:	ff 4f       	sbci	r31, 0xFF	; 255
    2c76:	60 81       	ld	r22, Z
    2c78:	71 81       	ldd	r23, Z+1	; 0x01
    2c7a:	82 81       	ldd	r24, Z+2	; 0x02
    2c7c:	93 81       	ldd	r25, Z+3	; 0x03
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	40 e8       	ldi	r20, 0x80	; 128
    2c84:	5f e3       	ldi	r21, 0x3F	; 63
    2c86:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c8a:	88 23       	and	r24, r24
    2c8c:	44 f4       	brge	.+16     	; 0x2c9e <LCD_voidInit+0x1f8>
		__ticks = 1;
    2c8e:	fe 01       	movw	r30, r28
    2c90:	eb 58       	subi	r30, 0x8B	; 139
    2c92:	ff 4f       	sbci	r31, 0xFF	; 255
    2c94:	81 e0       	ldi	r24, 0x01	; 1
    2c96:	90 e0       	ldi	r25, 0x00	; 0
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
    2c9c:	64 c0       	rjmp	.+200    	; 0x2d66 <LCD_voidInit+0x2c0>
	else if (__tmp > 65535)
    2c9e:	fe 01       	movw	r30, r28
    2ca0:	e9 58       	subi	r30, 0x89	; 137
    2ca2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ca4:	60 81       	ld	r22, Z
    2ca6:	71 81       	ldd	r23, Z+1	; 0x01
    2ca8:	82 81       	ldd	r24, Z+2	; 0x02
    2caa:	93 81       	ldd	r25, Z+3	; 0x03
    2cac:	20 e0       	ldi	r18, 0x00	; 0
    2cae:	3f ef       	ldi	r19, 0xFF	; 255
    2cb0:	4f e7       	ldi	r20, 0x7F	; 127
    2cb2:	57 e4       	ldi	r21, 0x47	; 71
    2cb4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2cb8:	18 16       	cp	r1, r24
    2cba:	0c f0       	brlt	.+2      	; 0x2cbe <LCD_voidInit+0x218>
    2cbc:	43 c0       	rjmp	.+134    	; 0x2d44 <LCD_voidInit+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	fe 01       	movw	r30, r28
    2cc0:	e5 58       	subi	r30, 0x85	; 133
    2cc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cc4:	60 81       	ld	r22, Z
    2cc6:	71 81       	ldd	r23, Z+1	; 0x01
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	40 e2       	ldi	r20, 0x20	; 32
    2cd2:	51 e4       	ldi	r21, 0x41	; 65
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8e 01       	movw	r16, r28
    2cde:	0b 58       	subi	r16, 0x8B	; 139
    2ce0:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce2:	bc 01       	movw	r22, r24
    2ce4:	cd 01       	movw	r24, r26
    2ce6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cea:	dc 01       	movw	r26, r24
    2cec:	cb 01       	movw	r24, r22
    2cee:	f8 01       	movw	r30, r16
    2cf0:	91 83       	std	Z+1, r25	; 0x01
    2cf2:	80 83       	st	Z, r24
    2cf4:	1f c0       	rjmp	.+62     	; 0x2d34 <LCD_voidInit+0x28e>
    2cf6:	fe 01       	movw	r30, r28
    2cf8:	ed 58       	subi	r30, 0x8D	; 141
    2cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    2cfc:	80 e9       	ldi	r24, 0x90	; 144
    2cfe:	91 e0       	ldi	r25, 0x01	; 1
    2d00:	91 83       	std	Z+1, r25	; 0x01
    2d02:	80 83       	st	Z, r24
    2d04:	fe 01       	movw	r30, r28
    2d06:	ed 58       	subi	r30, 0x8D	; 141
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	91 81       	ldd	r25, Z+1	; 0x01
    2d0e:	01 97       	sbiw	r24, 0x01	; 1
    2d10:	f1 f7       	brne	.-4      	; 0x2d0e <LCD_voidInit+0x268>
    2d12:	fe 01       	movw	r30, r28
    2d14:	ed 58       	subi	r30, 0x8D	; 141
    2d16:	ff 4f       	sbci	r31, 0xFF	; 255
    2d18:	91 83       	std	Z+1, r25	; 0x01
    2d1a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d1c:	de 01       	movw	r26, r28
    2d1e:	ab 58       	subi	r26, 0x8B	; 139
    2d20:	bf 4f       	sbci	r27, 0xFF	; 255
    2d22:	fe 01       	movw	r30, r28
    2d24:	eb 58       	subi	r30, 0x8B	; 139
    2d26:	ff 4f       	sbci	r31, 0xFF	; 255
    2d28:	80 81       	ld	r24, Z
    2d2a:	91 81       	ldd	r25, Z+1	; 0x01
    2d2c:	01 97       	sbiw	r24, 0x01	; 1
    2d2e:	11 96       	adiw	r26, 0x01	; 1
    2d30:	9c 93       	st	X, r25
    2d32:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d34:	fe 01       	movw	r30, r28
    2d36:	eb 58       	subi	r30, 0x8B	; 139
    2d38:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3a:	80 81       	ld	r24, Z
    2d3c:	91 81       	ldd	r25, Z+1	; 0x01
    2d3e:	00 97       	sbiw	r24, 0x00	; 0
    2d40:	d1 f6       	brne	.-76     	; 0x2cf6 <LCD_voidInit+0x250>
    2d42:	27 c0       	rjmp	.+78     	; 0x2d92 <LCD_voidInit+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d44:	8e 01       	movw	r16, r28
    2d46:	0b 58       	subi	r16, 0x8B	; 139
    2d48:	1f 4f       	sbci	r17, 0xFF	; 255
    2d4a:	fe 01       	movw	r30, r28
    2d4c:	e9 58       	subi	r30, 0x89	; 137
    2d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d50:	60 81       	ld	r22, Z
    2d52:	71 81       	ldd	r23, Z+1	; 0x01
    2d54:	82 81       	ldd	r24, Z+2	; 0x02
    2d56:	93 81       	ldd	r25, Z+3	; 0x03
    2d58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d5c:	dc 01       	movw	r26, r24
    2d5e:	cb 01       	movw	r24, r22
    2d60:	f8 01       	movw	r30, r16
    2d62:	91 83       	std	Z+1, r25	; 0x01
    2d64:	80 83       	st	Z, r24
    2d66:	de 01       	movw	r26, r28
    2d68:	af 58       	subi	r26, 0x8F	; 143
    2d6a:	bf 4f       	sbci	r27, 0xFF	; 255
    2d6c:	fe 01       	movw	r30, r28
    2d6e:	eb 58       	subi	r30, 0x8B	; 139
    2d70:	ff 4f       	sbci	r31, 0xFF	; 255
    2d72:	80 81       	ld	r24, Z
    2d74:	91 81       	ldd	r25, Z+1	; 0x01
    2d76:	8d 93       	st	X+, r24
    2d78:	9c 93       	st	X, r25
    2d7a:	fe 01       	movw	r30, r28
    2d7c:	ef 58       	subi	r30, 0x8F	; 143
    2d7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2d80:	80 81       	ld	r24, Z
    2d82:	91 81       	ldd	r25, Z+1	; 0x01
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	f1 f7       	brne	.-4      	; 0x2d84 <LCD_voidInit+0x2de>
    2d88:	fe 01       	movw	r30, r28
    2d8a:	ef 58       	subi	r30, 0x8F	; 143
    2d8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8e:	91 83       	std	Z+1, r25	; 0x01
    2d90:	80 83       	st	Z, r24
	_delay_ms(5);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2d92:	80 e3       	ldi	r24, 0x30	; 48
    2d94:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_voidSendInitCommand>
    2d98:	fe 01       	movw	r30, r28
    2d9a:	e3 59       	subi	r30, 0x93	; 147
    2d9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d9e:	80 e0       	ldi	r24, 0x00	; 0
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	a0 e8       	ldi	r26, 0x80	; 128
    2da4:	bf e3       	ldi	r27, 0x3F	; 63
    2da6:	80 83       	st	Z, r24
    2da8:	91 83       	std	Z+1, r25	; 0x01
    2daa:	a2 83       	std	Z+2, r26	; 0x02
    2dac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dae:	8e 01       	movw	r16, r28
    2db0:	07 59       	subi	r16, 0x97	; 151
    2db2:	1f 4f       	sbci	r17, 0xFF	; 255
    2db4:	fe 01       	movw	r30, r28
    2db6:	e3 59       	subi	r30, 0x93	; 147
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	60 81       	ld	r22, Z
    2dbc:	71 81       	ldd	r23, Z+1	; 0x01
    2dbe:	82 81       	ldd	r24, Z+2	; 0x02
    2dc0:	93 81       	ldd	r25, Z+3	; 0x03
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4a e7       	ldi	r20, 0x7A	; 122
    2dc8:	55 e4       	ldi	r21, 0x45	; 69
    2dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dce:	dc 01       	movw	r26, r24
    2dd0:	cb 01       	movw	r24, r22
    2dd2:	f8 01       	movw	r30, r16
    2dd4:	80 83       	st	Z, r24
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	a2 83       	std	Z+2, r26	; 0x02
    2dda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ddc:	fe 01       	movw	r30, r28
    2dde:	e7 59       	subi	r30, 0x97	; 151
    2de0:	ff 4f       	sbci	r31, 0xFF	; 255
    2de2:	60 81       	ld	r22, Z
    2de4:	71 81       	ldd	r23, Z+1	; 0x01
    2de6:	82 81       	ldd	r24, Z+2	; 0x02
    2de8:	93 81       	ldd	r25, Z+3	; 0x03
    2dea:	20 e0       	ldi	r18, 0x00	; 0
    2dec:	30 e0       	ldi	r19, 0x00	; 0
    2dee:	40 e8       	ldi	r20, 0x80	; 128
    2df0:	5f e3       	ldi	r21, 0x3F	; 63
    2df2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2df6:	88 23       	and	r24, r24
    2df8:	44 f4       	brge	.+16     	; 0x2e0a <LCD_voidInit+0x364>
		__ticks = 1;
    2dfa:	fe 01       	movw	r30, r28
    2dfc:	e9 59       	subi	r30, 0x99	; 153
    2dfe:	ff 4f       	sbci	r31, 0xFF	; 255
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	90 e0       	ldi	r25, 0x00	; 0
    2e04:	91 83       	std	Z+1, r25	; 0x01
    2e06:	80 83       	st	Z, r24
    2e08:	64 c0       	rjmp	.+200    	; 0x2ed2 <LCD_voidInit+0x42c>
	else if (__tmp > 65535)
    2e0a:	fe 01       	movw	r30, r28
    2e0c:	e7 59       	subi	r30, 0x97	; 151
    2e0e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e10:	60 81       	ld	r22, Z
    2e12:	71 81       	ldd	r23, Z+1	; 0x01
    2e14:	82 81       	ldd	r24, Z+2	; 0x02
    2e16:	93 81       	ldd	r25, Z+3	; 0x03
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	3f ef       	ldi	r19, 0xFF	; 255
    2e1c:	4f e7       	ldi	r20, 0x7F	; 127
    2e1e:	57 e4       	ldi	r21, 0x47	; 71
    2e20:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e24:	18 16       	cp	r1, r24
    2e26:	0c f0       	brlt	.+2      	; 0x2e2a <LCD_voidInit+0x384>
    2e28:	43 c0       	rjmp	.+134    	; 0x2eb0 <LCD_voidInit+0x40a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e3 59       	subi	r30, 0x93	; 147
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	60 81       	ld	r22, Z
    2e32:	71 81       	ldd	r23, Z+1	; 0x01
    2e34:	82 81       	ldd	r24, Z+2	; 0x02
    2e36:	93 81       	ldd	r25, Z+3	; 0x03
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	40 e2       	ldi	r20, 0x20	; 32
    2e3e:	51 e4       	ldi	r21, 0x41	; 65
    2e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	8e 01       	movw	r16, r28
    2e4a:	09 59       	subi	r16, 0x99	; 153
    2e4c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e4e:	bc 01       	movw	r22, r24
    2e50:	cd 01       	movw	r24, r26
    2e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	f8 01       	movw	r30, r16
    2e5c:	91 83       	std	Z+1, r25	; 0x01
    2e5e:	80 83       	st	Z, r24
    2e60:	1f c0       	rjmp	.+62     	; 0x2ea0 <LCD_voidInit+0x3fa>
    2e62:	fe 01       	movw	r30, r28
    2e64:	eb 59       	subi	r30, 0x9B	; 155
    2e66:	ff 4f       	sbci	r31, 0xFF	; 255
    2e68:	80 e9       	ldi	r24, 0x90	; 144
    2e6a:	91 e0       	ldi	r25, 0x01	; 1
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	80 83       	st	Z, r24
    2e70:	fe 01       	movw	r30, r28
    2e72:	eb 59       	subi	r30, 0x9B	; 155
    2e74:	ff 4f       	sbci	r31, 0xFF	; 255
    2e76:	80 81       	ld	r24, Z
    2e78:	91 81       	ldd	r25, Z+1	; 0x01
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <LCD_voidInit+0x3d4>
    2e7e:	fe 01       	movw	r30, r28
    2e80:	eb 59       	subi	r30, 0x9B	; 155
    2e82:	ff 4f       	sbci	r31, 0xFF	; 255
    2e84:	91 83       	std	Z+1, r25	; 0x01
    2e86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e88:	de 01       	movw	r26, r28
    2e8a:	a9 59       	subi	r26, 0x99	; 153
    2e8c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e8e:	fe 01       	movw	r30, r28
    2e90:	e9 59       	subi	r30, 0x99	; 153
    2e92:	ff 4f       	sbci	r31, 0xFF	; 255
    2e94:	80 81       	ld	r24, Z
    2e96:	91 81       	ldd	r25, Z+1	; 0x01
    2e98:	01 97       	sbiw	r24, 0x01	; 1
    2e9a:	11 96       	adiw	r26, 0x01	; 1
    2e9c:	9c 93       	st	X, r25
    2e9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	e9 59       	subi	r30, 0x99	; 153
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	d1 f6       	brne	.-76     	; 0x2e62 <LCD_voidInit+0x3bc>
    2eae:	27 c0       	rjmp	.+78     	; 0x2efe <LCD_voidInit+0x458>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2eb0:	8e 01       	movw	r16, r28
    2eb2:	09 59       	subi	r16, 0x99	; 153
    2eb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb6:	fe 01       	movw	r30, r28
    2eb8:	e7 59       	subi	r30, 0x97	; 151
    2eba:	ff 4f       	sbci	r31, 0xFF	; 255
    2ebc:	60 81       	ld	r22, Z
    2ebe:	71 81       	ldd	r23, Z+1	; 0x01
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	f8 01       	movw	r30, r16
    2ece:	91 83       	std	Z+1, r25	; 0x01
    2ed0:	80 83       	st	Z, r24
    2ed2:	de 01       	movw	r26, r28
    2ed4:	ad 59       	subi	r26, 0x9D	; 157
    2ed6:	bf 4f       	sbci	r27, 0xFF	; 255
    2ed8:	fe 01       	movw	r30, r28
    2eda:	e9 59       	subi	r30, 0x99	; 153
    2edc:	ff 4f       	sbci	r31, 0xFF	; 255
    2ede:	80 81       	ld	r24, Z
    2ee0:	91 81       	ldd	r25, Z+1	; 0x01
    2ee2:	8d 93       	st	X+, r24
    2ee4:	9c 93       	st	X, r25
    2ee6:	fe 01       	movw	r30, r28
    2ee8:	ed 59       	subi	r30, 0x9D	; 157
    2eea:	ff 4f       	sbci	r31, 0xFF	; 255
    2eec:	80 81       	ld	r24, Z
    2eee:	91 81       	ldd	r25, Z+1	; 0x01
    2ef0:	01 97       	sbiw	r24, 0x01	; 1
    2ef2:	f1 f7       	brne	.-4      	; 0x2ef0 <LCD_voidInit+0x44a>
    2ef4:	fe 01       	movw	r30, r28
    2ef6:	ed 59       	subi	r30, 0x9D	; 157
    2ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    2efa:	91 83       	std	Z+1, r25	; 0x01
    2efc:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_SpecialFunctionSet);
    2efe:	80 e3       	ldi	r24, 0x30	; 48
    2f00:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_voidSendInitCommand>
    2f04:	fe 01       	movw	r30, r28
    2f06:	e1 5a       	subi	r30, 0xA1	; 161
    2f08:	ff 4f       	sbci	r31, 0xFF	; 255
    2f0a:	80 e0       	ldi	r24, 0x00	; 0
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a0 e8       	ldi	r26, 0x80	; 128
    2f10:	bf e3       	ldi	r27, 0x3F	; 63
    2f12:	80 83       	st	Z, r24
    2f14:	91 83       	std	Z+1, r25	; 0x01
    2f16:	a2 83       	std	Z+2, r26	; 0x02
    2f18:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1a:	8e 01       	movw	r16, r28
    2f1c:	05 5a       	subi	r16, 0xA5	; 165
    2f1e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f20:	fe 01       	movw	r30, r28
    2f22:	e1 5a       	subi	r30, 0xA1	; 161
    2f24:	ff 4f       	sbci	r31, 0xFF	; 255
    2f26:	60 81       	ld	r22, Z
    2f28:	71 81       	ldd	r23, Z+1	; 0x01
    2f2a:	82 81       	ldd	r24, Z+2	; 0x02
    2f2c:	93 81       	ldd	r25, Z+3	; 0x03
    2f2e:	20 e0       	ldi	r18, 0x00	; 0
    2f30:	30 e0       	ldi	r19, 0x00	; 0
    2f32:	4a e7       	ldi	r20, 0x7A	; 122
    2f34:	55 e4       	ldi	r21, 0x45	; 69
    2f36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	f8 01       	movw	r30, r16
    2f40:	80 83       	st	Z, r24
    2f42:	91 83       	std	Z+1, r25	; 0x01
    2f44:	a2 83       	std	Z+2, r26	; 0x02
    2f46:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2f48:	fe 01       	movw	r30, r28
    2f4a:	e5 5a       	subi	r30, 0xA5	; 165
    2f4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4e:	60 81       	ld	r22, Z
    2f50:	71 81       	ldd	r23, Z+1	; 0x01
    2f52:	82 81       	ldd	r24, Z+2	; 0x02
    2f54:	93 81       	ldd	r25, Z+3	; 0x03
    2f56:	20 e0       	ldi	r18, 0x00	; 0
    2f58:	30 e0       	ldi	r19, 0x00	; 0
    2f5a:	40 e8       	ldi	r20, 0x80	; 128
    2f5c:	5f e3       	ldi	r21, 0x3F	; 63
    2f5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f62:	88 23       	and	r24, r24
    2f64:	44 f4       	brge	.+16     	; 0x2f76 <LCD_voidInit+0x4d0>
		__ticks = 1;
    2f66:	fe 01       	movw	r30, r28
    2f68:	e7 5a       	subi	r30, 0xA7	; 167
    2f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	91 83       	std	Z+1, r25	; 0x01
    2f72:	80 83       	st	Z, r24
    2f74:	64 c0       	rjmp	.+200    	; 0x303e <LCD_voidInit+0x598>
	else if (__tmp > 65535)
    2f76:	fe 01       	movw	r30, r28
    2f78:	e5 5a       	subi	r30, 0xA5	; 165
    2f7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f7c:	60 81       	ld	r22, Z
    2f7e:	71 81       	ldd	r23, Z+1	; 0x01
    2f80:	82 81       	ldd	r24, Z+2	; 0x02
    2f82:	93 81       	ldd	r25, Z+3	; 0x03
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	3f ef       	ldi	r19, 0xFF	; 255
    2f88:	4f e7       	ldi	r20, 0x7F	; 127
    2f8a:	57 e4       	ldi	r21, 0x47	; 71
    2f8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f90:	18 16       	cp	r1, r24
    2f92:	0c f0       	brlt	.+2      	; 0x2f96 <LCD_voidInit+0x4f0>
    2f94:	43 c0       	rjmp	.+134    	; 0x301c <LCD_voidInit+0x576>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f96:	fe 01       	movw	r30, r28
    2f98:	e1 5a       	subi	r30, 0xA1	; 161
    2f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f9c:	60 81       	ld	r22, Z
    2f9e:	71 81       	ldd	r23, Z+1	; 0x01
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	20 e0       	ldi	r18, 0x00	; 0
    2fa6:	30 e0       	ldi	r19, 0x00	; 0
    2fa8:	40 e2       	ldi	r20, 0x20	; 32
    2faa:	51 e4       	ldi	r21, 0x41	; 65
    2fac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fb0:	dc 01       	movw	r26, r24
    2fb2:	cb 01       	movw	r24, r22
    2fb4:	8e 01       	movw	r16, r28
    2fb6:	07 5a       	subi	r16, 0xA7	; 167
    2fb8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fba:	bc 01       	movw	r22, r24
    2fbc:	cd 01       	movw	r24, r26
    2fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fc2:	dc 01       	movw	r26, r24
    2fc4:	cb 01       	movw	r24, r22
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	91 83       	std	Z+1, r25	; 0x01
    2fca:	80 83       	st	Z, r24
    2fcc:	1f c0       	rjmp	.+62     	; 0x300c <LCD_voidInit+0x566>
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e9 5a       	subi	r30, 0xA9	; 169
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 e9       	ldi	r24, 0x90	; 144
    2fd6:	91 e0       	ldi	r25, 0x01	; 1
    2fd8:	91 83       	std	Z+1, r25	; 0x01
    2fda:	80 83       	st	Z, r24
    2fdc:	fe 01       	movw	r30, r28
    2fde:	e9 5a       	subi	r30, 0xA9	; 169
    2fe0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fe2:	80 81       	ld	r24, Z
    2fe4:	91 81       	ldd	r25, Z+1	; 0x01
    2fe6:	01 97       	sbiw	r24, 0x01	; 1
    2fe8:	f1 f7       	brne	.-4      	; 0x2fe6 <LCD_voidInit+0x540>
    2fea:	fe 01       	movw	r30, r28
    2fec:	e9 5a       	subi	r30, 0xA9	; 169
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	91 83       	std	Z+1, r25	; 0x01
    2ff2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ff4:	de 01       	movw	r26, r28
    2ff6:	a7 5a       	subi	r26, 0xA7	; 167
    2ff8:	bf 4f       	sbci	r27, 0xFF	; 255
    2ffa:	fe 01       	movw	r30, r28
    2ffc:	e7 5a       	subi	r30, 0xA7	; 167
    2ffe:	ff 4f       	sbci	r31, 0xFF	; 255
    3000:	80 81       	ld	r24, Z
    3002:	91 81       	ldd	r25, Z+1	; 0x01
    3004:	01 97       	sbiw	r24, 0x01	; 1
    3006:	11 96       	adiw	r26, 0x01	; 1
    3008:	9c 93       	st	X, r25
    300a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300c:	fe 01       	movw	r30, r28
    300e:	e7 5a       	subi	r30, 0xA7	; 167
    3010:	ff 4f       	sbci	r31, 0xFF	; 255
    3012:	80 81       	ld	r24, Z
    3014:	91 81       	ldd	r25, Z+1	; 0x01
    3016:	00 97       	sbiw	r24, 0x00	; 0
    3018:	d1 f6       	brne	.-76     	; 0x2fce <LCD_voidInit+0x528>
    301a:	27 c0       	rjmp	.+78     	; 0x306a <LCD_voidInit+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    301c:	8e 01       	movw	r16, r28
    301e:	07 5a       	subi	r16, 0xA7	; 167
    3020:	1f 4f       	sbci	r17, 0xFF	; 255
    3022:	fe 01       	movw	r30, r28
    3024:	e5 5a       	subi	r30, 0xA5	; 165
    3026:	ff 4f       	sbci	r31, 0xFF	; 255
    3028:	60 81       	ld	r22, Z
    302a:	71 81       	ldd	r23, Z+1	; 0x01
    302c:	82 81       	ldd	r24, Z+2	; 0x02
    302e:	93 81       	ldd	r25, Z+3	; 0x03
    3030:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3034:	dc 01       	movw	r26, r24
    3036:	cb 01       	movw	r24, r22
    3038:	f8 01       	movw	r30, r16
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	80 83       	st	Z, r24
    303e:	de 01       	movw	r26, r28
    3040:	ab 5a       	subi	r26, 0xAB	; 171
    3042:	bf 4f       	sbci	r27, 0xFF	; 255
    3044:	fe 01       	movw	r30, r28
    3046:	e7 5a       	subi	r30, 0xA7	; 167
    3048:	ff 4f       	sbci	r31, 0xFF	; 255
    304a:	80 81       	ld	r24, Z
    304c:	91 81       	ldd	r25, Z+1	; 0x01
    304e:	8d 93       	st	X+, r24
    3050:	9c 93       	st	X, r25
    3052:	fe 01       	movw	r30, r28
    3054:	eb 5a       	subi	r30, 0xAB	; 171
    3056:	ff 4f       	sbci	r31, 0xFF	; 255
    3058:	80 81       	ld	r24, Z
    305a:	91 81       	ldd	r25, Z+1	; 0x01
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <LCD_voidInit+0x5b6>
    3060:	fe 01       	movw	r30, r28
    3062:	eb 5a       	subi	r30, 0xAB	; 171
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	91 83       	std	Z+1, r25	; 0x01
    3068:	80 83       	st	Z, r24
	_delay_ms(1);
	LCD_voidSendInitCommand(LCD_4BitMode);
    306a:	80 e2       	ldi	r24, 0x20	; 32
    306c:	0e 94 43 1c 	call	0x3886	; 0x3886 <LCD_voidSendInitCommand>
    3070:	fe 01       	movw	r30, r28
    3072:	ef 5a       	subi	r30, 0xAF	; 175
    3074:	ff 4f       	sbci	r31, 0xFF	; 255
    3076:	80 e0       	ldi	r24, 0x00	; 0
    3078:	90 e0       	ldi	r25, 0x00	; 0
    307a:	a0 e8       	ldi	r26, 0x80	; 128
    307c:	bf e3       	ldi	r27, 0x3F	; 63
    307e:	80 83       	st	Z, r24
    3080:	91 83       	std	Z+1, r25	; 0x01
    3082:	a2 83       	std	Z+2, r26	; 0x02
    3084:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3086:	8e 01       	movw	r16, r28
    3088:	03 5b       	subi	r16, 0xB3	; 179
    308a:	1f 4f       	sbci	r17, 0xFF	; 255
    308c:	fe 01       	movw	r30, r28
    308e:	ef 5a       	subi	r30, 0xAF	; 175
    3090:	ff 4f       	sbci	r31, 0xFF	; 255
    3092:	60 81       	ld	r22, Z
    3094:	71 81       	ldd	r23, Z+1	; 0x01
    3096:	82 81       	ldd	r24, Z+2	; 0x02
    3098:	93 81       	ldd	r25, Z+3	; 0x03
    309a:	20 e0       	ldi	r18, 0x00	; 0
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	4a e7       	ldi	r20, 0x7A	; 122
    30a0:	55 e4       	ldi	r21, 0x45	; 69
    30a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30a6:	dc 01       	movw	r26, r24
    30a8:	cb 01       	movw	r24, r22
    30aa:	f8 01       	movw	r30, r16
    30ac:	80 83       	st	Z, r24
    30ae:	91 83       	std	Z+1, r25	; 0x01
    30b0:	a2 83       	std	Z+2, r26	; 0x02
    30b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    30b4:	fe 01       	movw	r30, r28
    30b6:	e3 5b       	subi	r30, 0xB3	; 179
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	60 81       	ld	r22, Z
    30bc:	71 81       	ldd	r23, Z+1	; 0x01
    30be:	82 81       	ldd	r24, Z+2	; 0x02
    30c0:	93 81       	ldd	r25, Z+3	; 0x03
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	30 e0       	ldi	r19, 0x00	; 0
    30c6:	40 e8       	ldi	r20, 0x80	; 128
    30c8:	5f e3       	ldi	r21, 0x3F	; 63
    30ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30ce:	88 23       	and	r24, r24
    30d0:	44 f4       	brge	.+16     	; 0x30e2 <LCD_voidInit+0x63c>
		__ticks = 1;
    30d2:	fe 01       	movw	r30, r28
    30d4:	e5 5b       	subi	r30, 0xB5	; 181
    30d6:	ff 4f       	sbci	r31, 0xFF	; 255
    30d8:	81 e0       	ldi	r24, 0x01	; 1
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	91 83       	std	Z+1, r25	; 0x01
    30de:	80 83       	st	Z, r24
    30e0:	64 c0       	rjmp	.+200    	; 0x31aa <LCD_voidInit+0x704>
	else if (__tmp > 65535)
    30e2:	fe 01       	movw	r30, r28
    30e4:	e3 5b       	subi	r30, 0xB3	; 179
    30e6:	ff 4f       	sbci	r31, 0xFF	; 255
    30e8:	60 81       	ld	r22, Z
    30ea:	71 81       	ldd	r23, Z+1	; 0x01
    30ec:	82 81       	ldd	r24, Z+2	; 0x02
    30ee:	93 81       	ldd	r25, Z+3	; 0x03
    30f0:	20 e0       	ldi	r18, 0x00	; 0
    30f2:	3f ef       	ldi	r19, 0xFF	; 255
    30f4:	4f e7       	ldi	r20, 0x7F	; 127
    30f6:	57 e4       	ldi	r21, 0x47	; 71
    30f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30fc:	18 16       	cp	r1, r24
    30fe:	0c f0       	brlt	.+2      	; 0x3102 <LCD_voidInit+0x65c>
    3100:	43 c0       	rjmp	.+134    	; 0x3188 <LCD_voidInit+0x6e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3102:	fe 01       	movw	r30, r28
    3104:	ef 5a       	subi	r30, 0xAF	; 175
    3106:	ff 4f       	sbci	r31, 0xFF	; 255
    3108:	60 81       	ld	r22, Z
    310a:	71 81       	ldd	r23, Z+1	; 0x01
    310c:	82 81       	ldd	r24, Z+2	; 0x02
    310e:	93 81       	ldd	r25, Z+3	; 0x03
    3110:	20 e0       	ldi	r18, 0x00	; 0
    3112:	30 e0       	ldi	r19, 0x00	; 0
    3114:	40 e2       	ldi	r20, 0x20	; 32
    3116:	51 e4       	ldi	r21, 0x41	; 65
    3118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311c:	dc 01       	movw	r26, r24
    311e:	cb 01       	movw	r24, r22
    3120:	8e 01       	movw	r16, r28
    3122:	05 5b       	subi	r16, 0xB5	; 181
    3124:	1f 4f       	sbci	r17, 0xFF	; 255
    3126:	bc 01       	movw	r22, r24
    3128:	cd 01       	movw	r24, r26
    312a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    312e:	dc 01       	movw	r26, r24
    3130:	cb 01       	movw	r24, r22
    3132:	f8 01       	movw	r30, r16
    3134:	91 83       	std	Z+1, r25	; 0x01
    3136:	80 83       	st	Z, r24
    3138:	1f c0       	rjmp	.+62     	; 0x3178 <LCD_voidInit+0x6d2>
    313a:	fe 01       	movw	r30, r28
    313c:	e7 5b       	subi	r30, 0xB7	; 183
    313e:	ff 4f       	sbci	r31, 0xFF	; 255
    3140:	80 e9       	ldi	r24, 0x90	; 144
    3142:	91 e0       	ldi	r25, 0x01	; 1
    3144:	91 83       	std	Z+1, r25	; 0x01
    3146:	80 83       	st	Z, r24
    3148:	fe 01       	movw	r30, r28
    314a:	e7 5b       	subi	r30, 0xB7	; 183
    314c:	ff 4f       	sbci	r31, 0xFF	; 255
    314e:	80 81       	ld	r24, Z
    3150:	91 81       	ldd	r25, Z+1	; 0x01
    3152:	01 97       	sbiw	r24, 0x01	; 1
    3154:	f1 f7       	brne	.-4      	; 0x3152 <LCD_voidInit+0x6ac>
    3156:	fe 01       	movw	r30, r28
    3158:	e7 5b       	subi	r30, 0xB7	; 183
    315a:	ff 4f       	sbci	r31, 0xFF	; 255
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3160:	de 01       	movw	r26, r28
    3162:	a5 5b       	subi	r26, 0xB5	; 181
    3164:	bf 4f       	sbci	r27, 0xFF	; 255
    3166:	fe 01       	movw	r30, r28
    3168:	e5 5b       	subi	r30, 0xB5	; 181
    316a:	ff 4f       	sbci	r31, 0xFF	; 255
    316c:	80 81       	ld	r24, Z
    316e:	91 81       	ldd	r25, Z+1	; 0x01
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	11 96       	adiw	r26, 0x01	; 1
    3174:	9c 93       	st	X, r25
    3176:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3178:	fe 01       	movw	r30, r28
    317a:	e5 5b       	subi	r30, 0xB5	; 181
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	80 81       	ld	r24, Z
    3180:	91 81       	ldd	r25, Z+1	; 0x01
    3182:	00 97       	sbiw	r24, 0x00	; 0
    3184:	d1 f6       	brne	.-76     	; 0x313a <LCD_voidInit+0x694>
    3186:	27 c0       	rjmp	.+78     	; 0x31d6 <LCD_voidInit+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3188:	8e 01       	movw	r16, r28
    318a:	05 5b       	subi	r16, 0xB5	; 181
    318c:	1f 4f       	sbci	r17, 0xFF	; 255
    318e:	fe 01       	movw	r30, r28
    3190:	e3 5b       	subi	r30, 0xB3	; 179
    3192:	ff 4f       	sbci	r31, 0xFF	; 255
    3194:	60 81       	ld	r22, Z
    3196:	71 81       	ldd	r23, Z+1	; 0x01
    3198:	82 81       	ldd	r24, Z+2	; 0x02
    319a:	93 81       	ldd	r25, Z+3	; 0x03
    319c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31a0:	dc 01       	movw	r26, r24
    31a2:	cb 01       	movw	r24, r22
    31a4:	f8 01       	movw	r30, r16
    31a6:	91 83       	std	Z+1, r25	; 0x01
    31a8:	80 83       	st	Z, r24
    31aa:	de 01       	movw	r26, r28
    31ac:	a9 5b       	subi	r26, 0xB9	; 185
    31ae:	bf 4f       	sbci	r27, 0xFF	; 255
    31b0:	fe 01       	movw	r30, r28
    31b2:	e5 5b       	subi	r30, 0xB5	; 181
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	80 81       	ld	r24, Z
    31b8:	91 81       	ldd	r25, Z+1	; 0x01
    31ba:	8d 93       	st	X+, r24
    31bc:	9c 93       	st	X, r25
    31be:	fe 01       	movw	r30, r28
    31c0:	e9 5b       	subi	r30, 0xB9	; 185
    31c2:	ff 4f       	sbci	r31, 0xFF	; 255
    31c4:	80 81       	ld	r24, Z
    31c6:	91 81       	ldd	r25, Z+1	; 0x01
    31c8:	01 97       	sbiw	r24, 0x01	; 1
    31ca:	f1 f7       	brne	.-4      	; 0x31c8 <LCD_voidInit+0x722>
    31cc:	fe 01       	movw	r30, r28
    31ce:	e9 5b       	subi	r30, 0xB9	; 185
    31d0:	ff 4f       	sbci	r31, 0xFF	; 255
    31d2:	91 83       	std	Z+1, r25	; 0x01
    31d4:	80 83       	st	Z, r24
	_delay_ms(1);
#endif
	LCD_voidSendCommand(LCD_FunctionSet);
    31d6:	88 e2       	ldi	r24, 0x28	; 40
    31d8:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidSendCommand>
    31dc:	fe 01       	movw	r30, r28
    31de:	ed 5b       	subi	r30, 0xBD	; 189
    31e0:	ff 4f       	sbci	r31, 0xFF	; 255
    31e2:	80 e0       	ldi	r24, 0x00	; 0
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	a0 e8       	ldi	r26, 0x80	; 128
    31e8:	bf e3       	ldi	r27, 0x3F	; 63
    31ea:	80 83       	st	Z, r24
    31ec:	91 83       	std	Z+1, r25	; 0x01
    31ee:	a2 83       	std	Z+2, r26	; 0x02
    31f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31f2:	8e 01       	movw	r16, r28
    31f4:	01 5c       	subi	r16, 0xC1	; 193
    31f6:	1f 4f       	sbci	r17, 0xFF	; 255
    31f8:	fe 01       	movw	r30, r28
    31fa:	ed 5b       	subi	r30, 0xBD	; 189
    31fc:	ff 4f       	sbci	r31, 0xFF	; 255
    31fe:	60 81       	ld	r22, Z
    3200:	71 81       	ldd	r23, Z+1	; 0x01
    3202:	82 81       	ldd	r24, Z+2	; 0x02
    3204:	93 81       	ldd	r25, Z+3	; 0x03
    3206:	20 e0       	ldi	r18, 0x00	; 0
    3208:	30 e0       	ldi	r19, 0x00	; 0
    320a:	4a e7       	ldi	r20, 0x7A	; 122
    320c:	55 e4       	ldi	r21, 0x45	; 69
    320e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3212:	dc 01       	movw	r26, r24
    3214:	cb 01       	movw	r24, r22
    3216:	f8 01       	movw	r30, r16
    3218:	80 83       	st	Z, r24
    321a:	91 83       	std	Z+1, r25	; 0x01
    321c:	a2 83       	std	Z+2, r26	; 0x02
    321e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3220:	fe 01       	movw	r30, r28
    3222:	ff 96       	adiw	r30, 0x3f	; 63
    3224:	60 81       	ld	r22, Z
    3226:	71 81       	ldd	r23, Z+1	; 0x01
    3228:	82 81       	ldd	r24, Z+2	; 0x02
    322a:	93 81       	ldd	r25, Z+3	; 0x03
    322c:	20 e0       	ldi	r18, 0x00	; 0
    322e:	30 e0       	ldi	r19, 0x00	; 0
    3230:	40 e8       	ldi	r20, 0x80	; 128
    3232:	5f e3       	ldi	r21, 0x3F	; 63
    3234:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3238:	88 23       	and	r24, r24
    323a:	2c f4       	brge	.+10     	; 0x3246 <LCD_voidInit+0x7a0>
		__ticks = 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	90 e0       	ldi	r25, 0x00	; 0
    3240:	9e af       	std	Y+62, r25	; 0x3e
    3242:	8d af       	std	Y+61, r24	; 0x3d
    3244:	46 c0       	rjmp	.+140    	; 0x32d2 <LCD_voidInit+0x82c>
	else if (__tmp > 65535)
    3246:	fe 01       	movw	r30, r28
    3248:	ff 96       	adiw	r30, 0x3f	; 63
    324a:	60 81       	ld	r22, Z
    324c:	71 81       	ldd	r23, Z+1	; 0x01
    324e:	82 81       	ldd	r24, Z+2	; 0x02
    3250:	93 81       	ldd	r25, Z+3	; 0x03
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	3f ef       	ldi	r19, 0xFF	; 255
    3256:	4f e7       	ldi	r20, 0x7F	; 127
    3258:	57 e4       	ldi	r21, 0x47	; 71
    325a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    325e:	18 16       	cp	r1, r24
    3260:	64 f5       	brge	.+88     	; 0x32ba <LCD_voidInit+0x814>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3262:	fe 01       	movw	r30, r28
    3264:	ed 5b       	subi	r30, 0xBD	; 189
    3266:	ff 4f       	sbci	r31, 0xFF	; 255
    3268:	60 81       	ld	r22, Z
    326a:	71 81       	ldd	r23, Z+1	; 0x01
    326c:	82 81       	ldd	r24, Z+2	; 0x02
    326e:	93 81       	ldd	r25, Z+3	; 0x03
    3270:	20 e0       	ldi	r18, 0x00	; 0
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	40 e2       	ldi	r20, 0x20	; 32
    3276:	51 e4       	ldi	r21, 0x41	; 65
    3278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    327c:	dc 01       	movw	r26, r24
    327e:	cb 01       	movw	r24, r22
    3280:	bc 01       	movw	r22, r24
    3282:	cd 01       	movw	r24, r26
    3284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	9e af       	std	Y+62, r25	; 0x3e
    328e:	8d af       	std	Y+61, r24	; 0x3d
    3290:	0f c0       	rjmp	.+30     	; 0x32b0 <LCD_voidInit+0x80a>
    3292:	80 e9       	ldi	r24, 0x90	; 144
    3294:	91 e0       	ldi	r25, 0x01	; 1
    3296:	9c af       	std	Y+60, r25	; 0x3c
    3298:	8b af       	std	Y+59, r24	; 0x3b
    329a:	8b ad       	ldd	r24, Y+59	; 0x3b
    329c:	9c ad       	ldd	r25, Y+60	; 0x3c
    329e:	01 97       	sbiw	r24, 0x01	; 1
    32a0:	f1 f7       	brne	.-4      	; 0x329e <LCD_voidInit+0x7f8>
    32a2:	9c af       	std	Y+60, r25	; 0x3c
    32a4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32a6:	8d ad       	ldd	r24, Y+61	; 0x3d
    32a8:	9e ad       	ldd	r25, Y+62	; 0x3e
    32aa:	01 97       	sbiw	r24, 0x01	; 1
    32ac:	9e af       	std	Y+62, r25	; 0x3e
    32ae:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b0:	8d ad       	ldd	r24, Y+61	; 0x3d
    32b2:	9e ad       	ldd	r25, Y+62	; 0x3e
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	69 f7       	brne	.-38     	; 0x3292 <LCD_voidInit+0x7ec>
    32b8:	16 c0       	rjmp	.+44     	; 0x32e6 <LCD_voidInit+0x840>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32ba:	fe 01       	movw	r30, r28
    32bc:	ff 96       	adiw	r30, 0x3f	; 63
    32be:	60 81       	ld	r22, Z
    32c0:	71 81       	ldd	r23, Z+1	; 0x01
    32c2:	82 81       	ldd	r24, Z+2	; 0x02
    32c4:	93 81       	ldd	r25, Z+3	; 0x03
    32c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32ca:	dc 01       	movw	r26, r24
    32cc:	cb 01       	movw	r24, r22
    32ce:	9e af       	std	Y+62, r25	; 0x3e
    32d0:	8d af       	std	Y+61, r24	; 0x3d
    32d2:	8d ad       	ldd	r24, Y+61	; 0x3d
    32d4:	9e ad       	ldd	r25, Y+62	; 0x3e
    32d6:	9a af       	std	Y+58, r25	; 0x3a
    32d8:	89 af       	std	Y+57, r24	; 0x39
    32da:	89 ad       	ldd	r24, Y+57	; 0x39
    32dc:	9a ad       	ldd	r25, Y+58	; 0x3a
    32de:	01 97       	sbiw	r24, 0x01	; 1
    32e0:	f1 f7       	brne	.-4      	; 0x32de <LCD_voidInit+0x838>
    32e2:	9a af       	std	Y+58, r25	; 0x3a
    32e4:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1);
	LCD_voidSendCommand(LCD_DisplayOFF);
    32e6:	88 e0       	ldi	r24, 0x08	; 8
    32e8:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidSendCommand>
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	a0 e8       	ldi	r26, 0x80	; 128
    32f2:	bf e3       	ldi	r27, 0x3F	; 63
    32f4:	8d ab       	std	Y+53, r24	; 0x35
    32f6:	9e ab       	std	Y+54, r25	; 0x36
    32f8:	af ab       	std	Y+55, r26	; 0x37
    32fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32fc:	6d a9       	ldd	r22, Y+53	; 0x35
    32fe:	7e a9       	ldd	r23, Y+54	; 0x36
    3300:	8f a9       	ldd	r24, Y+55	; 0x37
    3302:	98 ad       	ldd	r25, Y+56	; 0x38
    3304:	20 e0       	ldi	r18, 0x00	; 0
    3306:	30 e0       	ldi	r19, 0x00	; 0
    3308:	4a e7       	ldi	r20, 0x7A	; 122
    330a:	55 e4       	ldi	r21, 0x45	; 69
    330c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3310:	dc 01       	movw	r26, r24
    3312:	cb 01       	movw	r24, r22
    3314:	89 ab       	std	Y+49, r24	; 0x31
    3316:	9a ab       	std	Y+50, r25	; 0x32
    3318:	ab ab       	std	Y+51, r26	; 0x33
    331a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    331c:	69 a9       	ldd	r22, Y+49	; 0x31
    331e:	7a a9       	ldd	r23, Y+50	; 0x32
    3320:	8b a9       	ldd	r24, Y+51	; 0x33
    3322:	9c a9       	ldd	r25, Y+52	; 0x34
    3324:	20 e0       	ldi	r18, 0x00	; 0
    3326:	30 e0       	ldi	r19, 0x00	; 0
    3328:	40 e8       	ldi	r20, 0x80	; 128
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3330:	88 23       	and	r24, r24
    3332:	2c f4       	brge	.+10     	; 0x333e <LCD_voidInit+0x898>
		__ticks = 1;
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	98 ab       	std	Y+48, r25	; 0x30
    333a:	8f a7       	std	Y+47, r24	; 0x2f
    333c:	3f c0       	rjmp	.+126    	; 0x33bc <LCD_voidInit+0x916>
	else if (__tmp > 65535)
    333e:	69 a9       	ldd	r22, Y+49	; 0x31
    3340:	7a a9       	ldd	r23, Y+50	; 0x32
    3342:	8b a9       	ldd	r24, Y+51	; 0x33
    3344:	9c a9       	ldd	r25, Y+52	; 0x34
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	3f ef       	ldi	r19, 0xFF	; 255
    334a:	4f e7       	ldi	r20, 0x7F	; 127
    334c:	57 e4       	ldi	r21, 0x47	; 71
    334e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3352:	18 16       	cp	r1, r24
    3354:	4c f5       	brge	.+82     	; 0x33a8 <LCD_voidInit+0x902>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3356:	6d a9       	ldd	r22, Y+53	; 0x35
    3358:	7e a9       	ldd	r23, Y+54	; 0x36
    335a:	8f a9       	ldd	r24, Y+55	; 0x37
    335c:	98 ad       	ldd	r25, Y+56	; 0x38
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	30 e0       	ldi	r19, 0x00	; 0
    3362:	40 e2       	ldi	r20, 0x20	; 32
    3364:	51 e4       	ldi	r21, 0x41	; 65
    3366:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336a:	dc 01       	movw	r26, r24
    336c:	cb 01       	movw	r24, r22
    336e:	bc 01       	movw	r22, r24
    3370:	cd 01       	movw	r24, r26
    3372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3376:	dc 01       	movw	r26, r24
    3378:	cb 01       	movw	r24, r22
    337a:	98 ab       	std	Y+48, r25	; 0x30
    337c:	8f a7       	std	Y+47, r24	; 0x2f
    337e:	0f c0       	rjmp	.+30     	; 0x339e <LCD_voidInit+0x8f8>
    3380:	80 e9       	ldi	r24, 0x90	; 144
    3382:	91 e0       	ldi	r25, 0x01	; 1
    3384:	9e a7       	std	Y+46, r25	; 0x2e
    3386:	8d a7       	std	Y+45, r24	; 0x2d
    3388:	8d a5       	ldd	r24, Y+45	; 0x2d
    338a:	9e a5       	ldd	r25, Y+46	; 0x2e
    338c:	01 97       	sbiw	r24, 0x01	; 1
    338e:	f1 f7       	brne	.-4      	; 0x338c <LCD_voidInit+0x8e6>
    3390:	9e a7       	std	Y+46, r25	; 0x2e
    3392:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3394:	8f a5       	ldd	r24, Y+47	; 0x2f
    3396:	98 a9       	ldd	r25, Y+48	; 0x30
    3398:	01 97       	sbiw	r24, 0x01	; 1
    339a:	98 ab       	std	Y+48, r25	; 0x30
    339c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    339e:	8f a5       	ldd	r24, Y+47	; 0x2f
    33a0:	98 a9       	ldd	r25, Y+48	; 0x30
    33a2:	00 97       	sbiw	r24, 0x00	; 0
    33a4:	69 f7       	brne	.-38     	; 0x3380 <LCD_voidInit+0x8da>
    33a6:	14 c0       	rjmp	.+40     	; 0x33d0 <LCD_voidInit+0x92a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33a8:	69 a9       	ldd	r22, Y+49	; 0x31
    33aa:	7a a9       	ldd	r23, Y+50	; 0x32
    33ac:	8b a9       	ldd	r24, Y+51	; 0x33
    33ae:	9c a9       	ldd	r25, Y+52	; 0x34
    33b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33b4:	dc 01       	movw	r26, r24
    33b6:	cb 01       	movw	r24, r22
    33b8:	98 ab       	std	Y+48, r25	; 0x30
    33ba:	8f a7       	std	Y+47, r24	; 0x2f
    33bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    33be:	98 a9       	ldd	r25, Y+48	; 0x30
    33c0:	9c a7       	std	Y+44, r25	; 0x2c
    33c2:	8b a7       	std	Y+43, r24	; 0x2b
    33c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    33c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    33c8:	01 97       	sbiw	r24, 0x01	; 1
    33ca:	f1 f7       	brne	.-4      	; 0x33c8 <LCD_voidInit+0x922>
    33cc:	9c a7       	std	Y+44, r25	; 0x2c
    33ce:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	LCD_voidSendCommand(LCD_ClearDisplay);
    33d0:	81 e0       	ldi	r24, 0x01	; 1
    33d2:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidSendCommand>
    33d6:	80 e0       	ldi	r24, 0x00	; 0
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	a0 ea       	ldi	r26, 0xA0	; 160
    33dc:	b0 e4       	ldi	r27, 0x40	; 64
    33de:	8f a3       	std	Y+39, r24	; 0x27
    33e0:	98 a7       	std	Y+40, r25	; 0x28
    33e2:	a9 a7       	std	Y+41, r26	; 0x29
    33e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33e6:	6f a1       	ldd	r22, Y+39	; 0x27
    33e8:	78 a5       	ldd	r23, Y+40	; 0x28
    33ea:	89 a5       	ldd	r24, Y+41	; 0x29
    33ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    33ee:	20 e0       	ldi	r18, 0x00	; 0
    33f0:	30 e0       	ldi	r19, 0x00	; 0
    33f2:	4a e7       	ldi	r20, 0x7A	; 122
    33f4:	55 e4       	ldi	r21, 0x45	; 69
    33f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    33fa:	dc 01       	movw	r26, r24
    33fc:	cb 01       	movw	r24, r22
    33fe:	8b a3       	std	Y+35, r24	; 0x23
    3400:	9c a3       	std	Y+36, r25	; 0x24
    3402:	ad a3       	std	Y+37, r26	; 0x25
    3404:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3406:	6b a1       	ldd	r22, Y+35	; 0x23
    3408:	7c a1       	ldd	r23, Y+36	; 0x24
    340a:	8d a1       	ldd	r24, Y+37	; 0x25
    340c:	9e a1       	ldd	r25, Y+38	; 0x26
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	40 e8       	ldi	r20, 0x80	; 128
    3414:	5f e3       	ldi	r21, 0x3F	; 63
    3416:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    341a:	88 23       	and	r24, r24
    341c:	2c f4       	brge	.+10     	; 0x3428 <LCD_voidInit+0x982>
		__ticks = 1;
    341e:	81 e0       	ldi	r24, 0x01	; 1
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	9a a3       	std	Y+34, r25	; 0x22
    3424:	89 a3       	std	Y+33, r24	; 0x21
    3426:	3f c0       	rjmp	.+126    	; 0x34a6 <LCD_voidInit+0xa00>
	else if (__tmp > 65535)
    3428:	6b a1       	ldd	r22, Y+35	; 0x23
    342a:	7c a1       	ldd	r23, Y+36	; 0x24
    342c:	8d a1       	ldd	r24, Y+37	; 0x25
    342e:	9e a1       	ldd	r25, Y+38	; 0x26
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	3f ef       	ldi	r19, 0xFF	; 255
    3434:	4f e7       	ldi	r20, 0x7F	; 127
    3436:	57 e4       	ldi	r21, 0x47	; 71
    3438:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    343c:	18 16       	cp	r1, r24
    343e:	4c f5       	brge	.+82     	; 0x3492 <LCD_voidInit+0x9ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3440:	6f a1       	ldd	r22, Y+39	; 0x27
    3442:	78 a5       	ldd	r23, Y+40	; 0x28
    3444:	89 a5       	ldd	r24, Y+41	; 0x29
    3446:	9a a5       	ldd	r25, Y+42	; 0x2a
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	30 e0       	ldi	r19, 0x00	; 0
    344c:	40 e2       	ldi	r20, 0x20	; 32
    344e:	51 e4       	ldi	r21, 0x41	; 65
    3450:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3454:	dc 01       	movw	r26, r24
    3456:	cb 01       	movw	r24, r22
    3458:	bc 01       	movw	r22, r24
    345a:	cd 01       	movw	r24, r26
    345c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3460:	dc 01       	movw	r26, r24
    3462:	cb 01       	movw	r24, r22
    3464:	9a a3       	std	Y+34, r25	; 0x22
    3466:	89 a3       	std	Y+33, r24	; 0x21
    3468:	0f c0       	rjmp	.+30     	; 0x3488 <LCD_voidInit+0x9e2>
    346a:	80 e9       	ldi	r24, 0x90	; 144
    346c:	91 e0       	ldi	r25, 0x01	; 1
    346e:	98 a3       	std	Y+32, r25	; 0x20
    3470:	8f 8f       	std	Y+31, r24	; 0x1f
    3472:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3474:	98 a1       	ldd	r25, Y+32	; 0x20
    3476:	01 97       	sbiw	r24, 0x01	; 1
    3478:	f1 f7       	brne	.-4      	; 0x3476 <LCD_voidInit+0x9d0>
    347a:	98 a3       	std	Y+32, r25	; 0x20
    347c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    347e:	89 a1       	ldd	r24, Y+33	; 0x21
    3480:	9a a1       	ldd	r25, Y+34	; 0x22
    3482:	01 97       	sbiw	r24, 0x01	; 1
    3484:	9a a3       	std	Y+34, r25	; 0x22
    3486:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3488:	89 a1       	ldd	r24, Y+33	; 0x21
    348a:	9a a1       	ldd	r25, Y+34	; 0x22
    348c:	00 97       	sbiw	r24, 0x00	; 0
    348e:	69 f7       	brne	.-38     	; 0x346a <LCD_voidInit+0x9c4>
    3490:	14 c0       	rjmp	.+40     	; 0x34ba <LCD_voidInit+0xa14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3492:	6b a1       	ldd	r22, Y+35	; 0x23
    3494:	7c a1       	ldd	r23, Y+36	; 0x24
    3496:	8d a1       	ldd	r24, Y+37	; 0x25
    3498:	9e a1       	ldd	r25, Y+38	; 0x26
    349a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    349e:	dc 01       	movw	r26, r24
    34a0:	cb 01       	movw	r24, r22
    34a2:	9a a3       	std	Y+34, r25	; 0x22
    34a4:	89 a3       	std	Y+33, r24	; 0x21
    34a6:	89 a1       	ldd	r24, Y+33	; 0x21
    34a8:	9a a1       	ldd	r25, Y+34	; 0x22
    34aa:	9e 8f       	std	Y+30, r25	; 0x1e
    34ac:	8d 8f       	std	Y+29, r24	; 0x1d
    34ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34b2:	01 97       	sbiw	r24, 0x01	; 1
    34b4:	f1 f7       	brne	.-4      	; 0x34b2 <LCD_voidInit+0xa0c>
    34b6:	9e 8f       	std	Y+30, r25	; 0x1e
    34b8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);
	LCD_voidSendCommand(LCD_DisplayON);
    34ba:	8c e0       	ldi	r24, 0x0C	; 12
    34bc:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidSendCommand>
    34c0:	80 e0       	ldi	r24, 0x00	; 0
    34c2:	90 e0       	ldi	r25, 0x00	; 0
    34c4:	a0 e8       	ldi	r26, 0x80	; 128
    34c6:	bf e3       	ldi	r27, 0x3F	; 63
    34c8:	89 8f       	std	Y+25, r24	; 0x19
    34ca:	9a 8f       	std	Y+26, r25	; 0x1a
    34cc:	ab 8f       	std	Y+27, r26	; 0x1b
    34ce:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34d0:	69 8d       	ldd	r22, Y+25	; 0x19
    34d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34d8:	20 e0       	ldi	r18, 0x00	; 0
    34da:	30 e0       	ldi	r19, 0x00	; 0
    34dc:	4a e7       	ldi	r20, 0x7A	; 122
    34de:	55 e4       	ldi	r21, 0x45	; 69
    34e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34e4:	dc 01       	movw	r26, r24
    34e6:	cb 01       	movw	r24, r22
    34e8:	8d 8b       	std	Y+21, r24	; 0x15
    34ea:	9e 8b       	std	Y+22, r25	; 0x16
    34ec:	af 8b       	std	Y+23, r26	; 0x17
    34ee:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    34f0:	6d 89       	ldd	r22, Y+21	; 0x15
    34f2:	7e 89       	ldd	r23, Y+22	; 0x16
    34f4:	8f 89       	ldd	r24, Y+23	; 0x17
    34f6:	98 8d       	ldd	r25, Y+24	; 0x18
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	40 e8       	ldi	r20, 0x80	; 128
    34fe:	5f e3       	ldi	r21, 0x3F	; 63
    3500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3504:	88 23       	and	r24, r24
    3506:	2c f4       	brge	.+10     	; 0x3512 <LCD_voidInit+0xa6c>
		__ticks = 1;
    3508:	81 e0       	ldi	r24, 0x01	; 1
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	9c 8b       	std	Y+20, r25	; 0x14
    350e:	8b 8b       	std	Y+19, r24	; 0x13
    3510:	3f c0       	rjmp	.+126    	; 0x3590 <LCD_voidInit+0xaea>
	else if (__tmp > 65535)
    3512:	6d 89       	ldd	r22, Y+21	; 0x15
    3514:	7e 89       	ldd	r23, Y+22	; 0x16
    3516:	8f 89       	ldd	r24, Y+23	; 0x17
    3518:	98 8d       	ldd	r25, Y+24	; 0x18
    351a:	20 e0       	ldi	r18, 0x00	; 0
    351c:	3f ef       	ldi	r19, 0xFF	; 255
    351e:	4f e7       	ldi	r20, 0x7F	; 127
    3520:	57 e4       	ldi	r21, 0x47	; 71
    3522:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3526:	18 16       	cp	r1, r24
    3528:	4c f5       	brge	.+82     	; 0x357c <LCD_voidInit+0xad6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    352a:	69 8d       	ldd	r22, Y+25	; 0x19
    352c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    352e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	30 e0       	ldi	r19, 0x00	; 0
    3536:	40 e2       	ldi	r20, 0x20	; 32
    3538:	51 e4       	ldi	r21, 0x41	; 65
    353a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    353e:	dc 01       	movw	r26, r24
    3540:	cb 01       	movw	r24, r22
    3542:	bc 01       	movw	r22, r24
    3544:	cd 01       	movw	r24, r26
    3546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    354a:	dc 01       	movw	r26, r24
    354c:	cb 01       	movw	r24, r22
    354e:	9c 8b       	std	Y+20, r25	; 0x14
    3550:	8b 8b       	std	Y+19, r24	; 0x13
    3552:	0f c0       	rjmp	.+30     	; 0x3572 <LCD_voidInit+0xacc>
    3554:	80 e9       	ldi	r24, 0x90	; 144
    3556:	91 e0       	ldi	r25, 0x01	; 1
    3558:	9a 8b       	std	Y+18, r25	; 0x12
    355a:	89 8b       	std	Y+17, r24	; 0x11
    355c:	89 89       	ldd	r24, Y+17	; 0x11
    355e:	9a 89       	ldd	r25, Y+18	; 0x12
    3560:	01 97       	sbiw	r24, 0x01	; 1
    3562:	f1 f7       	brne	.-4      	; 0x3560 <LCD_voidInit+0xaba>
    3564:	9a 8b       	std	Y+18, r25	; 0x12
    3566:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3568:	8b 89       	ldd	r24, Y+19	; 0x13
    356a:	9c 89       	ldd	r25, Y+20	; 0x14
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	9c 8b       	std	Y+20, r25	; 0x14
    3570:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3572:	8b 89       	ldd	r24, Y+19	; 0x13
    3574:	9c 89       	ldd	r25, Y+20	; 0x14
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	69 f7       	brne	.-38     	; 0x3554 <LCD_voidInit+0xaae>
    357a:	14 c0       	rjmp	.+40     	; 0x35a4 <LCD_voidInit+0xafe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    357c:	6d 89       	ldd	r22, Y+21	; 0x15
    357e:	7e 89       	ldd	r23, Y+22	; 0x16
    3580:	8f 89       	ldd	r24, Y+23	; 0x17
    3582:	98 8d       	ldd	r25, Y+24	; 0x18
    3584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	9c 8b       	std	Y+20, r25	; 0x14
    358e:	8b 8b       	std	Y+19, r24	; 0x13
    3590:	8b 89       	ldd	r24, Y+19	; 0x13
    3592:	9c 89       	ldd	r25, Y+20	; 0x14
    3594:	98 8b       	std	Y+16, r25	; 0x10
    3596:	8f 87       	std	Y+15, r24	; 0x0f
    3598:	8f 85       	ldd	r24, Y+15	; 0x0f
    359a:	98 89       	ldd	r25, Y+16	; 0x10
    359c:	01 97       	sbiw	r24, 0x01	; 1
    359e:	f1 f7       	brne	.-4      	; 0x359c <LCD_voidInit+0xaf6>
    35a0:	98 8b       	std	Y+16, r25	; 0x10
    35a2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_voidSendCommand(LCD_EntryMode);
    35a4:	86 e0       	ldi	r24, 0x06	; 6
    35a6:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidSendCommand>
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	a0 e8       	ldi	r26, 0x80	; 128
    35b0:	bf e3       	ldi	r27, 0x3F	; 63
    35b2:	8b 87       	std	Y+11, r24	; 0x0b
    35b4:	9c 87       	std	Y+12, r25	; 0x0c
    35b6:	ad 87       	std	Y+13, r26	; 0x0d
    35b8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    35bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    35be:	8d 85       	ldd	r24, Y+13	; 0x0d
    35c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35c2:	20 e0       	ldi	r18, 0x00	; 0
    35c4:	30 e0       	ldi	r19, 0x00	; 0
    35c6:	4a e7       	ldi	r20, 0x7A	; 122
    35c8:	55 e4       	ldi	r21, 0x45	; 69
    35ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	8f 83       	std	Y+7, r24	; 0x07
    35d4:	98 87       	std	Y+8, r25	; 0x08
    35d6:	a9 87       	std	Y+9, r26	; 0x09
    35d8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35da:	6f 81       	ldd	r22, Y+7	; 0x07
    35dc:	78 85       	ldd	r23, Y+8	; 0x08
    35de:	89 85       	ldd	r24, Y+9	; 0x09
    35e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    35e2:	20 e0       	ldi	r18, 0x00	; 0
    35e4:	30 e0       	ldi	r19, 0x00	; 0
    35e6:	40 e8       	ldi	r20, 0x80	; 128
    35e8:	5f e3       	ldi	r21, 0x3F	; 63
    35ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35ee:	88 23       	and	r24, r24
    35f0:	2c f4       	brge	.+10     	; 0x35fc <LCD_voidInit+0xb56>
		__ticks = 1;
    35f2:	81 e0       	ldi	r24, 0x01	; 1
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	9e 83       	std	Y+6, r25	; 0x06
    35f8:	8d 83       	std	Y+5, r24	; 0x05
    35fa:	3f c0       	rjmp	.+126    	; 0x367a <LCD_voidInit+0xbd4>
	else if (__tmp > 65535)
    35fc:	6f 81       	ldd	r22, Y+7	; 0x07
    35fe:	78 85       	ldd	r23, Y+8	; 0x08
    3600:	89 85       	ldd	r24, Y+9	; 0x09
    3602:	9a 85       	ldd	r25, Y+10	; 0x0a
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	3f ef       	ldi	r19, 0xFF	; 255
    3608:	4f e7       	ldi	r20, 0x7F	; 127
    360a:	57 e4       	ldi	r21, 0x47	; 71
    360c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3610:	18 16       	cp	r1, r24
    3612:	4c f5       	brge	.+82     	; 0x3666 <LCD_voidInit+0xbc0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3614:	6b 85       	ldd	r22, Y+11	; 0x0b
    3616:	7c 85       	ldd	r23, Y+12	; 0x0c
    3618:	8d 85       	ldd	r24, Y+13	; 0x0d
    361a:	9e 85       	ldd	r25, Y+14	; 0x0e
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	30 e0       	ldi	r19, 0x00	; 0
    3620:	40 e2       	ldi	r20, 0x20	; 32
    3622:	51 e4       	ldi	r21, 0x41	; 65
    3624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3628:	dc 01       	movw	r26, r24
    362a:	cb 01       	movw	r24, r22
    362c:	bc 01       	movw	r22, r24
    362e:	cd 01       	movw	r24, r26
    3630:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3634:	dc 01       	movw	r26, r24
    3636:	cb 01       	movw	r24, r22
    3638:	9e 83       	std	Y+6, r25	; 0x06
    363a:	8d 83       	std	Y+5, r24	; 0x05
    363c:	0f c0       	rjmp	.+30     	; 0x365c <LCD_voidInit+0xbb6>
    363e:	80 e9       	ldi	r24, 0x90	; 144
    3640:	91 e0       	ldi	r25, 0x01	; 1
    3642:	9c 83       	std	Y+4, r25	; 0x04
    3644:	8b 83       	std	Y+3, r24	; 0x03
    3646:	8b 81       	ldd	r24, Y+3	; 0x03
    3648:	9c 81       	ldd	r25, Y+4	; 0x04
    364a:	01 97       	sbiw	r24, 0x01	; 1
    364c:	f1 f7       	brne	.-4      	; 0x364a <LCD_voidInit+0xba4>
    364e:	9c 83       	std	Y+4, r25	; 0x04
    3650:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3652:	8d 81       	ldd	r24, Y+5	; 0x05
    3654:	9e 81       	ldd	r25, Y+6	; 0x06
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	9e 83       	std	Y+6, r25	; 0x06
    365a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    365c:	8d 81       	ldd	r24, Y+5	; 0x05
    365e:	9e 81       	ldd	r25, Y+6	; 0x06
    3660:	00 97       	sbiw	r24, 0x00	; 0
    3662:	69 f7       	brne	.-38     	; 0x363e <LCD_voidInit+0xb98>
    3664:	14 c0       	rjmp	.+40     	; 0x368e <LCD_voidInit+0xbe8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3666:	6f 81       	ldd	r22, Y+7	; 0x07
    3668:	78 85       	ldd	r23, Y+8	; 0x08
    366a:	89 85       	ldd	r24, Y+9	; 0x09
    366c:	9a 85       	ldd	r25, Y+10	; 0x0a
    366e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3672:	dc 01       	movw	r26, r24
    3674:	cb 01       	movw	r24, r22
    3676:	9e 83       	std	Y+6, r25	; 0x06
    3678:	8d 83       	std	Y+5, r24	; 0x05
    367a:	8d 81       	ldd	r24, Y+5	; 0x05
    367c:	9e 81       	ldd	r25, Y+6	; 0x06
    367e:	9a 83       	std	Y+2, r25	; 0x02
    3680:	89 83       	std	Y+1, r24	; 0x01
    3682:	89 81       	ldd	r24, Y+1	; 0x01
    3684:	9a 81       	ldd	r25, Y+2	; 0x02
    3686:	01 97       	sbiw	r24, 0x01	; 1
    3688:	f1 f7       	brne	.-4      	; 0x3686 <LCD_voidInit+0xbe0>
    368a:	9a 83       	std	Y+2, r25	; 0x02
    368c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    368e:	c4 57       	subi	r28, 0x74	; 116
    3690:	df 4f       	sbci	r29, 0xFF	; 255
    3692:	0f b6       	in	r0, 0x3f	; 63
    3694:	f8 94       	cli
    3696:	de bf       	out	0x3e, r29	; 62
    3698:	0f be       	out	0x3f, r0	; 63
    369a:	cd bf       	out	0x3d, r28	; 61
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	1f 91       	pop	r17
    36a2:	0f 91       	pop	r16
    36a4:	08 95       	ret

000036a6 <LCD_voidSendCommand>:

void LCD_voidSendCommand(u8 command){
    36a6:	df 93       	push	r29
    36a8:	cf 93       	push	r28
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	2f 97       	sbiw	r28, 0x0f	; 15
    36b0:	0f b6       	in	r0, 0x3f	; 63
    36b2:	f8 94       	cli
    36b4:	de bf       	out	0x3e, r29	; 62
    36b6:	0f be       	out	0x3f, r0	; 63
    36b8:	cd bf       	out	0x3d, r28	; 61
    36ba:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    36bc:	80 e0       	ldi	r24, 0x00	; 0
    36be:	63 e0       	ldi	r22, 0x03	; 3
    36c0:	40 e0       	ldi	r20, 0x00	; 0
    36c2:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    36c6:	80 e0       	ldi	r24, 0x00	; 0
    36c8:	62 e0       	ldi	r22, 0x02	; 2
    36ca:	41 e0       	ldi	r20, 0x01	; 1
    36cc:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(command, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(command, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(command, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(command, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    36d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    36d2:	82 95       	swap	r24
    36d4:	8f 70       	andi	r24, 0x0F	; 15
    36d6:	98 2f       	mov	r25, r24
    36d8:	91 70       	andi	r25, 0x01	; 1
    36da:	81 e0       	ldi	r24, 0x01	; 1
    36dc:	60 e0       	ldi	r22, 0x00	; 0
    36de:	49 2f       	mov	r20, r25
    36e0:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    36e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    36e6:	82 95       	swap	r24
    36e8:	86 95       	lsr	r24
    36ea:	87 70       	andi	r24, 0x07	; 7
    36ec:	98 2f       	mov	r25, r24
    36ee:	91 70       	andi	r25, 0x01	; 1
    36f0:	81 e0       	ldi	r24, 0x01	; 1
    36f2:	61 e0       	ldi	r22, 0x01	; 1
    36f4:	49 2f       	mov	r20, r25
    36f6:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    36fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    36fc:	82 95       	swap	r24
    36fe:	86 95       	lsr	r24
    3700:	86 95       	lsr	r24
    3702:	83 70       	andi	r24, 0x03	; 3
    3704:	98 2f       	mov	r25, r24
    3706:	91 70       	andi	r25, 0x01	; 1
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	62 e0       	ldi	r22, 0x02	; 2
    370c:	49 2f       	mov	r20, r25
    370e:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    3712:	8f 85       	ldd	r24, Y+15	; 0x0f
    3714:	98 2f       	mov	r25, r24
    3716:	99 1f       	adc	r25, r25
    3718:	99 27       	eor	r25, r25
    371a:	99 1f       	adc	r25, r25
    371c:	81 e0       	ldi	r24, 0x01	; 1
    371e:	63 e0       	ldi	r22, 0x03	; 3
    3720:	49 2f       	mov	r20, r25
    3722:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	62 e0       	ldi	r22, 0x02	; 2
    372a:	40 e0       	ldi	r20, 0x00	; 0
    372c:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    3730:	80 e0       	ldi	r24, 0x00	; 0
    3732:	62 e0       	ldi	r22, 0x02	; 2
    3734:	41 e0       	ldi	r20, 0x01	; 1
    3736:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 0));
    373a:	8f 85       	ldd	r24, Y+15	; 0x0f
    373c:	98 2f       	mov	r25, r24
    373e:	91 70       	andi	r25, 0x01	; 1
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	60 e0       	ldi	r22, 0x00	; 0
    3744:	49 2f       	mov	r20, r25
    3746:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 1));
    374a:	8f 85       	ldd	r24, Y+15	; 0x0f
    374c:	86 95       	lsr	r24
    374e:	98 2f       	mov	r25, r24
    3750:	91 70       	andi	r25, 0x01	; 1
    3752:	81 e0       	ldi	r24, 0x01	; 1
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	49 2f       	mov	r20, r25
    3758:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 2));
    375c:	8f 85       	ldd	r24, Y+15	; 0x0f
    375e:	86 95       	lsr	r24
    3760:	86 95       	lsr	r24
    3762:	98 2f       	mov	r25, r24
    3764:	91 70       	andi	r25, 0x01	; 1
    3766:	81 e0       	ldi	r24, 0x01	; 1
    3768:	62 e0       	ldi	r22, 0x02	; 2
    376a:	49 2f       	mov	r20, r25
    376c:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 3));
    3770:	8f 85       	ldd	r24, Y+15	; 0x0f
    3772:	86 95       	lsr	r24
    3774:	86 95       	lsr	r24
    3776:	86 95       	lsr	r24
    3778:	98 2f       	mov	r25, r24
    377a:	91 70       	andi	r25, 0x01	; 1
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	63 e0       	ldi	r22, 0x03	; 3
    3780:	49 2f       	mov	r20, r25
    3782:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3786:	80 e0       	ldi	r24, 0x00	; 0
    3788:	62 e0       	ldi	r22, 0x02	; 2
    378a:	40 e0       	ldi	r20, 0x00	; 0
    378c:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	a0 ea       	ldi	r26, 0xA0	; 160
    3796:	b0 e4       	ldi	r27, 0x40	; 64
    3798:	8b 87       	std	Y+11, r24	; 0x0b
    379a:	9c 87       	std	Y+12, r25	; 0x0c
    379c:	ad 87       	std	Y+13, r26	; 0x0d
    379e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    37a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    37a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    37a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	4a e7       	ldi	r20, 0x7A	; 122
    37ae:	55 e4       	ldi	r21, 0x45	; 69
    37b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	8f 83       	std	Y+7, r24	; 0x07
    37ba:	98 87       	std	Y+8, r25	; 0x08
    37bc:	a9 87       	std	Y+9, r26	; 0x09
    37be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    37c0:	6f 81       	ldd	r22, Y+7	; 0x07
    37c2:	78 85       	ldd	r23, Y+8	; 0x08
    37c4:	89 85       	ldd	r24, Y+9	; 0x09
    37c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    37c8:	20 e0       	ldi	r18, 0x00	; 0
    37ca:	30 e0       	ldi	r19, 0x00	; 0
    37cc:	40 e8       	ldi	r20, 0x80	; 128
    37ce:	5f e3       	ldi	r21, 0x3F	; 63
    37d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37d4:	88 23       	and	r24, r24
    37d6:	2c f4       	brge	.+10     	; 0x37e2 <LCD_voidSendCommand+0x13c>
		__ticks = 1;
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	9e 83       	std	Y+6, r25	; 0x06
    37de:	8d 83       	std	Y+5, r24	; 0x05
    37e0:	3f c0       	rjmp	.+126    	; 0x3860 <LCD_voidSendCommand+0x1ba>
	else if (__tmp > 65535)
    37e2:	6f 81       	ldd	r22, Y+7	; 0x07
    37e4:	78 85       	ldd	r23, Y+8	; 0x08
    37e6:	89 85       	ldd	r24, Y+9	; 0x09
    37e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    37ea:	20 e0       	ldi	r18, 0x00	; 0
    37ec:	3f ef       	ldi	r19, 0xFF	; 255
    37ee:	4f e7       	ldi	r20, 0x7F	; 127
    37f0:	57 e4       	ldi	r21, 0x47	; 71
    37f2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37f6:	18 16       	cp	r1, r24
    37f8:	4c f5       	brge	.+82     	; 0x384c <LCD_voidSendCommand+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    37fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    37fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3800:	9e 85       	ldd	r25, Y+14	; 0x0e
    3802:	20 e0       	ldi	r18, 0x00	; 0
    3804:	30 e0       	ldi	r19, 0x00	; 0
    3806:	40 e2       	ldi	r20, 0x20	; 32
    3808:	51 e4       	ldi	r21, 0x41	; 65
    380a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380e:	dc 01       	movw	r26, r24
    3810:	cb 01       	movw	r24, r22
    3812:	bc 01       	movw	r22, r24
    3814:	cd 01       	movw	r24, r26
    3816:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    381a:	dc 01       	movw	r26, r24
    381c:	cb 01       	movw	r24, r22
    381e:	9e 83       	std	Y+6, r25	; 0x06
    3820:	8d 83       	std	Y+5, r24	; 0x05
    3822:	0f c0       	rjmp	.+30     	; 0x3842 <LCD_voidSendCommand+0x19c>
    3824:	80 e9       	ldi	r24, 0x90	; 144
    3826:	91 e0       	ldi	r25, 0x01	; 1
    3828:	9c 83       	std	Y+4, r25	; 0x04
    382a:	8b 83       	std	Y+3, r24	; 0x03
    382c:	8b 81       	ldd	r24, Y+3	; 0x03
    382e:	9c 81       	ldd	r25, Y+4	; 0x04
    3830:	01 97       	sbiw	r24, 0x01	; 1
    3832:	f1 f7       	brne	.-4      	; 0x3830 <LCD_voidSendCommand+0x18a>
    3834:	9c 83       	std	Y+4, r25	; 0x04
    3836:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3838:	8d 81       	ldd	r24, Y+5	; 0x05
    383a:	9e 81       	ldd	r25, Y+6	; 0x06
    383c:	01 97       	sbiw	r24, 0x01	; 1
    383e:	9e 83       	std	Y+6, r25	; 0x06
    3840:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3842:	8d 81       	ldd	r24, Y+5	; 0x05
    3844:	9e 81       	ldd	r25, Y+6	; 0x06
    3846:	00 97       	sbiw	r24, 0x00	; 0
    3848:	69 f7       	brne	.-38     	; 0x3824 <LCD_voidSendCommand+0x17e>
    384a:	14 c0       	rjmp	.+40     	; 0x3874 <LCD_voidSendCommand+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    384c:	6f 81       	ldd	r22, Y+7	; 0x07
    384e:	78 85       	ldd	r23, Y+8	; 0x08
    3850:	89 85       	ldd	r24, Y+9	; 0x09
    3852:	9a 85       	ldd	r25, Y+10	; 0x0a
    3854:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3858:	dc 01       	movw	r26, r24
    385a:	cb 01       	movw	r24, r22
    385c:	9e 83       	std	Y+6, r25	; 0x06
    385e:	8d 83       	std	Y+5, r24	; 0x05
    3860:	8d 81       	ldd	r24, Y+5	; 0x05
    3862:	9e 81       	ldd	r25, Y+6	; 0x06
    3864:	9a 83       	std	Y+2, r25	; 0x02
    3866:	89 83       	std	Y+1, r24	; 0x01
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	9a 81       	ldd	r25, Y+2	; 0x02
    386c:	01 97       	sbiw	r24, 0x01	; 1
    386e:	f1 f7       	brne	.-4      	; 0x386c <LCD_voidSendCommand+0x1c6>
    3870:	9a 83       	std	Y+2, r25	; 0x02
    3872:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3874:	2f 96       	adiw	r28, 0x0f	; 15
    3876:	0f b6       	in	r0, 0x3f	; 63
    3878:	f8 94       	cli
    387a:	de bf       	out	0x3e, r29	; 62
    387c:	0f be       	out	0x3f, r0	; 63
    387e:	cd bf       	out	0x3d, r28	; 61
    3880:	cf 91       	pop	r28
    3882:	df 91       	pop	r29
    3884:	08 95       	ret

00003886 <LCD_voidSendInitCommand>:

void LCD_voidSendInitCommand(u8 command){
    3886:	df 93       	push	r29
    3888:	cf 93       	push	r28
    388a:	cd b7       	in	r28, 0x3d	; 61
    388c:	de b7       	in	r29, 0x3e	; 62
    388e:	2f 97       	sbiw	r28, 0x0f	; 15
    3890:	0f b6       	in	r0, 0x3f	; 63
    3892:	f8 94       	cli
    3894:	de bf       	out	0x3e, r29	; 62
    3896:	0f be       	out	0x3f, r0	; 63
    3898:	cd bf       	out	0x3d, r28	; 61
    389a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_LOW); //RS = 0
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	63 e0       	ldi	r22, 0x03	; 3
    38a0:	40 e0       	ldi	r20, 0x00	; 0
    38a2:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	62 e0       	ldi	r22, 0x02	; 2
    38aa:	41 e0       	ldi	r20, 0x01	; 1
    38ac:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(command, 4));
    38b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    38b2:	82 95       	swap	r24
    38b4:	8f 70       	andi	r24, 0x0F	; 15
    38b6:	98 2f       	mov	r25, r24
    38b8:	91 70       	andi	r25, 0x01	; 1
    38ba:	81 e0       	ldi	r24, 0x01	; 1
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	49 2f       	mov	r20, r25
    38c0:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(command, 5));
    38c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c6:	82 95       	swap	r24
    38c8:	86 95       	lsr	r24
    38ca:	87 70       	andi	r24, 0x07	; 7
    38cc:	98 2f       	mov	r25, r24
    38ce:	91 70       	andi	r25, 0x01	; 1
    38d0:	81 e0       	ldi	r24, 0x01	; 1
    38d2:	61 e0       	ldi	r22, 0x01	; 1
    38d4:	49 2f       	mov	r20, r25
    38d6:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(command, 6));
    38da:	8f 85       	ldd	r24, Y+15	; 0x0f
    38dc:	82 95       	swap	r24
    38de:	86 95       	lsr	r24
    38e0:	86 95       	lsr	r24
    38e2:	83 70       	andi	r24, 0x03	; 3
    38e4:	98 2f       	mov	r25, r24
    38e6:	91 70       	andi	r25, 0x01	; 1
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	62 e0       	ldi	r22, 0x02	; 2
    38ec:	49 2f       	mov	r20, r25
    38ee:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(command, 7));
    38f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    38f4:	98 2f       	mov	r25, r24
    38f6:	99 1f       	adc	r25, r25
    38f8:	99 27       	eor	r25, r25
    38fa:	99 1f       	adc	r25, r25
    38fc:	81 e0       	ldi	r24, 0x01	; 1
    38fe:	63 e0       	ldi	r22, 0x03	; 3
    3900:	49 2f       	mov	r20, r25
    3902:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	62 e0       	ldi	r22, 0x02	; 2
    390a:	40 e0       	ldi	r20, 0x00	; 0
    390c:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	a0 ea       	ldi	r26, 0xA0	; 160
    3916:	b0 e4       	ldi	r27, 0x40	; 64
    3918:	8b 87       	std	Y+11, r24	; 0x0b
    391a:	9c 87       	std	Y+12, r25	; 0x0c
    391c:	ad 87       	std	Y+13, r26	; 0x0d
    391e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3920:	6b 85       	ldd	r22, Y+11	; 0x0b
    3922:	7c 85       	ldd	r23, Y+12	; 0x0c
    3924:	8d 85       	ldd	r24, Y+13	; 0x0d
    3926:	9e 85       	ldd	r25, Y+14	; 0x0e
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	4a e7       	ldi	r20, 0x7A	; 122
    392e:	55 e4       	ldi	r21, 0x45	; 69
    3930:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3934:	dc 01       	movw	r26, r24
    3936:	cb 01       	movw	r24, r22
    3938:	8f 83       	std	Y+7, r24	; 0x07
    393a:	98 87       	std	Y+8, r25	; 0x08
    393c:	a9 87       	std	Y+9, r26	; 0x09
    393e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3940:	6f 81       	ldd	r22, Y+7	; 0x07
    3942:	78 85       	ldd	r23, Y+8	; 0x08
    3944:	89 85       	ldd	r24, Y+9	; 0x09
    3946:	9a 85       	ldd	r25, Y+10	; 0x0a
    3948:	20 e0       	ldi	r18, 0x00	; 0
    394a:	30 e0       	ldi	r19, 0x00	; 0
    394c:	40 e8       	ldi	r20, 0x80	; 128
    394e:	5f e3       	ldi	r21, 0x3F	; 63
    3950:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3954:	88 23       	and	r24, r24
    3956:	2c f4       	brge	.+10     	; 0x3962 <LCD_voidSendInitCommand+0xdc>
		__ticks = 1;
    3958:	81 e0       	ldi	r24, 0x01	; 1
    395a:	90 e0       	ldi	r25, 0x00	; 0
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
    3960:	3f c0       	rjmp	.+126    	; 0x39e0 <LCD_voidSendInitCommand+0x15a>
	else if (__tmp > 65535)
    3962:	6f 81       	ldd	r22, Y+7	; 0x07
    3964:	78 85       	ldd	r23, Y+8	; 0x08
    3966:	89 85       	ldd	r24, Y+9	; 0x09
    3968:	9a 85       	ldd	r25, Y+10	; 0x0a
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	3f ef       	ldi	r19, 0xFF	; 255
    396e:	4f e7       	ldi	r20, 0x7F	; 127
    3970:	57 e4       	ldi	r21, 0x47	; 71
    3972:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3976:	18 16       	cp	r1, r24
    3978:	4c f5       	brge	.+82     	; 0x39cc <LCD_voidSendInitCommand+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    397a:	6b 85       	ldd	r22, Y+11	; 0x0b
    397c:	7c 85       	ldd	r23, Y+12	; 0x0c
    397e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3980:	9e 85       	ldd	r25, Y+14	; 0x0e
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	40 e2       	ldi	r20, 0x20	; 32
    3988:	51 e4       	ldi	r21, 0x41	; 65
    398a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	bc 01       	movw	r22, r24
    3994:	cd 01       	movw	r24, r26
    3996:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    399a:	dc 01       	movw	r26, r24
    399c:	cb 01       	movw	r24, r22
    399e:	9e 83       	std	Y+6, r25	; 0x06
    39a0:	8d 83       	std	Y+5, r24	; 0x05
    39a2:	0f c0       	rjmp	.+30     	; 0x39c2 <LCD_voidSendInitCommand+0x13c>
    39a4:	80 e9       	ldi	r24, 0x90	; 144
    39a6:	91 e0       	ldi	r25, 0x01	; 1
    39a8:	9c 83       	std	Y+4, r25	; 0x04
    39aa:	8b 83       	std	Y+3, r24	; 0x03
    39ac:	8b 81       	ldd	r24, Y+3	; 0x03
    39ae:	9c 81       	ldd	r25, Y+4	; 0x04
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <LCD_voidSendInitCommand+0x12a>
    39b4:	9c 83       	std	Y+4, r25	; 0x04
    39b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39b8:	8d 81       	ldd	r24, Y+5	; 0x05
    39ba:	9e 81       	ldd	r25, Y+6	; 0x06
    39bc:	01 97       	sbiw	r24, 0x01	; 1
    39be:	9e 83       	std	Y+6, r25	; 0x06
    39c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39c2:	8d 81       	ldd	r24, Y+5	; 0x05
    39c4:	9e 81       	ldd	r25, Y+6	; 0x06
    39c6:	00 97       	sbiw	r24, 0x00	; 0
    39c8:	69 f7       	brne	.-38     	; 0x39a4 <LCD_voidSendInitCommand+0x11e>
    39ca:	14 c0       	rjmp	.+40     	; 0x39f4 <LCD_voidSendInitCommand+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39cc:	6f 81       	ldd	r22, Y+7	; 0x07
    39ce:	78 85       	ldd	r23, Y+8	; 0x08
    39d0:	89 85       	ldd	r24, Y+9	; 0x09
    39d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39d8:	dc 01       	movw	r26, r24
    39da:	cb 01       	movw	r24, r22
    39dc:	9e 83       	std	Y+6, r25	; 0x06
    39de:	8d 83       	std	Y+5, r24	; 0x05
    39e0:	8d 81       	ldd	r24, Y+5	; 0x05
    39e2:	9e 81       	ldd	r25, Y+6	; 0x06
    39e4:	9a 83       	std	Y+2, r25	; 0x02
    39e6:	89 83       	std	Y+1, r24	; 0x01
    39e8:	89 81       	ldd	r24, Y+1	; 0x01
    39ea:	9a 81       	ldd	r25, Y+2	; 0x02
    39ec:	01 97       	sbiw	r24, 0x01	; 1
    39ee:	f1 f7       	brne	.-4      	; 0x39ec <LCD_voidSendInitCommand+0x166>
    39f0:	9a 83       	std	Y+2, r25	; 0x02
    39f2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}
    39f4:	2f 96       	adiw	r28, 0x0f	; 15
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	cf 91       	pop	r28
    3a02:	df 91       	pop	r29
    3a04:	08 95       	ret

00003a06 <LCD_voidWriteChar>:

void LCD_voidWriteChar(u8 data){
    3a06:	df 93       	push	r29
    3a08:	cf 93       	push	r28
    3a0a:	cd b7       	in	r28, 0x3d	; 61
    3a0c:	de b7       	in	r29, 0x3e	; 62
    3a0e:	2f 97       	sbiw	r28, 0x0f	; 15
    3a10:	0f b6       	in	r0, 0x3f	; 63
    3a12:	f8 94       	cli
    3a14:	de bf       	out	0x3e, r29	; 62
    3a16:	0f be       	out	0x3f, r0	; 63
    3a18:	cd bf       	out	0x3d, r28	; 61
    3a1a:	8f 87       	std	Y+15, r24	; 0x0f
	DIO_u8SetPinValue(LCD_CONTROL_PORT,LCD_RS, DIO_u8PIN_HIGH); //RS = 0
    3a1c:	80 e0       	ldi	r24, 0x00	; 0
    3a1e:	63 e0       	ldi	r22, 0x03	; 3
    3a20:	41 e0       	ldi	r20, 0x01	; 1
    3a22:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>

	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    3a26:	80 e0       	ldi	r24, 0x00	; 0
    3a28:	62 e0       	ldi	r22, 0x02	; 2
    3a2a:	41 e0       	ldi	r20, 0x01	; 1
    3a2c:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D0, Get_Bit(data, 0));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D1, Get_Bit(data, 1));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D2, Get_Bit(data, 2));
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D3, Get_Bit(data, 3));
#endif
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 4));
    3a30:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a32:	82 95       	swap	r24
    3a34:	8f 70       	andi	r24, 0x0F	; 15
    3a36:	98 2f       	mov	r25, r24
    3a38:	91 70       	andi	r25, 0x01	; 1
    3a3a:	81 e0       	ldi	r24, 0x01	; 1
    3a3c:	60 e0       	ldi	r22, 0x00	; 0
    3a3e:	49 2f       	mov	r20, r25
    3a40:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 5));
    3a44:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a46:	82 95       	swap	r24
    3a48:	86 95       	lsr	r24
    3a4a:	87 70       	andi	r24, 0x07	; 7
    3a4c:	98 2f       	mov	r25, r24
    3a4e:	91 70       	andi	r25, 0x01	; 1
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	61 e0       	ldi	r22, 0x01	; 1
    3a54:	49 2f       	mov	r20, r25
    3a56:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 6));
    3a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a5c:	82 95       	swap	r24
    3a5e:	86 95       	lsr	r24
    3a60:	86 95       	lsr	r24
    3a62:	83 70       	andi	r24, 0x03	; 3
    3a64:	98 2f       	mov	r25, r24
    3a66:	91 70       	andi	r25, 0x01	; 1
    3a68:	81 e0       	ldi	r24, 0x01	; 1
    3a6a:	62 e0       	ldi	r22, 0x02	; 2
    3a6c:	49 2f       	mov	r20, r25
    3a6e:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 7));
    3a72:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a74:	98 2f       	mov	r25, r24
    3a76:	99 1f       	adc	r25, r25
    3a78:	99 27       	eor	r25, r25
    3a7a:	99 1f       	adc	r25, r25
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	63 e0       	ldi	r22, 0x03	; 3
    3a80:	49 2f       	mov	r20, r25
    3a82:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	62 e0       	ldi	r22, 0x02	; 2
    3a8a:	40 e0       	ldi	r20, 0x00	; 0
    3a8c:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>

#if LCD_BITS == LCD_4_BIT_MODE
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_HIGH); //EN = 1
    3a90:	80 e0       	ldi	r24, 0x00	; 0
    3a92:	62 e0       	ldi	r22, 0x02	; 2
    3a94:	41 e0       	ldi	r20, 0x01	; 1
    3a96:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D4, Get_Bit(data, 0));
    3a9a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a9c:	98 2f       	mov	r25, r24
    3a9e:	91 70       	andi	r25, 0x01	; 1
    3aa0:	81 e0       	ldi	r24, 0x01	; 1
    3aa2:	60 e0       	ldi	r22, 0x00	; 0
    3aa4:	49 2f       	mov	r20, r25
    3aa6:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D5, Get_Bit(data, 1));
    3aaa:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aac:	86 95       	lsr	r24
    3aae:	98 2f       	mov	r25, r24
    3ab0:	91 70       	andi	r25, 0x01	; 1
    3ab2:	81 e0       	ldi	r24, 0x01	; 1
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	49 2f       	mov	r20, r25
    3ab8:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D6, Get_Bit(data, 2));
    3abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3abe:	86 95       	lsr	r24
    3ac0:	86 95       	lsr	r24
    3ac2:	98 2f       	mov	r25, r24
    3ac4:	91 70       	andi	r25, 0x01	; 1
    3ac6:	81 e0       	ldi	r24, 0x01	; 1
    3ac8:	62 e0       	ldi	r22, 0x02	; 2
    3aca:	49 2f       	mov	r20, r25
    3acc:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_DATA_PORT, LCD_D7, Get_Bit(data, 3));
    3ad0:	8f 85       	ldd	r24, Y+15	; 0x0f
    3ad2:	86 95       	lsr	r24
    3ad4:	86 95       	lsr	r24
    3ad6:	86 95       	lsr	r24
    3ad8:	98 2f       	mov	r25, r24
    3ada:	91 70       	andi	r25, 0x01	; 1
    3adc:	81 e0       	ldi	r24, 0x01	; 1
    3ade:	63 e0       	ldi	r22, 0x03	; 3
    3ae0:	49 2f       	mov	r20, r25
    3ae2:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(LCD_CONTROL_PORT, LCD_EN, DIO_u8PIN_LOW); //EN = 0
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	62 e0       	ldi	r22, 0x02	; 2
    3aea:	40 e0       	ldi	r20, 0x00	; 0
    3aec:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
    3af0:	80 e0       	ldi	r24, 0x00	; 0
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	a0 ea       	ldi	r26, 0xA0	; 160
    3af6:	b0 e4       	ldi	r27, 0x40	; 64
    3af8:	8b 87       	std	Y+11, r24	; 0x0b
    3afa:	9c 87       	std	Y+12, r25	; 0x0c
    3afc:	ad 87       	std	Y+13, r26	; 0x0d
    3afe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b00:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b02:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b04:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b06:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	4a e7       	ldi	r20, 0x7A	; 122
    3b0e:	55 e4       	ldi	r21, 0x45	; 69
    3b10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b14:	dc 01       	movw	r26, r24
    3b16:	cb 01       	movw	r24, r22
    3b18:	8f 83       	std	Y+7, r24	; 0x07
    3b1a:	98 87       	std	Y+8, r25	; 0x08
    3b1c:	a9 87       	std	Y+9, r26	; 0x09
    3b1e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b20:	6f 81       	ldd	r22, Y+7	; 0x07
    3b22:	78 85       	ldd	r23, Y+8	; 0x08
    3b24:	89 85       	ldd	r24, Y+9	; 0x09
    3b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	40 e8       	ldi	r20, 0x80	; 128
    3b2e:	5f e3       	ldi	r21, 0x3F	; 63
    3b30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b34:	88 23       	and	r24, r24
    3b36:	2c f4       	brge	.+10     	; 0x3b42 <LCD_voidWriteChar+0x13c>
		__ticks = 1;
    3b38:	81 e0       	ldi	r24, 0x01	; 1
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	9e 83       	std	Y+6, r25	; 0x06
    3b3e:	8d 83       	std	Y+5, r24	; 0x05
    3b40:	3f c0       	rjmp	.+126    	; 0x3bc0 <LCD_voidWriteChar+0x1ba>
	else if (__tmp > 65535)
    3b42:	6f 81       	ldd	r22, Y+7	; 0x07
    3b44:	78 85       	ldd	r23, Y+8	; 0x08
    3b46:	89 85       	ldd	r24, Y+9	; 0x09
    3b48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b4a:	20 e0       	ldi	r18, 0x00	; 0
    3b4c:	3f ef       	ldi	r19, 0xFF	; 255
    3b4e:	4f e7       	ldi	r20, 0x7F	; 127
    3b50:	57 e4       	ldi	r21, 0x47	; 71
    3b52:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b56:	18 16       	cp	r1, r24
    3b58:	4c f5       	brge	.+82     	; 0x3bac <LCD_voidWriteChar+0x1a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b60:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b62:	20 e0       	ldi	r18, 0x00	; 0
    3b64:	30 e0       	ldi	r19, 0x00	; 0
    3b66:	40 e2       	ldi	r20, 0x20	; 32
    3b68:	51 e4       	ldi	r21, 0x41	; 65
    3b6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b6e:	dc 01       	movw	r26, r24
    3b70:	cb 01       	movw	r24, r22
    3b72:	bc 01       	movw	r22, r24
    3b74:	cd 01       	movw	r24, r26
    3b76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b7a:	dc 01       	movw	r26, r24
    3b7c:	cb 01       	movw	r24, r22
    3b7e:	9e 83       	std	Y+6, r25	; 0x06
    3b80:	8d 83       	std	Y+5, r24	; 0x05
    3b82:	0f c0       	rjmp	.+30     	; 0x3ba2 <LCD_voidWriteChar+0x19c>
    3b84:	80 e9       	ldi	r24, 0x90	; 144
    3b86:	91 e0       	ldi	r25, 0x01	; 1
    3b88:	9c 83       	std	Y+4, r25	; 0x04
    3b8a:	8b 83       	std	Y+3, r24	; 0x03
    3b8c:	8b 81       	ldd	r24, Y+3	; 0x03
    3b8e:	9c 81       	ldd	r25, Y+4	; 0x04
    3b90:	01 97       	sbiw	r24, 0x01	; 1
    3b92:	f1 f7       	brne	.-4      	; 0x3b90 <LCD_voidWriteChar+0x18a>
    3b94:	9c 83       	std	Y+4, r25	; 0x04
    3b96:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b98:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9a:	9e 81       	ldd	r25, Y+6	; 0x06
    3b9c:	01 97       	sbiw	r24, 0x01	; 1
    3b9e:	9e 83       	std	Y+6, r25	; 0x06
    3ba0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba6:	00 97       	sbiw	r24, 0x00	; 0
    3ba8:	69 f7       	brne	.-38     	; 0x3b84 <LCD_voidWriteChar+0x17e>
    3baa:	14 c0       	rjmp	.+40     	; 0x3bd4 <LCD_voidWriteChar+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bac:	6f 81       	ldd	r22, Y+7	; 0x07
    3bae:	78 85       	ldd	r23, Y+8	; 0x08
    3bb0:	89 85       	ldd	r24, Y+9	; 0x09
    3bb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bb4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	9e 83       	std	Y+6, r25	; 0x06
    3bbe:	8d 83       	std	Y+5, r24	; 0x05
    3bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc4:	9a 83       	std	Y+2, r25	; 0x02
    3bc6:	89 83       	std	Y+1, r24	; 0x01
    3bc8:	89 81       	ldd	r24, Y+1	; 0x01
    3bca:	9a 81       	ldd	r25, Y+2	; 0x02
    3bcc:	01 97       	sbiw	r24, 0x01	; 1
    3bce:	f1 f7       	brne	.-4      	; 0x3bcc <LCD_voidWriteChar+0x1c6>
    3bd0:	9a 83       	std	Y+2, r25	; 0x02
    3bd2:	89 83       	std	Y+1, r24	; 0x01
#endif
	_delay_ms(5);
}
    3bd4:	2f 96       	adiw	r28, 0x0f	; 15
    3bd6:	0f b6       	in	r0, 0x3f	; 63
    3bd8:	f8 94       	cli
    3bda:	de bf       	out	0x3e, r29	; 62
    3bdc:	0f be       	out	0x3f, r0	; 63
    3bde:	cd bf       	out	0x3d, r28	; 61
    3be0:	cf 91       	pop	r28
    3be2:	df 91       	pop	r29
    3be4:	08 95       	ret

00003be6 <LCD_voidWriteString>:

void LCD_voidWriteString(u8* Local_Data){
    3be6:	df 93       	push	r29
    3be8:	cf 93       	push	r28
    3bea:	00 d0       	rcall	.+0      	; 0x3bec <LCD_voidWriteString+0x6>
    3bec:	0f 92       	push	r0
    3bee:	cd b7       	in	r28, 0x3d	; 61
    3bf0:	de b7       	in	r29, 0x3e	; 62
    3bf2:	9b 83       	std	Y+3, r25	; 0x03
    3bf4:	8a 83       	std	Y+2, r24	; 0x02
	u8 index = 0;
    3bf6:	19 82       	std	Y+1, r1	; 0x01
    3bf8:	0e c0       	rjmp	.+28     	; 0x3c16 <LCD_voidWriteString+0x30>
	while(Local_Data[index] != '\0'){
		LCD_voidWriteChar(Local_Data[index]);
    3bfa:	89 81       	ldd	r24, Y+1	; 0x01
    3bfc:	28 2f       	mov	r18, r24
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	8a 81       	ldd	r24, Y+2	; 0x02
    3c02:	9b 81       	ldd	r25, Y+3	; 0x03
    3c04:	fc 01       	movw	r30, r24
    3c06:	e2 0f       	add	r30, r18
    3c08:	f3 1f       	adc	r31, r19
    3c0a:	80 81       	ld	r24, Z
    3c0c:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
		index++;
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	8f 5f       	subi	r24, 0xFF	; 255
    3c14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
}

void LCD_voidWriteString(u8* Local_Data){
	u8 index = 0;
	while(Local_Data[index] != '\0'){
    3c16:	89 81       	ldd	r24, Y+1	; 0x01
    3c18:	28 2f       	mov	r18, r24
    3c1a:	30 e0       	ldi	r19, 0x00	; 0
    3c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c20:	fc 01       	movw	r30, r24
    3c22:	e2 0f       	add	r30, r18
    3c24:	f3 1f       	adc	r31, r19
    3c26:	80 81       	ld	r24, Z
    3c28:	88 23       	and	r24, r24
    3c2a:	39 f7       	brne	.-50     	; 0x3bfa <LCD_voidWriteString+0x14>
		LCD_voidWriteChar(Local_Data[index]);
		index++;
	}
}
    3c2c:	0f 90       	pop	r0
    3c2e:	0f 90       	pop	r0
    3c30:	0f 90       	pop	r0
    3c32:	cf 91       	pop	r28
    3c34:	df 91       	pop	r29
    3c36:	08 95       	ret

00003c38 <IntToString>:

u8* IntToString(s32 anInteger,u8 *str){
    3c38:	0f 93       	push	r16
    3c3a:	1f 93       	push	r17
    3c3c:	df 93       	push	r29
    3c3e:	cf 93       	push	r28
    3c40:	cd b7       	in	r28, 0x3d	; 61
    3c42:	de b7       	in	r29, 0x3e	; 62
    3c44:	2e 97       	sbiw	r28, 0x0e	; 14
    3c46:	0f b6       	in	r0, 0x3f	; 63
    3c48:	f8 94       	cli
    3c4a:	de bf       	out	0x3e, r29	; 62
    3c4c:	0f be       	out	0x3f, r0	; 63
    3c4e:	cd bf       	out	0x3d, r28	; 61
    3c50:	69 87       	std	Y+9, r22	; 0x09
    3c52:	7a 87       	std	Y+10, r23	; 0x0a
    3c54:	8b 87       	std	Y+11, r24	; 0x0b
    3c56:	9c 87       	std	Y+12, r25	; 0x0c
    3c58:	5e 87       	std	Y+14, r21	; 0x0e
    3c5a:	4d 87       	std	Y+13, r20	; 0x0d
	u32 flag = 0;
    3c5c:	1d 82       	std	Y+5, r1	; 0x05
    3c5e:	1e 82       	std	Y+6, r1	; 0x06
    3c60:	1f 82       	std	Y+7, r1	; 0x07
    3c62:	18 86       	std	Y+8, r1	; 0x08
	u32 i = INT_TO_STRING_ARR_SIZE - 1;
    3c64:	83 e1       	ldi	r24, 0x13	; 19
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	a0 e0       	ldi	r26, 0x00	; 0
    3c6a:	b0 e0       	ldi	r27, 0x00	; 0
    3c6c:	89 83       	std	Y+1, r24	; 0x01
    3c6e:	9a 83       	std	Y+2, r25	; 0x02
    3c70:	ab 83       	std	Y+3, r26	; 0x03
    3c72:	bc 83       	std	Y+4, r27	; 0x04
	str[i--] = '\0';
    3c74:	29 81       	ldd	r18, Y+1	; 0x01
    3c76:	3a 81       	ldd	r19, Y+2	; 0x02
    3c78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c7c:	fc 01       	movw	r30, r24
    3c7e:	e2 0f       	add	r30, r18
    3c80:	f3 1f       	adc	r31, r19
    3c82:	10 82       	st	Z, r1
    3c84:	89 81       	ldd	r24, Y+1	; 0x01
    3c86:	9a 81       	ldd	r25, Y+2	; 0x02
    3c88:	ab 81       	ldd	r26, Y+3	; 0x03
    3c8a:	bc 81       	ldd	r27, Y+4	; 0x04
    3c8c:	01 97       	sbiw	r24, 0x01	; 1
    3c8e:	a1 09       	sbc	r26, r1
    3c90:	b1 09       	sbc	r27, r1
    3c92:	89 83       	std	Y+1, r24	; 0x01
    3c94:	9a 83       	std	Y+2, r25	; 0x02
    3c96:	ab 83       	std	Y+3, r26	; 0x03
    3c98:	bc 83       	std	Y+4, r27	; 0x04
	if (anInteger < 0) {
    3c9a:	89 85       	ldd	r24, Y+9	; 0x09
    3c9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c9e:	ab 85       	ldd	r26, Y+11	; 0x0b
    3ca0:	bc 85       	ldd	r27, Y+12	; 0x0c
    3ca2:	bb 23       	and	r27, r27
    3ca4:	0c f0       	brlt	.+2      	; 0x3ca8 <IntToString+0x70>
    3ca6:	4d c0       	rjmp	.+154    	; 0x3d42 <IntToString+0x10a>
		flag = 1;
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	a0 e0       	ldi	r26, 0x00	; 0
    3cae:	b0 e0       	ldi	r27, 0x00	; 0
    3cb0:	8d 83       	std	Y+5, r24	; 0x05
    3cb2:	9e 83       	std	Y+6, r25	; 0x06
    3cb4:	af 83       	std	Y+7, r26	; 0x07
    3cb6:	b8 87       	std	Y+8, r27	; 0x08
		anInteger = -anInteger;
    3cb8:	89 85       	ldd	r24, Y+9	; 0x09
    3cba:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cbc:	ab 85       	ldd	r26, Y+11	; 0x0b
    3cbe:	bc 85       	ldd	r27, Y+12	; 0x0c
    3cc0:	b0 95       	com	r27
    3cc2:	a0 95       	com	r26
    3cc4:	90 95       	com	r25
    3cc6:	81 95       	neg	r24
    3cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    3cca:	af 4f       	sbci	r26, 0xFF	; 255
    3ccc:	bf 4f       	sbci	r27, 0xFF	; 255
    3cce:	89 87       	std	Y+9, r24	; 0x09
    3cd0:	9a 87       	std	Y+10, r25	; 0x0a
    3cd2:	ab 87       	std	Y+11, r26	; 0x0b
    3cd4:	bc 87       	std	Y+12, r27	; 0x0c
    3cd6:	35 c0       	rjmp	.+106    	; 0x3d42 <IntToString+0x10a>
	}
	while (anInteger != 0) {
		str[i--] = (anInteger % 10) + '0';
    3cd8:	29 81       	ldd	r18, Y+1	; 0x01
    3cda:	3a 81       	ldd	r19, Y+2	; 0x02
    3cdc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cde:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ce0:	8c 01       	movw	r16, r24
    3ce2:	02 0f       	add	r16, r18
    3ce4:	13 1f       	adc	r17, r19
    3ce6:	89 85       	ldd	r24, Y+9	; 0x09
    3ce8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cea:	ab 85       	ldd	r26, Y+11	; 0x0b
    3cec:	bc 85       	ldd	r27, Y+12	; 0x0c
    3cee:	2a e0       	ldi	r18, 0x0A	; 10
    3cf0:	30 e0       	ldi	r19, 0x00	; 0
    3cf2:	40 e0       	ldi	r20, 0x00	; 0
    3cf4:	50 e0       	ldi	r21, 0x00	; 0
    3cf6:	bc 01       	movw	r22, r24
    3cf8:	cd 01       	movw	r24, r26
    3cfa:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__divmodsi4>
    3cfe:	dc 01       	movw	r26, r24
    3d00:	cb 01       	movw	r24, r22
    3d02:	80 5d       	subi	r24, 0xD0	; 208
    3d04:	f8 01       	movw	r30, r16
    3d06:	80 83       	st	Z, r24
    3d08:	89 81       	ldd	r24, Y+1	; 0x01
    3d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d0c:	ab 81       	ldd	r26, Y+3	; 0x03
    3d0e:	bc 81       	ldd	r27, Y+4	; 0x04
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	a1 09       	sbc	r26, r1
    3d14:	b1 09       	sbc	r27, r1
    3d16:	89 83       	std	Y+1, r24	; 0x01
    3d18:	9a 83       	std	Y+2, r25	; 0x02
    3d1a:	ab 83       	std	Y+3, r26	; 0x03
    3d1c:	bc 83       	std	Y+4, r27	; 0x04
		anInteger /= 10;
    3d1e:	89 85       	ldd	r24, Y+9	; 0x09
    3d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d22:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d24:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d26:	2a e0       	ldi	r18, 0x0A	; 10
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	40 e0       	ldi	r20, 0x00	; 0
    3d2c:	50 e0       	ldi	r21, 0x00	; 0
    3d2e:	bc 01       	movw	r22, r24
    3d30:	cd 01       	movw	r24, r26
    3d32:	0e 94 fc 20 	call	0x41f8	; 0x41f8 <__divmodsi4>
    3d36:	da 01       	movw	r26, r20
    3d38:	c9 01       	movw	r24, r18
    3d3a:	89 87       	std	Y+9, r24	; 0x09
    3d3c:	9a 87       	std	Y+10, r25	; 0x0a
    3d3e:	ab 87       	std	Y+11, r26	; 0x0b
    3d40:	bc 87       	std	Y+12, r27	; 0x0c
	str[i--] = '\0';
	if (anInteger < 0) {
		flag = 1;
		anInteger = -anInteger;
	}
	while (anInteger != 0) {
    3d42:	89 85       	ldd	r24, Y+9	; 0x09
    3d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d46:	ab 85       	ldd	r26, Y+11	; 0x0b
    3d48:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d4a:	00 97       	sbiw	r24, 0x00	; 0
    3d4c:	a1 05       	cpc	r26, r1
    3d4e:	b1 05       	cpc	r27, r1
    3d50:	19 f6       	brne	.-122    	; 0x3cd8 <IntToString+0xa0>
		str[i--] = (anInteger % 10) + '0';
		anInteger /= 10;
	}
	if (flag){
    3d52:	8d 81       	ldd	r24, Y+5	; 0x05
    3d54:	9e 81       	ldd	r25, Y+6	; 0x06
    3d56:	af 81       	ldd	r26, Y+7	; 0x07
    3d58:	b8 85       	ldd	r27, Y+8	; 0x08
    3d5a:	00 97       	sbiw	r24, 0x00	; 0
    3d5c:	a1 05       	cpc	r26, r1
    3d5e:	b1 05       	cpc	r27, r1
    3d60:	a1 f0       	breq	.+40     	; 0x3d8a <IntToString+0x152>
		str[i--] = '-';
    3d62:	29 81       	ldd	r18, Y+1	; 0x01
    3d64:	3a 81       	ldd	r19, Y+2	; 0x02
    3d66:	8d 85       	ldd	r24, Y+13	; 0x0d
    3d68:	9e 85       	ldd	r25, Y+14	; 0x0e
    3d6a:	fc 01       	movw	r30, r24
    3d6c:	e2 0f       	add	r30, r18
    3d6e:	f3 1f       	adc	r31, r19
    3d70:	8d e2       	ldi	r24, 0x2D	; 45
    3d72:	80 83       	st	Z, r24
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	9a 81       	ldd	r25, Y+2	; 0x02
    3d78:	ab 81       	ldd	r26, Y+3	; 0x03
    3d7a:	bc 81       	ldd	r27, Y+4	; 0x04
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	a1 09       	sbc	r26, r1
    3d80:	b1 09       	sbc	r27, r1
    3d82:	89 83       	std	Y+1, r24	; 0x01
    3d84:	9a 83       	std	Y+2, r25	; 0x02
    3d86:	ab 83       	std	Y+3, r26	; 0x03
    3d88:	bc 83       	std	Y+4, r27	; 0x04
	}
	i++;
    3d8a:	89 81       	ldd	r24, Y+1	; 0x01
    3d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    3d8e:	ab 81       	ldd	r26, Y+3	; 0x03
    3d90:	bc 81       	ldd	r27, Y+4	; 0x04
    3d92:	01 96       	adiw	r24, 0x01	; 1
    3d94:	a1 1d       	adc	r26, r1
    3d96:	b1 1d       	adc	r27, r1
    3d98:	89 83       	std	Y+1, r24	; 0x01
    3d9a:	9a 83       	std	Y+2, r25	; 0x02
    3d9c:	ab 83       	std	Y+3, r26	; 0x03
    3d9e:	bc 83       	std	Y+4, r27	; 0x04
	return str + i;
    3da0:	29 81       	ldd	r18, Y+1	; 0x01
    3da2:	3a 81       	ldd	r19, Y+2	; 0x02
    3da4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3da6:	9e 85       	ldd	r25, Y+14	; 0x0e
    3da8:	82 0f       	add	r24, r18
    3daa:	93 1f       	adc	r25, r19

}
    3dac:	2e 96       	adiw	r28, 0x0e	; 14
    3dae:	0f b6       	in	r0, 0x3f	; 63
    3db0:	f8 94       	cli
    3db2:	de bf       	out	0x3e, r29	; 62
    3db4:	0f be       	out	0x3f, r0	; 63
    3db6:	cd bf       	out	0x3d, r28	; 61
    3db8:	cf 91       	pop	r28
    3dba:	df 91       	pop	r29
    3dbc:	1f 91       	pop	r17
    3dbe:	0f 91       	pop	r16
    3dc0:	08 95       	ret

00003dc2 <LCD_voidWriteIntData>:

void LCD_voidWriteIntData(s32 Data){
    3dc2:	df 93       	push	r29
    3dc4:	cf 93       	push	r28
    3dc6:	cd b7       	in	r28, 0x3d	; 61
    3dc8:	de b7       	in	r29, 0x3e	; 62
    3dca:	6a 97       	sbiw	r28, 0x1a	; 26
    3dcc:	0f b6       	in	r0, 0x3f	; 63
    3dce:	f8 94       	cli
    3dd0:	de bf       	out	0x3e, r29	; 62
    3dd2:	0f be       	out	0x3f, r0	; 63
    3dd4:	cd bf       	out	0x3d, r28	; 61
    3dd6:	6f 8b       	std	Y+23, r22	; 0x17
    3dd8:	78 8f       	std	Y+24, r23	; 0x18
    3dda:	89 8f       	std	Y+25, r24	; 0x19
    3ddc:	9a 8f       	std	Y+26, r25	; 0x1a
	if(Data){
    3dde:	8f 89       	ldd	r24, Y+23	; 0x17
    3de0:	98 8d       	ldd	r25, Y+24	; 0x18
    3de2:	a9 8d       	ldd	r26, Y+25	; 0x19
    3de4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3de6:	00 97       	sbiw	r24, 0x00	; 0
    3de8:	a1 05       	cpc	r26, r1
    3dea:	b1 05       	cpc	r27, r1
    3dec:	99 f0       	breq	.+38     	; 0x3e14 <LCD_voidWriteIntData+0x52>
		u8 arr[INT_TO_STRING_ARR_SIZE];
		u8 *str = IntToString(Data,arr);
    3dee:	8f 89       	ldd	r24, Y+23	; 0x17
    3df0:	98 8d       	ldd	r25, Y+24	; 0x18
    3df2:	a9 8d       	ldd	r26, Y+25	; 0x19
    3df4:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3df6:	9e 01       	movw	r18, r28
    3df8:	2d 5f       	subi	r18, 0xFD	; 253
    3dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    3dfc:	bc 01       	movw	r22, r24
    3dfe:	cd 01       	movw	r24, r26
    3e00:	a9 01       	movw	r20, r18
    3e02:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <IntToString>
    3e06:	9a 83       	std	Y+2, r25	; 0x02
    3e08:	89 83       	std	Y+1, r24	; 0x01
		LCD_voidWriteString(str);
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	9a 81       	ldd	r25, Y+2	; 0x02
    3e0e:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <LCD_voidWriteString>
    3e12:	03 c0       	rjmp	.+6      	; 0x3e1a <LCD_voidWriteIntData+0x58>
	}
	else{
		LCD_voidWriteChar('0');
    3e14:	80 e3       	ldi	r24, 0x30	; 48
    3e16:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
	}
}
    3e1a:	6a 96       	adiw	r28, 0x1a	; 26
    3e1c:	0f b6       	in	r0, 0x3f	; 63
    3e1e:	f8 94       	cli
    3e20:	de bf       	out	0x3e, r29	; 62
    3e22:	0f be       	out	0x3f, r0	; 63
    3e24:	cd bf       	out	0x3d, r28	; 61
    3e26:	cf 91       	pop	r28
    3e28:	df 91       	pop	r29
    3e2a:	08 95       	ret

00003e2c <LCD_voidWriteFloatData>:

void LCD_voidWriteFloatData(f32 Data){
    3e2c:	df 93       	push	r29
    3e2e:	cf 93       	push	r28
    3e30:	cd b7       	in	r28, 0x3d	; 61
    3e32:	de b7       	in	r29, 0x3e	; 62
    3e34:	a6 97       	sbiw	r28, 0x26	; 38
    3e36:	0f b6       	in	r0, 0x3f	; 63
    3e38:	f8 94       	cli
    3e3a:	de bf       	out	0x3e, r29	; 62
    3e3c:	0f be       	out	0x3f, r0	; 63
    3e3e:	cd bf       	out	0x3d, r28	; 61
    3e40:	6b a3       	std	Y+35, r22	; 0x23
    3e42:	7c a3       	std	Y+36, r23	; 0x24
    3e44:	8d a3       	std	Y+37, r24	; 0x25
    3e46:	9e a3       	std	Y+38, r25	; 0x26
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
    3e48:	6b a1       	ldd	r22, Y+35	; 0x23
    3e4a:	7c a1       	ldd	r23, Y+36	; 0x24
    3e4c:	8d a1       	ldd	r24, Y+37	; 0x25
    3e4e:	9e a1       	ldd	r25, Y+38	; 0x26
    3e50:	20 e0       	ldi	r18, 0x00	; 0
    3e52:	30 e0       	ldi	r19, 0x00	; 0
    3e54:	48 ec       	ldi	r20, 0xC8	; 200
    3e56:	52 e4       	ldi	r21, 0x42	; 66
    3e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e5c:	dc 01       	movw	r26, r24
    3e5e:	cb 01       	movw	r24, r22
    3e60:	bc 01       	movw	r22, r24
    3e62:	cd 01       	movw	r24, r26
    3e64:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    3e68:	dc 01       	movw	r26, r24
    3e6a:	cb 01       	movw	r24, r22
    3e6c:	8b 87       	std	Y+11, r24	; 0x0b
    3e6e:	9c 87       	std	Y+12, r25	; 0x0c
    3e70:	ad 87       	std	Y+13, r26	; 0x0d
    3e72:	be 87       	std	Y+14, r27	; 0x0e
	u8 *str = IntToString(number,arr);
    3e74:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e76:	9c 85       	ldd	r25, Y+12	; 0x0c
    3e78:	ad 85       	ldd	r26, Y+13	; 0x0d
    3e7a:	be 85       	ldd	r27, Y+14	; 0x0e
    3e7c:	9e 01       	movw	r18, r28
    3e7e:	21 5f       	subi	r18, 0xF1	; 241
    3e80:	3f 4f       	sbci	r19, 0xFF	; 255
    3e82:	bc 01       	movw	r22, r24
    3e84:	cd 01       	movw	r24, r26
    3e86:	a9 01       	movw	r20, r18
    3e88:	0e 94 1c 1e 	call	0x3c38	; 0x3c38 <IntToString>
    3e8c:	9a 87       	std	Y+10, r25	; 0x0a
    3e8e:	89 87       	std	Y+9, r24	; 0x09
	u32 counter=0;
    3e90:	1d 82       	std	Y+5, r1	; 0x05
    3e92:	1e 82       	std	Y+6, r1	; 0x06
    3e94:	1f 82       	std	Y+7, r1	; 0x07
    3e96:	18 86       	std	Y+8, r1	; 0x08
	u32 counter2=0;
    3e98:	19 82       	std	Y+1, r1	; 0x01
    3e9a:	1a 82       	std	Y+2, r1	; 0x02
    3e9c:	1b 82       	std	Y+3, r1	; 0x03
    3e9e:	1c 82       	std	Y+4, r1	; 0x04
    3ea0:	0b c0       	rjmp	.+22     	; 0x3eb8 <LCD_voidWriteFloatData+0x8c>
	while(str[counter] != '\0'){
		counter++;
    3ea2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ea4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ea6:	af 81       	ldd	r26, Y+7	; 0x07
    3ea8:	b8 85       	ldd	r27, Y+8	; 0x08
    3eaa:	01 96       	adiw	r24, 0x01	; 1
    3eac:	a1 1d       	adc	r26, r1
    3eae:	b1 1d       	adc	r27, r1
    3eb0:	8d 83       	std	Y+5, r24	; 0x05
    3eb2:	9e 83       	std	Y+6, r25	; 0x06
    3eb4:	af 83       	std	Y+7, r26	; 0x07
    3eb6:	b8 87       	std	Y+8, r27	; 0x08
	u8 arr[INT_TO_STRING_ARR_SIZE];
	s32 number = (s32) (Data * 100);
	u8 *str = IntToString(number,arr);
	u32 counter=0;
	u32 counter2=0;
	while(str[counter] != '\0'){
    3eb8:	2d 81       	ldd	r18, Y+5	; 0x05
    3eba:	3e 81       	ldd	r19, Y+6	; 0x06
    3ebc:	89 85       	ldd	r24, Y+9	; 0x09
    3ebe:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ec0:	fc 01       	movw	r30, r24
    3ec2:	e2 0f       	add	r30, r18
    3ec4:	f3 1f       	adc	r31, r19
    3ec6:	80 81       	ld	r24, Z
    3ec8:	88 23       	and	r24, r24
    3eca:	59 f7       	brne	.-42     	; 0x3ea2 <LCD_voidWriteFloatData+0x76>
		counter++;
	}
	counter -= 2;
    3ecc:	8d 81       	ldd	r24, Y+5	; 0x05
    3ece:	9e 81       	ldd	r25, Y+6	; 0x06
    3ed0:	af 81       	ldd	r26, Y+7	; 0x07
    3ed2:	b8 85       	ldd	r27, Y+8	; 0x08
    3ed4:	02 97       	sbiw	r24, 0x02	; 2
    3ed6:	a1 09       	sbc	r26, r1
    3ed8:	b1 09       	sbc	r27, r1
    3eda:	8d 83       	std	Y+5, r24	; 0x05
    3edc:	9e 83       	std	Y+6, r25	; 0x06
    3ede:	af 83       	std	Y+7, r26	; 0x07
    3ee0:	b8 87       	std	Y+8, r27	; 0x08
	if(!counter){
    3ee2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ee4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ee6:	af 81       	ldd	r26, Y+7	; 0x07
    3ee8:	b8 85       	ldd	r27, Y+8	; 0x08
    3eea:	00 97       	sbiw	r24, 0x00	; 0
    3eec:	a1 05       	cpc	r26, r1
    3eee:	b1 05       	cpc	r27, r1
    3ef0:	49 f5       	brne	.+82     	; 0x3f44 <LCD_voidWriteFloatData+0x118>
		LCD_voidWriteChar('0');
    3ef2:	80 e3       	ldi	r24, 0x30	; 48
    3ef4:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
    3ef8:	25 c0       	rjmp	.+74     	; 0x3f44 <LCD_voidWriteFloatData+0x118>
	}
	while(str[counter2] != '\0'){
		if(counter2 == counter){
    3efa:	29 81       	ldd	r18, Y+1	; 0x01
    3efc:	3a 81       	ldd	r19, Y+2	; 0x02
    3efe:	4b 81       	ldd	r20, Y+3	; 0x03
    3f00:	5c 81       	ldd	r21, Y+4	; 0x04
    3f02:	8d 81       	ldd	r24, Y+5	; 0x05
    3f04:	9e 81       	ldd	r25, Y+6	; 0x06
    3f06:	af 81       	ldd	r26, Y+7	; 0x07
    3f08:	b8 85       	ldd	r27, Y+8	; 0x08
    3f0a:	28 17       	cp	r18, r24
    3f0c:	39 07       	cpc	r19, r25
    3f0e:	4a 07       	cpc	r20, r26
    3f10:	5b 07       	cpc	r21, r27
    3f12:	19 f4       	brne	.+6      	; 0x3f1a <LCD_voidWriteFloatData+0xee>
			LCD_voidWriteChar('.');
    3f14:	8e e2       	ldi	r24, 0x2E	; 46
    3f16:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
		}
		LCD_voidWriteChar(str[counter2]);
    3f1a:	29 81       	ldd	r18, Y+1	; 0x01
    3f1c:	3a 81       	ldd	r19, Y+2	; 0x02
    3f1e:	89 85       	ldd	r24, Y+9	; 0x09
    3f20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f22:	fc 01       	movw	r30, r24
    3f24:	e2 0f       	add	r30, r18
    3f26:	f3 1f       	adc	r31, r19
    3f28:	80 81       	ld	r24, Z
    3f2a:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
		counter2++;
    3f2e:	89 81       	ldd	r24, Y+1	; 0x01
    3f30:	9a 81       	ldd	r25, Y+2	; 0x02
    3f32:	ab 81       	ldd	r26, Y+3	; 0x03
    3f34:	bc 81       	ldd	r27, Y+4	; 0x04
    3f36:	01 96       	adiw	r24, 0x01	; 1
    3f38:	a1 1d       	adc	r26, r1
    3f3a:	b1 1d       	adc	r27, r1
    3f3c:	89 83       	std	Y+1, r24	; 0x01
    3f3e:	9a 83       	std	Y+2, r25	; 0x02
    3f40:	ab 83       	std	Y+3, r26	; 0x03
    3f42:	bc 83       	std	Y+4, r27	; 0x04
	}
	counter -= 2;
	if(!counter){
		LCD_voidWriteChar('0');
	}
	while(str[counter2] != '\0'){
    3f44:	29 81       	ldd	r18, Y+1	; 0x01
    3f46:	3a 81       	ldd	r19, Y+2	; 0x02
    3f48:	89 85       	ldd	r24, Y+9	; 0x09
    3f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f4c:	fc 01       	movw	r30, r24
    3f4e:	e2 0f       	add	r30, r18
    3f50:	f3 1f       	adc	r31, r19
    3f52:	80 81       	ld	r24, Z
    3f54:	88 23       	and	r24, r24
    3f56:	89 f6       	brne	.-94     	; 0x3efa <LCD_voidWriteFloatData+0xce>
			LCD_voidWriteChar('.');
		}
		LCD_voidWriteChar(str[counter2]);
		counter2++;
	}
}
    3f58:	a6 96       	adiw	r28, 0x26	; 38
    3f5a:	0f b6       	in	r0, 0x3f	; 63
    3f5c:	f8 94       	cli
    3f5e:	de bf       	out	0x3e, r29	; 62
    3f60:	0f be       	out	0x3f, r0	; 63
    3f62:	cd bf       	out	0x3d, r28	; 61
    3f64:	cf 91       	pop	r28
    3f66:	df 91       	pop	r29
    3f68:	08 95       	ret

00003f6a <LCD_voidGoToPosition>:

void LCD_voidGoToPosition(u8 X_Position, u8 Y_Position){
    3f6a:	df 93       	push	r29
    3f6c:	cf 93       	push	r28
    3f6e:	00 d0       	rcall	.+0      	; 0x3f70 <LCD_voidGoToPosition+0x6>
    3f70:	0f 92       	push	r0
    3f72:	cd b7       	in	r28, 0x3d	; 61
    3f74:	de b7       	in	r29, 0x3e	; 62
    3f76:	8a 83       	std	Y+2, r24	; 0x02
    3f78:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_Address = FIRST_LINE_ADDRESS;
    3f7a:	80 e8       	ldi	r24, 0x80	; 128
    3f7c:	89 83       	std	Y+1, r24	; 0x01

	if(X_Position == 0){
    3f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f80:	88 23       	and	r24, r24
    3f82:	21 f4       	brne	.+8      	; 0x3f8c <LCD_voidGoToPosition+0x22>
		Local_Address = FIRST_LINE_ADDRESS + Y_Position;
    3f84:	8b 81       	ldd	r24, Y+3	; 0x03
    3f86:	80 58       	subi	r24, 0x80	; 128
    3f88:	89 83       	std	Y+1, r24	; 0x01
    3f8a:	14 c0       	rjmp	.+40     	; 0x3fb4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 1){
    3f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f8e:	81 30       	cpi	r24, 0x01	; 1
    3f90:	21 f4       	brne	.+8      	; 0x3f9a <LCD_voidGoToPosition+0x30>
		Local_Address = SECOND_LINE_ADDRESS + Y_Position;
    3f92:	8b 81       	ldd	r24, Y+3	; 0x03
    3f94:	80 54       	subi	r24, 0x40	; 64
    3f96:	89 83       	std	Y+1, r24	; 0x01
    3f98:	0d c0       	rjmp	.+26     	; 0x3fb4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 2){
    3f9a:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9c:	82 30       	cpi	r24, 0x02	; 2
    3f9e:	21 f4       	brne	.+8      	; 0x3fa8 <LCD_voidGoToPosition+0x3e>
		Local_Address = THIRD_LINE_ADDRESS + Y_Position;
    3fa0:	8b 81       	ldd	r24, Y+3	; 0x03
    3fa2:	8c 56       	subi	r24, 0x6C	; 108
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	06 c0       	rjmp	.+12     	; 0x3fb4 <LCD_voidGoToPosition+0x4a>
	}
	else if(X_Position == 3){
    3fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3faa:	83 30       	cpi	r24, 0x03	; 3
    3fac:	19 f4       	brne	.+6      	; 0x3fb4 <LCD_voidGoToPosition+0x4a>
		Local_Address = FOURTH_LINE_ADDRESS + Y_Position;
    3fae:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb0:	8c 52       	subi	r24, 0x2C	; 44
    3fb2:	89 83       	std	Y+1, r24	; 0x01
	}

	Set_Bit(Local_Address,7); /*You can also just OR / add with 0x80 (128) to set the the MSB*/
    3fb4:	89 81       	ldd	r24, Y+1	; 0x01
    3fb6:	80 68       	ori	r24, 0x80	; 128
    3fb8:	89 83       	std	Y+1, r24	; 0x01
	LCD_voidSendCommand(Local_Address);
    3fba:	89 81       	ldd	r24, Y+1	; 0x01
    3fbc:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidSendCommand>
}
    3fc0:	0f 90       	pop	r0
    3fc2:	0f 90       	pop	r0
    3fc4:	0f 90       	pop	r0
    3fc6:	cf 91       	pop	r28
    3fc8:	df 91       	pop	r29
    3fca:	08 95       	ret

00003fcc <LCD_voidClear>:

void LCD_voidClear(u8 X_Position, u8 Y_Position)
{
    3fcc:	df 93       	push	r29
    3fce:	cf 93       	push	r28
    3fd0:	00 d0       	rcall	.+0      	; 0x3fd2 <LCD_voidClear+0x6>
    3fd2:	cd b7       	in	r28, 0x3d	; 61
    3fd4:	de b7       	in	r29, 0x3e	; 62
    3fd6:	89 83       	std	Y+1, r24	; 0x01
    3fd8:	6a 83       	std	Y+2, r22	; 0x02
	LCD_voidGoToPosition(X_Position,Y_Position);
    3fda:	89 81       	ldd	r24, Y+1	; 0x01
    3fdc:	6a 81       	ldd	r22, Y+2	; 0x02
    3fde:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
	LCD_voidWriteChar(' ');
    3fe2:	80 e2       	ldi	r24, 0x20	; 32
    3fe4:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
}
    3fe8:	0f 90       	pop	r0
    3fea:	0f 90       	pop	r0
    3fec:	cf 91       	pop	r28
    3fee:	df 91       	pop	r29
    3ff0:	08 95       	ret

00003ff2 <LCD_voidClearLine>:
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
    3ff2:	df 93       	push	r29
    3ff4:	cf 93       	push	r28
    3ff6:	00 d0       	rcall	.+0      	; 0x3ff8 <LCD_voidClearLine+0x6>
    3ff8:	0f 92       	push	r0
    3ffa:	cd b7       	in	r28, 0x3d	; 61
    3ffc:	de b7       	in	r29, 0x3e	; 62
    3ffe:	8a 83       	std	Y+2, r24	; 0x02
    4000:	6b 83       	std	Y+3, r22	; 0x03
	for(u8 num = 0; num <= Y_Position; num++)
    4002:	19 82       	std	Y+1, r1	; 0x01
    4004:	0a c0       	rjmp	.+20     	; 0x401a <LCD_voidClearLine+0x28>
	{
		LCD_voidGoToPosition(X_Position,num);
    4006:	8a 81       	ldd	r24, Y+2	; 0x02
    4008:	69 81       	ldd	r22, Y+1	; 0x01
    400a:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
		LCD_voidWriteChar(' ');
    400e:	80 e2       	ldi	r24, 0x20	; 32
    4010:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
	LCD_voidGoToPosition(X_Position,Y_Position);
	LCD_voidWriteChar(' ');
}
void LCD_voidClearLine(u8 X_Position, u8 Y_Position)
{
	for(u8 num = 0; num <= Y_Position; num++)
    4014:	89 81       	ldd	r24, Y+1	; 0x01
    4016:	8f 5f       	subi	r24, 0xFF	; 255
    4018:	89 83       	std	Y+1, r24	; 0x01
    401a:	99 81       	ldd	r25, Y+1	; 0x01
    401c:	8b 81       	ldd	r24, Y+3	; 0x03
    401e:	89 17       	cp	r24, r25
    4020:	90 f7       	brcc	.-28     	; 0x4006 <LCD_voidClearLine+0x14>
	{
		LCD_voidGoToPosition(X_Position,num);
		LCD_voidWriteChar(' ');
	}
}
    4022:	0f 90       	pop	r0
    4024:	0f 90       	pop	r0
    4026:	0f 90       	pop	r0
    4028:	cf 91       	pop	r28
    402a:	df 91       	pop	r29
    402c:	08 95       	ret

0000402e <LCD_voidDisplaySpecialChar>:

void LCD_voidDisplaySpecialChar(u8 *char_ptr,u8 CGRam_index,u8 row,u8 column){
    402e:	df 93       	push	r29
    4030:	cf 93       	push	r28
    4032:	cd b7       	in	r28, 0x3d	; 61
    4034:	de b7       	in	r29, 0x3e	; 62
    4036:	27 97       	sbiw	r28, 0x07	; 7
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	f8 94       	cli
    403c:	de bf       	out	0x3e, r29	; 62
    403e:	0f be       	out	0x3f, r0	; 63
    4040:	cd bf       	out	0x3d, r28	; 61
    4042:	9c 83       	std	Y+4, r25	; 0x04
    4044:	8b 83       	std	Y+3, r24	; 0x03
    4046:	6d 83       	std	Y+5, r22	; 0x05
    4048:	4e 83       	std	Y+6, r20	; 0x06
    404a:	2f 83       	std	Y+7, r18	; 0x07

	LCD_voidGoToPosition(row,column);
    404c:	8e 81       	ldd	r24, Y+6	; 0x06
    404e:	6f 81       	ldd	r22, Y+7	; 0x07
    4050:	0e 94 b5 1f 	call	0x3f6a	; 0x3f6a <LCD_voidGoToPosition>
	LCD_voidWriteChar(CGRam_index);
    4054:	8d 81       	ldd	r24, Y+5	; 0x05
    4056:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
	u8 address = 0;
    405a:	1a 82       	std	Y+2, r1	; 0x02
	u8 index = 0;
    405c:	19 82       	std	Y+1, r1	; 0x01
	if(CGRam_index < 8){
    405e:	8d 81       	ldd	r24, Y+5	; 0x05
    4060:	88 30       	cpi	r24, 0x08	; 8
    4062:	30 f5       	brcc	.+76     	; 0x40b0 <LCD_voidDisplaySpecialChar+0x82>
		address = CGRam_index * 8;
    4064:	8d 81       	ldd	r24, Y+5	; 0x05
    4066:	88 2f       	mov	r24, r24
    4068:	90 e0       	ldi	r25, 0x00	; 0
    406a:	88 0f       	add	r24, r24
    406c:	99 1f       	adc	r25, r25
    406e:	88 0f       	add	r24, r24
    4070:	99 1f       	adc	r25, r25
    4072:	88 0f       	add	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	8a 83       	std	Y+2, r24	; 0x02
		Set_Bit(address,6);
    4078:	8a 81       	ldd	r24, Y+2	; 0x02
    407a:	80 64       	ori	r24, 0x40	; 64
    407c:	8a 83       	std	Y+2, r24	; 0x02
		Clear_Bit(address,7);
    407e:	8a 81       	ldd	r24, Y+2	; 0x02
    4080:	8f 77       	andi	r24, 0x7F	; 127
    4082:	8a 83       	std	Y+2, r24	; 0x02
		LCD_voidSendCommand(address);
    4084:	8a 81       	ldd	r24, Y+2	; 0x02
    4086:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidSendCommand>
		for(index = 0; index < 8; index++){
    408a:	19 82       	std	Y+1, r1	; 0x01
    408c:	0e c0       	rjmp	.+28     	; 0x40aa <LCD_voidDisplaySpecialChar+0x7c>
			LCD_voidWriteChar(char_ptr[index]);
    408e:	89 81       	ldd	r24, Y+1	; 0x01
    4090:	28 2f       	mov	r18, r24
    4092:	30 e0       	ldi	r19, 0x00	; 0
    4094:	8b 81       	ldd	r24, Y+3	; 0x03
    4096:	9c 81       	ldd	r25, Y+4	; 0x04
    4098:	fc 01       	movw	r30, r24
    409a:	e2 0f       	add	r30, r18
    409c:	f3 1f       	adc	r31, r19
    409e:	80 81       	ld	r24, Z
    40a0:	0e 94 03 1d 	call	0x3a06	; 0x3a06 <LCD_voidWriteChar>
	if(CGRam_index < 8){
		address = CGRam_index * 8;
		Set_Bit(address,6);
		Clear_Bit(address,7);
		LCD_voidSendCommand(address);
		for(index = 0; index < 8; index++){
    40a4:	89 81       	ldd	r24, Y+1	; 0x01
    40a6:	8f 5f       	subi	r24, 0xFF	; 255
    40a8:	89 83       	std	Y+1, r24	; 0x01
    40aa:	89 81       	ldd	r24, Y+1	; 0x01
    40ac:	88 30       	cpi	r24, 0x08	; 8
    40ae:	78 f3       	brcs	.-34     	; 0x408e <LCD_voidDisplaySpecialChar+0x60>
			LCD_voidWriteChar(char_ptr[index]);
		}
	}
	LCD_voidSendCommand(LCD_ReturnHome);
    40b0:	82 e0       	ldi	r24, 0x02	; 2
    40b2:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <LCD_voidSendCommand>
}
    40b6:	27 96       	adiw	r28, 0x07	; 7
    40b8:	0f b6       	in	r0, 0x3f	; 63
    40ba:	f8 94       	cli
    40bc:	de bf       	out	0x3e, r29	; 62
    40be:	0f be       	out	0x3f, r0	; 63
    40c0:	cd bf       	out	0x3d, r28	; 61
    40c2:	cf 91       	pop	r28
    40c4:	df 91       	pop	r29
    40c6:	08 95       	ret

000040c8 <KPD_u8GetPressedKey>:
#include "KPD_Private.h"



u8 KPD_u8GetPressedKey(void)
{
    40c8:	df 93       	push	r29
    40ca:	cf 93       	push	r28
    40cc:	00 d0       	rcall	.+0      	; 0x40ce <KPD_u8GetPressedKey+0x6>
    40ce:	00 d0       	rcall	.+0      	; 0x40d0 <KPD_u8GetPressedKey+0x8>
    40d0:	0f 92       	push	r0
    40d2:	cd b7       	in	r28, 0x3d	; 61
    40d4:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey = KPD_NO_PRESSED_KEY;
    40d6:	8f ef       	ldi	r24, 0xFF	; 255
    40d8:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIdx, Local_u8RowIdx, Local_u8PinState = 0;
    40da:	1c 82       	std	Y+4, r1	; 0x04
			KPD_ROW_PIN1,
			KPD_ROW_PIN2,
			KPD_ROW_PIN3
	};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
    40dc:	1a 82       	std	Y+2, r1	; 0x02
    40de:	5e c0       	rjmp	.+188    	; 0x419c <KPD_u8GetPressedKey+0xd4>
	{
		// Activate current column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);
    40e0:	8a 81       	ldd	r24, Y+2	; 0x02
    40e2:	88 2f       	mov	r24, r24
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	fc 01       	movw	r30, r24
    40e8:	ec 58       	subi	r30, 0x8C	; 140
    40ea:	fe 4f       	sbci	r31, 0xFE	; 254
    40ec:	90 81       	ld	r25, Z
    40ee:	82 e0       	ldi	r24, 0x02	; 2
    40f0:	69 2f       	mov	r22, r25
    40f2:	40 e0       	ldi	r20, 0x00	; 0
    40f4:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    40f8:	19 82       	std	Y+1, r1	; 0x01
    40fa:	3d c0       	rjmp	.+122    	; 0x4176 <KPD_u8GetPressedKey+0xae>
		{
			// Get Current Row
			DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    40fc:	89 81       	ldd	r24, Y+1	; 0x01
    40fe:	88 2f       	mov	r24, r24
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	fc 01       	movw	r30, r24
    4104:	e0 59       	subi	r30, 0x90	; 144
    4106:	fe 4f       	sbci	r31, 0xFE	; 254
    4108:	90 81       	ld	r25, Z
    410a:	9e 01       	movw	r18, r28
    410c:	2c 5f       	subi	r18, 0xFC	; 252
    410e:	3f 4f       	sbci	r19, 0xFF	; 255
    4110:	82 e0       	ldi	r24, 0x02	; 2
    4112:	69 2f       	mov	r22, r25
    4114:	a9 01       	movw	r20, r18
    4116:	0e 94 d5 11 	call	0x23aa	; 0x23aa <DIO_GetPinValue>

			// Check pressed
			if( DIO_u8PIN_LOW == Local_u8PinState )
    411a:	8c 81       	ldd	r24, Y+4	; 0x04
    411c:	88 23       	and	r24, r24
    411e:	41 f5       	brne	.+80     	; 0x4170 <KPD_u8GetPressedKey+0xa8>
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];
    4120:	89 81       	ldd	r24, Y+1	; 0x01
    4122:	48 2f       	mov	r20, r24
    4124:	50 e0       	ldi	r21, 0x00	; 0
    4126:	8a 81       	ldd	r24, Y+2	; 0x02
    4128:	28 2f       	mov	r18, r24
    412a:	30 e0       	ldi	r19, 0x00	; 0
    412c:	ca 01       	movw	r24, r20
    412e:	88 0f       	add	r24, r24
    4130:	99 1f       	adc	r25, r25
    4132:	88 0f       	add	r24, r24
    4134:	99 1f       	adc	r25, r25
    4136:	82 0f       	add	r24, r18
    4138:	93 1f       	adc	r25, r19
    413a:	fc 01       	movw	r30, r24
    413c:	e8 58       	subi	r30, 0x88	; 136
    413e:	fe 4f       	sbci	r31, 0xFE	; 254
    4140:	80 81       	ld	r24, Z
    4142:	8b 83       	std	Y+3, r24	; 0x03
    4144:	0f c0       	rjmp	.+30     	; 0x4164 <KPD_u8GetPressedKey+0x9c>

				// Busy waiting until released
				while( DIO_u8PIN_LOW == Local_u8PinState )
				{
					DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
    4146:	89 81       	ldd	r24, Y+1	; 0x01
    4148:	88 2f       	mov	r24, r24
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	fc 01       	movw	r30, r24
    414e:	e0 59       	subi	r30, 0x90	; 144
    4150:	fe 4f       	sbci	r31, 0xFE	; 254
    4152:	90 81       	ld	r25, Z
    4154:	9e 01       	movw	r18, r28
    4156:	2c 5f       	subi	r18, 0xFC	; 252
    4158:	3f 4f       	sbci	r19, 0xFF	; 255
    415a:	82 e0       	ldi	r24, 0x02	; 2
    415c:	69 2f       	mov	r22, r25
    415e:	a9 01       	movw	r20, r18
    4160:	0e 94 d5 11 	call	0x23aa	; 0x23aa <DIO_GetPinValue>
			if( DIO_u8PIN_LOW == Local_u8PinState )
			{
				Local_u8PressedKey = Local_u8KPDArr[Local_u8RowIdx][Local_u8ColumnIdx];

				// Busy waiting until released
				while( DIO_u8PIN_LOW == Local_u8PinState )
    4164:	8c 81       	ldd	r24, Y+4	; 0x04
    4166:	88 23       	and	r24, r24
    4168:	71 f3       	breq	.-36     	; 0x4146 <KPD_u8GetPressedKey+0x7e>
				{
					DIO_GetPinValue(KPD_PORT, Local_u8KPDRowArr[Local_u8RowIdx], &Local_u8PinState);
				}
				return Local_u8PressedKey;
    416a:	8b 81       	ldd	r24, Y+3	; 0x03
    416c:	8d 83       	std	Y+5, r24	; 0x05
    416e:	1c c0       	rjmp	.+56     	; 0x41a8 <KPD_u8GetPressedKey+0xe0>
	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
	{
		// Activate current column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_LOW);

		for(Local_u8RowIdx = 0; Local_u8RowIdx < ROW_NUM; Local_u8RowIdx++)
    4170:	89 81       	ldd	r24, Y+1	; 0x01
    4172:	8f 5f       	subi	r24, 0xFF	; 255
    4174:	89 83       	std	Y+1, r24	; 0x01
    4176:	89 81       	ldd	r24, Y+1	; 0x01
    4178:	84 30       	cpi	r24, 0x04	; 4
    417a:	08 f4       	brcc	.+2      	; 0x417e <KPD_u8GetPressedKey+0xb6>
    417c:	bf cf       	rjmp	.-130    	; 0x40fc <KPD_u8GetPressedKey+0x34>
				return Local_u8PressedKey;
			}

		}
		// Deactivate current Column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);
    417e:	8a 81       	ldd	r24, Y+2	; 0x02
    4180:	88 2f       	mov	r24, r24
    4182:	90 e0       	ldi	r25, 0x00	; 0
    4184:	fc 01       	movw	r30, r24
    4186:	ec 58       	subi	r30, 0x8C	; 140
    4188:	fe 4f       	sbci	r31, 0xFE	; 254
    418a:	90 81       	ld	r25, Z
    418c:	82 e0       	ldi	r24, 0x02	; 2
    418e:	69 2f       	mov	r22, r25
    4190:	41 e0       	ldi	r20, 0x01	; 1
    4192:	0e 94 8c 10 	call	0x2118	; 0x2118 <DIO_u8SetPinValue>
			KPD_ROW_PIN1,
			KPD_ROW_PIN2,
			KPD_ROW_PIN3
	};

	for(Local_u8ColumnIdx = 0; Local_u8ColumnIdx < COLM_NUM; Local_u8ColumnIdx++)
    4196:	8a 81       	ldd	r24, Y+2	; 0x02
    4198:	8f 5f       	subi	r24, 0xFF	; 255
    419a:	8a 83       	std	Y+2, r24	; 0x02
    419c:	8a 81       	ldd	r24, Y+2	; 0x02
    419e:	84 30       	cpi	r24, 0x04	; 4
    41a0:	08 f4       	brcc	.+2      	; 0x41a4 <KPD_u8GetPressedKey+0xdc>
    41a2:	9e cf       	rjmp	.-196    	; 0x40e0 <KPD_u8GetPressedKey+0x18>
		}
		// Deactivate current Column
		DIO_u8SetPinValue(KPD_PORT, Local_u8KPDColmArr[Local_u8ColumnIdx], DIO_u8PIN_HIGH);

	}
	return Local_u8PressedKey;
    41a4:	8b 81       	ldd	r24, Y+3	; 0x03
    41a6:	8d 83       	std	Y+5, r24	; 0x05
    41a8:	8d 81       	ldd	r24, Y+5	; 0x05
}
    41aa:	0f 90       	pop	r0
    41ac:	0f 90       	pop	r0
    41ae:	0f 90       	pop	r0
    41b0:	0f 90       	pop	r0
    41b2:	0f 90       	pop	r0
    41b4:	cf 91       	pop	r28
    41b6:	df 91       	pop	r29
    41b8:	08 95       	ret

000041ba <__mulsi3>:
    41ba:	62 9f       	mul	r22, r18
    41bc:	d0 01       	movw	r26, r0
    41be:	73 9f       	mul	r23, r19
    41c0:	f0 01       	movw	r30, r0
    41c2:	82 9f       	mul	r24, r18
    41c4:	e0 0d       	add	r30, r0
    41c6:	f1 1d       	adc	r31, r1
    41c8:	64 9f       	mul	r22, r20
    41ca:	e0 0d       	add	r30, r0
    41cc:	f1 1d       	adc	r31, r1
    41ce:	92 9f       	mul	r25, r18
    41d0:	f0 0d       	add	r31, r0
    41d2:	83 9f       	mul	r24, r19
    41d4:	f0 0d       	add	r31, r0
    41d6:	74 9f       	mul	r23, r20
    41d8:	f0 0d       	add	r31, r0
    41da:	65 9f       	mul	r22, r21
    41dc:	f0 0d       	add	r31, r0
    41de:	99 27       	eor	r25, r25
    41e0:	72 9f       	mul	r23, r18
    41e2:	b0 0d       	add	r27, r0
    41e4:	e1 1d       	adc	r30, r1
    41e6:	f9 1f       	adc	r31, r25
    41e8:	63 9f       	mul	r22, r19
    41ea:	b0 0d       	add	r27, r0
    41ec:	e1 1d       	adc	r30, r1
    41ee:	f9 1f       	adc	r31, r25
    41f0:	bd 01       	movw	r22, r26
    41f2:	cf 01       	movw	r24, r30
    41f4:	11 24       	eor	r1, r1
    41f6:	08 95       	ret

000041f8 <__divmodsi4>:
    41f8:	97 fb       	bst	r25, 7
    41fa:	09 2e       	mov	r0, r25
    41fc:	05 26       	eor	r0, r21
    41fe:	0e d0       	rcall	.+28     	; 0x421c <__divmodsi4_neg1>
    4200:	57 fd       	sbrc	r21, 7
    4202:	04 d0       	rcall	.+8      	; 0x420c <__divmodsi4_neg2>
    4204:	14 d0       	rcall	.+40     	; 0x422e <__udivmodsi4>
    4206:	0a d0       	rcall	.+20     	; 0x421c <__divmodsi4_neg1>
    4208:	00 1c       	adc	r0, r0
    420a:	38 f4       	brcc	.+14     	; 0x421a <__divmodsi4_exit>

0000420c <__divmodsi4_neg2>:
    420c:	50 95       	com	r21
    420e:	40 95       	com	r20
    4210:	30 95       	com	r19
    4212:	21 95       	neg	r18
    4214:	3f 4f       	sbci	r19, 0xFF	; 255
    4216:	4f 4f       	sbci	r20, 0xFF	; 255
    4218:	5f 4f       	sbci	r21, 0xFF	; 255

0000421a <__divmodsi4_exit>:
    421a:	08 95       	ret

0000421c <__divmodsi4_neg1>:
    421c:	f6 f7       	brtc	.-4      	; 0x421a <__divmodsi4_exit>
    421e:	90 95       	com	r25
    4220:	80 95       	com	r24
    4222:	70 95       	com	r23
    4224:	61 95       	neg	r22
    4226:	7f 4f       	sbci	r23, 0xFF	; 255
    4228:	8f 4f       	sbci	r24, 0xFF	; 255
    422a:	9f 4f       	sbci	r25, 0xFF	; 255
    422c:	08 95       	ret

0000422e <__udivmodsi4>:
    422e:	a1 e2       	ldi	r26, 0x21	; 33
    4230:	1a 2e       	mov	r1, r26
    4232:	aa 1b       	sub	r26, r26
    4234:	bb 1b       	sub	r27, r27
    4236:	fd 01       	movw	r30, r26
    4238:	0d c0       	rjmp	.+26     	; 0x4254 <__udivmodsi4_ep>

0000423a <__udivmodsi4_loop>:
    423a:	aa 1f       	adc	r26, r26
    423c:	bb 1f       	adc	r27, r27
    423e:	ee 1f       	adc	r30, r30
    4240:	ff 1f       	adc	r31, r31
    4242:	a2 17       	cp	r26, r18
    4244:	b3 07       	cpc	r27, r19
    4246:	e4 07       	cpc	r30, r20
    4248:	f5 07       	cpc	r31, r21
    424a:	20 f0       	brcs	.+8      	; 0x4254 <__udivmodsi4_ep>
    424c:	a2 1b       	sub	r26, r18
    424e:	b3 0b       	sbc	r27, r19
    4250:	e4 0b       	sbc	r30, r20
    4252:	f5 0b       	sbc	r31, r21

00004254 <__udivmodsi4_ep>:
    4254:	66 1f       	adc	r22, r22
    4256:	77 1f       	adc	r23, r23
    4258:	88 1f       	adc	r24, r24
    425a:	99 1f       	adc	r25, r25
    425c:	1a 94       	dec	r1
    425e:	69 f7       	brne	.-38     	; 0x423a <__udivmodsi4_loop>
    4260:	60 95       	com	r22
    4262:	70 95       	com	r23
    4264:	80 95       	com	r24
    4266:	90 95       	com	r25
    4268:	9b 01       	movw	r18, r22
    426a:	ac 01       	movw	r20, r24
    426c:	bd 01       	movw	r22, r26
    426e:	cf 01       	movw	r24, r30
    4270:	08 95       	ret

00004272 <__prologue_saves__>:
    4272:	2f 92       	push	r2
    4274:	3f 92       	push	r3
    4276:	4f 92       	push	r4
    4278:	5f 92       	push	r5
    427a:	6f 92       	push	r6
    427c:	7f 92       	push	r7
    427e:	8f 92       	push	r8
    4280:	9f 92       	push	r9
    4282:	af 92       	push	r10
    4284:	bf 92       	push	r11
    4286:	cf 92       	push	r12
    4288:	df 92       	push	r13
    428a:	ef 92       	push	r14
    428c:	ff 92       	push	r15
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	cd b7       	in	r28, 0x3d	; 61
    4298:	de b7       	in	r29, 0x3e	; 62
    429a:	ca 1b       	sub	r28, r26
    429c:	db 0b       	sbc	r29, r27
    429e:	0f b6       	in	r0, 0x3f	; 63
    42a0:	f8 94       	cli
    42a2:	de bf       	out	0x3e, r29	; 62
    42a4:	0f be       	out	0x3f, r0	; 63
    42a6:	cd bf       	out	0x3d, r28	; 61
    42a8:	09 94       	ijmp

000042aa <__epilogue_restores__>:
    42aa:	2a 88       	ldd	r2, Y+18	; 0x12
    42ac:	39 88       	ldd	r3, Y+17	; 0x11
    42ae:	48 88       	ldd	r4, Y+16	; 0x10
    42b0:	5f 84       	ldd	r5, Y+15	; 0x0f
    42b2:	6e 84       	ldd	r6, Y+14	; 0x0e
    42b4:	7d 84       	ldd	r7, Y+13	; 0x0d
    42b6:	8c 84       	ldd	r8, Y+12	; 0x0c
    42b8:	9b 84       	ldd	r9, Y+11	; 0x0b
    42ba:	aa 84       	ldd	r10, Y+10	; 0x0a
    42bc:	b9 84       	ldd	r11, Y+9	; 0x09
    42be:	c8 84       	ldd	r12, Y+8	; 0x08
    42c0:	df 80       	ldd	r13, Y+7	; 0x07
    42c2:	ee 80       	ldd	r14, Y+6	; 0x06
    42c4:	fd 80       	ldd	r15, Y+5	; 0x05
    42c6:	0c 81       	ldd	r16, Y+4	; 0x04
    42c8:	1b 81       	ldd	r17, Y+3	; 0x03
    42ca:	aa 81       	ldd	r26, Y+2	; 0x02
    42cc:	b9 81       	ldd	r27, Y+1	; 0x01
    42ce:	ce 0f       	add	r28, r30
    42d0:	d1 1d       	adc	r29, r1
    42d2:	0f b6       	in	r0, 0x3f	; 63
    42d4:	f8 94       	cli
    42d6:	de bf       	out	0x3e, r29	; 62
    42d8:	0f be       	out	0x3f, r0	; 63
    42da:	cd bf       	out	0x3d, r28	; 61
    42dc:	ed 01       	movw	r28, r26
    42de:	08 95       	ret

000042e0 <_exit>:
    42e0:	f8 94       	cli

000042e2 <__stop_program>:
    42e2:	ff cf       	rjmp	.-2      	; 0x42e2 <__stop_program>
